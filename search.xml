<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python-telegram-bot development experience and notes</title>
      <link href="/python/tgbot/"/>
      <url>/python/tgbot/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>My personal experience and notes when using <a href="https://python-telegram-bot.org/">python-telegram-bot</a></li><li>Explained with examples from <a href="https://t.me/Mensaar_Bot">@Mensaar_Bot</a> and <a href="https://t.me/udsfahrbot">@udsfahrbot</a></li></ul></blockquote><h2 id="Create-your-first-telegram-bot"><a href="#Create-your-first-telegram-bot" class="headerlink" title="Create your first telegram bot"></a>Create your first telegram bot</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot</title>
      <link href="/projects/udsfahrplan-bot/"/>
      <url>/projects/udsfahrplan-bot/</url>
      
        <content type="html"><![CDATA[<p>A lightweight Telegram bot designed for Saarland University students — offering fast, clear, and focused public transport information using SaarVV and HAFAS APIs. — <strong><a href="https://t.me/udsfahrbot">Try Now</a></strong></p><h2 id="🔍-What-it-is"><a href="#🔍-What-it-is" class="headerlink" title="🔍 What it is"></a>🔍 What it is</h2><p><strong>UdS Fahrplan</strong> is a minimal alternative to the full Saarfahrplan app. No clutter. No overwhelming options. Just a clean Telegram interface for:</p><ul><li>🔄 Trip planning with <code>/trip</code></li><li>🕒 Live departure boards with <code>/depart</code></li><li>🏠 One-tap departures from your home station with <code>/home</code></li></ul><p>Built with students and locals in mind.</p><hr><h2 id="✨-Features"><a href="#✨-Features" class="headerlink" title="✨ Features"></a>✨ Features</h2><ul><li><strong>&#x2F;trip</strong> – Search from A to B in Saarland &amp; Luxembourg</li><li><strong>&#x2F;depart</strong> – View all upcoming buses from any station</li><li><strong>&#x2F;home</strong> – Configure your home station and check buses in both directions (e.g., City ↔ Dudweiler)</li><li><strong>&#x2F;sethome</strong> – Set or update your personal home station</li><li><strong>Intelligent Filtering</strong> – Excludes school buses, allows regional&#x2F;suburban focus</li><li><strong>Persistent Storage</strong> – Remembers user settings across bot restarts</li></ul><hr><h2 id="Related-Projects"><a href="#Related-Projects" class="headerlink" title="Related Projects"></a>Related Projects</h2><p><a href="https://github.com/public-transport/hafas-client">hafas-client</a> – JavaScript client for HAFAS public transport APIs.<br><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a> – Real-Time tracking of bus lines across Luxembourg<br><a href="https://int.bahn.de/en">Deutsche Bahn</a><br><a href="https://www.saarfahrplan.de/">SaarFahrplan</a><br><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></p><hr><h2 id="📝-Development-Log"><a href="#📝-Development-Log" class="headerlink" title="📝 Development Log"></a>📝 Development Log</h2><p><a href="../udsfahrplan-log1">UdS Fahrplan Bot Development Log (1) – Fetching data from HAFAS and its APIs through POST requests</a><br><a href="../udsfahrplan-log2">UdS Fahrplan Bot Development Log (2) – Planning for telegram bot</a><br><a href="../udsfahrplan-log3">UdS Fahrplan Bot Development Log (3) – Implementation on &#x2F;trip and &#x2F;depart function</a><br><a href="../udsfahrplan-log4">UdS Fahrplan Bot Development Log (4) – Implementation on &#x2F;sethome and &#x2F;home function</a><br><a href="../udsfahrplan-log5">UdS Fahrplan Bot Development Log (5) – Explanations on bot sessions and requests</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🍽 🥨 MensaarLecker -- A beloved tool to find out Mensa Ladies&#39; favourite menu using Selenium🥨 🍽</title>
      <link href="/projects/mensaar/"/>
      <url>/projects/mensaar/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></strong></p></blockquote><p>As an <a href="https://www.uni-saarland.de/start.html">UdS</a> Student,<br>Are you tired of seeing french fries🍟 3 times a week, or wondering when I can have the best pizza 🍕 in the Mensacafe?<br>MensaarLecker aims to collect all the data from Menu 1, 2, and Mensacafe to trace your favourite, or Mensa Ladies’, favourite menu!</p><hr><h2 id="🆕-Updates"><a href="#🆕-Updates" class="headerlink" title="🆕 Updates"></a>🆕 Updates</h2><p><strong>05.08 – Telegram Bot <a href="https://t.me/Mensaar_Bot">@Mensaar_Bot</a> are published.</strong></p><p>(See my development blog in here! <a href="../mensaarlog3">MensaarLecker Development Log 3 – Telegram Bot Deployment and Integration</a>)</p><p><strong>04.21 – <a href="HTW">https://mensaar.de/#/menu/htwcrb</a> menus are now added to the statistics.</strong></p><hr><h2 id="🥗-Description"><a href="#🥗-Description" class="headerlink" title="🥗 Description"></a>🥗 Description</h2><p>A fully automated scraper and static website for the Saarbrücken Mensa, powered by Python, Selenium, Google Sheets, and GitHub Actions.</p><blockquote><p>Get a clean and daily-updated overview of meals from <a href="https://mensaar.de/">mensaar.de</a>, with searchable history, meal components, and frequency stats.</p></blockquote><hr><h2 id="🌐-Live-Demo"><a href="#🌐-Live-Demo" class="headerlink" title="🌐 Live Demo"></a>🌐 Live Demo</h2><p>👉 <a href="https://your-username.github.io/MensaarLecker">View Website</a><br>👉 <a href="https://docs.google.com/spreadsheets/d/your-sheet-id-here">View Data in Google Sheets</a></p><p><img src="/images/mensaar/menu.png"></p><hr><h2 id="📅-Features"><a href="#📅-Features" class="headerlink" title="📅 Features"></a>📅 Features</h2><ul><li>✅ Scrapes the Saarbrücken Mensa daily menu</li><li>✅ Publishes structured data to a connected Google Sheet</li><li>✅ Generates static HTML pages:<ul><li><strong><code>index.html</code></strong> – Today’s menu with meal frequency counts</li><li><strong><code>menu.html</code></strong> – Full searchable menu with DataTables</li></ul></li><li>✅ Automatically updates via GitHub Actions at <strong>10:00 AM UTC on weekdays</strong></li><li>✅ Beautiful card-style layout &amp; component display</li><li>✅ No server required — 100% static</li></ul><hr><h2 id="🧠-Meal-Frequency-Display-Example"><a href="#🧠-Meal-Frequency-Display-Example" class="headerlink" title="🧠 Meal Frequency Display Example"></a>🧠 Meal Frequency Display Example</h2><p>The homepage shows how often each meal has been served based on historical data since 2025.03.20:</p><p><strong>🍽️ Pasta mit Tomatensoße</strong><br><em>📊 Seen since 2025.03.20</em><br>✅ Geriebener Käse<br>✅ Rucola</p><p><img src="/images/mensaar/main.png"></p><hr><h2 id="📁-Project-Structure"><a href="#📁-Project-Structure" class="headerlink" title="📁 Project Structure"></a>📁 Project Structure</h2><figure class="highlight bash"><figcaption><span>directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── Mensaar_scraper.py         <span class="hljs-comment"># Scrapes from mensaar.de and writes to Google Sheet</span><br>├── generate_menu.py           <span class="hljs-comment"># Reads the sheet and generates index.html and menu.html</span><br>├── credentials.json           <span class="hljs-comment"># Google service account key (excluded from repo)</span><br>├── index.html                 <span class="hljs-comment"># Main website page with today&#x27;s menu</span><br>├── menu.html                  <span class="hljs-comment"># Full searchable table of meals</span><br>├── .github/workflows/<br>│   └── update_menu.yml        <span class="hljs-comment"># GitHub Actions automation</span><br>├── src/<br>│   └── uds_spirit.jpg         <span class="hljs-comment"># Soul of this project</span><br>└── README.md<br></code></pre></td></tr></table></figure><h2 id="📝-Development-Log"><a href="#📝-Development-Log" class="headerlink" title="📝 Development Log"></a>📝 Development Log</h2><p><a href="../mensaarlog1">MensaarLecker Development Log 1 – Web Crawling</a><br><a href="../mensaarlog2">MensaarLecker Development Log 2 – Web Developing and GitHub Workflow</a><br><a href="../mensaarlog3">MensaarLecker Development Log 3 – Telegram Bot Deployment and Integration</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker Development Log (3) -- Telegram Bot Deployment and Integration</title>
      <link href="/projects/mensaar-log3/"/>
      <url>/projects/mensaar-log3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>My personal experience when developing a web crawler using <a href="https://selenium-python.readthedocs.io/">Selenium</a></li><li>Explained with examples from my Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></li><li>For further details, feel free to **Try the bot: <a href="https://t.me/Mensaar_Bot">@Mensaar_Bot</a></li></ul></blockquote><h2 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features"></a>New Features</h2><p>Previous post: <a href="../mensaarlog2">MensaarLecker Development Log (2) – Web Developing and GitHub Workflow</a></p><h3 id="HTW-menu"><a href="#HTW-menu" class="headerlink" title="HTW menu"></a>HTW menu</h3><p>After the website is published, we noticed that people now prefer to have lunch in <a href="https://www.htwsaar.de/hochschule/standorte-und-kontakt/campus-rotenbuehl">HTW Campus Rotenbühl</a>. Since their menu come from the same site, it is very easy to introduce new menu to our project.</p><h3 id="New-website-layout"><a href="#New-website-layout" class="headerlink" title="New website layout"></a>New website layout</h3><p>Before we used two pages to store today’s menu and the menu history. And we think in general, all menu are simple texts, so we can put all contents into the index page without any problem. We can switch the visibility using JavaScript:</p><figure class="highlight javascript"><figcaption><span>switch.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">id</span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.section&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>));<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>And for the whole HTML code again we stuffed in the python script to for our daily Github workflow to run.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Mensaar Menu - &#123;today&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show(&#x27;today-uds&#x27;)&quot;</span>&gt;</span>📅 UDS Today<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show(&#x27;today-htw&#x27;)&quot;</span>&gt;</span>📅 HTW Today<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show(&#x27;full-uds&#x27;)&quot;</span>&gt;</span>📋 Full UDS<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show(&#x27;full-htw&#x27;)&quot;</span>&gt;</span>📋 Full HTW<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;today-uds&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section active&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>UDS – Today&#x27;s Menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;meal_cards(uds_data)&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;today-htw&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HTW – Today&#x27;s Menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;meal_cards(htw_data)&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;full-uds&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>📋 Full UDS Menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uds-table&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Counter<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Meal<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 4<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 5<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>&#123;table_rows(uds_data)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;full-htw&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>📋 Full HTW Menu<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;htw-table&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Counter<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Meal<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 4<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Component 5<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>&#123;table_rows(htw_data)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Telegram-Bot-–-Mensaar-Bot"><a href="#Telegram-Bot-–-Mensaar-Bot" class="headerlink" title="Telegram Bot – @Mensaar_Bot"></a>Telegram Bot – <code>@Mensaar_Bot</code></h3><p>On top of the webiste, we can reuse the scraping code to create a telegram bot. First, we need to create a bot and get its API key using <a href="https://telegram.me/BotFather">botfather</a>.</p><p><img src="/images/mensaar/mensaar_botfather.png"></p><p>Onve you get the key, you bot is created and alive! However, it doesn’t do anything because we haven’t tell it what to do. So, we need to implement its functionalities. <strong><a href="https://python-telegram-bot.org/">python-telegram-bot</a></strong> is a very good package that contains everything we need to control the bot.</p><h3 id="RapidFuzz-–-Fuzzy-Text-detection-for-bot-reply"><a href="#RapidFuzz-–-Fuzzy-Text-detection-for-bot-reply" class="headerlink" title="RapidFuzz – Fuzzy Text detection for bot reply"></a><a href="https://rapidfuzz.github.io/RapidFuzz/">RapidFuzz</a> – Fuzzy Text detection for bot reply</h3><p>Other than commands and buttons, we also want to make the bot to reply to text message for better interactions. When the bot is added to a group chat, users can interact to the bot by tagging the bot and sending messages. Any texts related to food, mensa and menu will be accpeted and perform the action.</p><p>This is done under <a href="https://en.wikipedia.org/wiki/Approximate_string_matching">fuzzy matching</a>. Using <code>fuzz.partial_ratio()</code> we can compare the similarity of users’ messages with our keyword list.</p><h2 id="Brief-Walkthrough-on-Telegram-Bot"><a href="#Brief-Walkthrough-on-Telegram-Bot" class="headerlink" title="Brief Walkthrough on Telegram Bot"></a>Brief Walkthrough on Telegram Bot</h2><p>We also have another study notes for all of the telegram bot projects in <a href="../../python/tgbot">here</a></p><h3 id="CommandHandler-–-start"><a href="#CommandHandler-–-start" class="headerlink" title="CommandHandler – /start"></a>CommandHandler – <code>/start</code></h3><p><img src="/images/mensaar/mensaar_bot.png"></p><p>The basic way to call a bot is to send a command. Commands are defined by <code>CommandHandler</code>, which we can implement each commands’ functionalites respectively. To make our bot send message to users, we can use <code>update.message.reply_text</code>.</p><figure class="highlight python"><figcaption><span>bot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> telegram <span class="hljs-keyword">import</span> Update<br><span class="hljs-keyword">from</span> telegram.ext <span class="hljs-keyword">import</span> ApplicationBuilder, CommandHandler<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    <span class="hljs-keyword">await</span> update.message.reply_text(<br><span class="hljs-string">&quot;&quot;&quot;🦉 Hoot Hoot❗ Guess we have another mortal here❗</span><br><span class="hljs-string">If you have NO soul        --&gt; /owl</span><br><span class="hljs-string">If you have NO food &amp; soul --&gt; /menu</span><br><span class="hljs-string">If you HAVE a soul --&gt; @Mensaar_Bot And start talking&quot;&quot;&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    app = ApplicationBuilder().token(os.getenv(<span class="hljs-string">&quot;TOKEN&quot;</span>)).build()<br>    app.add_handler(CommandHandler(<span class="hljs-string">&quot;start&quot;</span>, start))<br>    app.run_polling()<br></code></pre></td></tr></table></figure><h3 id="InlineKeyboardMarkup-–-Buttons-for-actions"><a href="#InlineKeyboardMarkup-–-Buttons-for-actions" class="headerlink" title="InlineKeyboardMarkup – Buttons for actions"></a>InlineKeyboardMarkup – Buttons for actions</h3><p><img src="/images/mensaar/mensaar_inlinekeyboard.png"></p><p>Sometimes, users may need further options to finish the command, here we used <code>InlineKeyboardMarkup</code> to create possible options. There is another option <code>ReplyKeyboardMarkup</code> that can create buttons by replacing your phone keyboard, but from user feedbacks we noticed that it may be annoying for group usage.</p><figure class="highlight python"><figcaption><span>bot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> telegram <span class="hljs-keyword">import</span> Update, InlineKeyboardButton, InlineKeyboardMarkup<br><span class="hljs-keyword">from</span> telegram.ext <span class="hljs-keyword">import</span> ApplicationBuilder, CommandHandler<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">panel</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    <span class="hljs-comment"># clean keyboard just in case</span><br>    <span class="hljs-comment"># await update.message.reply_text(&quot;Remove unwanted reply keyboard hoot hoot...&quot;, reply_markup=ReplyKeyboardRemove())  # zero-width space</span><br><br>    keyboard = [<br>        [InlineKeyboardButton(<span class="hljs-string">&quot;Button A&quot;</span>, callback_data=<span class="hljs-string">&quot;Text A&quot;</span>)],<br>        [InlineKeyboardButton(<span class="hljs-string">&quot;Button B&quot;</span>, callback_data=<span class="hljs-string">&quot;Text B&quot;</span>)],<br>    ]<br>    reply_markup = InlineKeyboardMarkup(keyboard)<br>    <span class="hljs-keyword">await</span> update.message.reply_text(<br>        <span class="hljs-string">&quot;This is a panel&quot;</span>,<br>        reply_markup=reply_markup<br>    )<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    app = ApplicationBuilder().token(os.getenv(<span class="hljs-string">&quot;TOKEN&quot;</span>)).build()<br>    app.add_handler(CommandHandler(<span class="hljs-string">&quot;panel&quot;</span>, panel))<br>    app.run_polling()<br></code></pre></td></tr></table></figure><h3 id="CallbackQueryHandler-–-Handle-your-buttons-and-actions"><a href="#CallbackQueryHandler-–-Handle-your-buttons-and-actions" class="headerlink" title="CallbackQueryHandler – Handle your buttons and actions"></a>CallbackQueryHandler – Handle your buttons and actions</h3><p>When a button from <code>InlineKeyboardMarkup</code> is pressed, the data from <code>callback_data</code> attribute is then passed. We can capture it by using <code>CallbackQueryHandler</code>. Since we are using Query here, we need to use <code>query.edit_message_text</code>.</p><figure class="highlight python"><figcaption><span>bot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> telegram <span class="hljs-keyword">import</span> Update<br><span class="hljs-keyword">from</span> telegram.ext <span class="hljs-keyword">import</span> ApplicationBuilder, CommandHandler, CallbackQueryHandler<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_callback</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    query = update.callback_query<br>    <span class="hljs-keyword">await</span> query.answer()<br>    user_input = query.data<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;📥 Callback query received: <span class="hljs-subst">&#123;base64.b64decode(user_input)&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">match</span> user_input:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Text A&quot;</span>:  <span class="hljs-comment"># 📜 All Menu</span><br>            msg = <span class="hljs-string">&quot;This is option A&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Text B&quot;</span>:  <span class="hljs-comment"># 🍽️ UdS Menu</span><br>            msg = <span class="hljs-string">&quot;This is option B&quot;</span><br>        <span class="hljs-keyword">case</span> _:<br>            msg = <span class="hljs-string">&quot;Error&quot;</span><br><br>    <span class="hljs-keyword">await</span> query.edit_message_text(text=msg)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    app = ApplicationBuilder().token(os.getenv(<span class="hljs-string">&quot;TOKEN&quot;</span>)).build()<br>    app.add_handler(CallbackQueryHandler(handle_callback))  <span class="hljs-comment"># Now handling inline button clicks</span><br>    app.run_polling()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot Development Log (5) -- Explanations on bot sessions and requests</title>
      <link href="/projects/udsfahrplan-log5/"/>
      <url>/projects/udsfahrplan-log5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>Why session is needed when multiple command using similar workflow?</li><li>The details of HTTP request</li><li>Detailed explanations on the implementation of <strong><a href="https://t.me/udsfahrbot">udsfahrbot</a></strong></li></ul></blockquote><p>Previous post: <a href="../udsfahrplan-log4">UdS Fahrplan Bot Development Log (4) – Implementation on &#x2F;sethome and &#x2F;home function</a></p><h2 id="Brief-Walkthrough-on-Telegram-Bot-Cont"><a href="#Brief-Walkthrough-on-Telegram-Bot-Cont" class="headerlink" title="Brief Walkthrough on Telegram Bot (Cont.)"></a>Brief Walkthrough on Telegram Bot (Cont.)</h2><p>In the previous notes, we’ve already implemented all the commands we need! But there’s a question, why we need to format out query in <strong>f”{session}:{step}:{loc}”</strong>? Also, we haven’t talked about the function that connects to the SaarVV api.</p><p>We also have another study notes for all of the telegram bot projects in <a href="../../python/tgbot">here</a>, it gives you the basics on how to create your own bot and further descriptions on different functions and attributes on the package  <strong><a href="https://python-telegram-bot.org/">python-telegram-bot</a></strong>.</p><h2 id="HTTP-request-on-SaarVV"><a href="#HTTP-request-on-SaarVV" class="headerlink" title="HTTP request on SaarVV"></a>HTTP request on SaarVV</h2><p>In Application layer, if we send a GET request to the URL, it returns the HTML of the URL. For example:</p><figure class="highlight python"><figcaption><span>request.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">try</span>:<br>    res = requests.get(<span class="hljs-string">&quot;https://greenmeeple.github.io/&quot;</span>)<br>    <span class="hljs-built_in">print</span>(res.text)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Error fetching location matches: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>Then we are basically retriving the source code the website.</p><p><img src="/images/udsfahrplan/get.png"></p><h3 id="Extra-work-is-needed-to-perform-a-POST-request"><a href="#Extra-work-is-needed-to-perform-a-POST-request" class="headerlink" title="Extra work is needed to perform a POST request"></a>Extra work is needed to perform a POST request</h3><p>But if simply change the function from GET to POST, it won’t work:</p><p><img src="/images/udsfahrplan/post.png"></p><p>Instead of getting data, a POST requestis typically used for forms, APIs, or uploading data. So we can’t simply ping a website with POST request. For example, if you are sending POST request to a website, you should locate the form and include the correct information. And for API, you should have correct header, user agent, etc.</p><h3 id="How-can-I-construct-my-own-POST-request"><a href="#How-can-I-construct-my-own-POST-request" class="headerlink" title="How can I construct my own POST request?"></a>How can I construct my own POST request?</h3><p>TLDR: In <a href="https://github.com/public-transport/hafas-client/tree/main/p">hafas-client</a>, there’s a lot profiles used by various public transportation networks. However, some of them are deprecated so be careful to verify before you use.</p><p><img src="/images/udsfahrplan/hafas_profiles.png"></p><p>Here, we introduce another approach. We go to the Saarfahrplan website, and try to investigate how a POST request is constructed and sent.</p><p>$\text{Press F12}\Rightarrow\text{Network tab}\Rightarrow\text{Select filter}\textbf{Fetch&#x2F;XHR}$ We can then inspect the details of the request.</p><p>We can see the URL here is not a website, but ends with <code>.exe</code>, which indicates that is an API. Next, we specified the data type we are sending (JSON), and the user agent we are using (HAFAS). Another important attribute is the <code>&quot;auth&quot;: &#123;&quot;type&quot;: &quot;AID&quot;, &quot;aid&quot;: &quot;yCW9qZFSye1wIv3gCzm5r7d2kJ3LIF&quot;&#125;</code>, which are used by the api to verify the connection.</p><p><img src="/images/udsfahrplan/saarvv_post.png"></p><p>Select the request we want to inspect, and then we can see attibutes like <strong>Content-Encoding</strong> and <strong>Content-Type</strong>. Also, we can see the entire request payload, which will be useful for our template when constructing the POST request.</p><p><img src="/images/udsfahrplan/post_header.png"></p><p>Now back to our first development log, we talked about the following function:</p><figure class="highlight python"><figcaption><span>getTrip.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LocMatch</span>():<br>    url = <span class="hljs-string">&quot;https://www.saarfahrplan.de/bin/mgate.exe&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;HAFAS&quot;</span><br>    &#125;<br>    body = &#123;<br>        <span class="hljs-string">&quot;ver&quot;</span>: <span class="hljs-string">&quot;1.63&quot;</span>,<br>        <span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;en&quot;</span>,<br>        <span class="hljs-string">&quot;auth&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;AID&quot;</span>, <span class="hljs-string">&quot;aid&quot;</span>: <span class="hljs-string">&quot;yCW9qZFSye1wIv3gCzm5r7d2kJ3LIF&quot;</span>&#125;,<br>        <span class="hljs-string">&quot;client&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;ZPS-SAAR&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;WEB&quot;</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;webapp&quot;</span>,<br>            <span class="hljs-string">&quot;l&quot;</span>: <span class="hljs-string">&quot;vs_webapp&quot;</span>,<br>            <span class="hljs-string">&quot;v&quot;</span>: <span class="hljs-number">10004</span><br>        &#125;,<br>        <span class="hljs-string">&quot;formatted&quot;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&quot;svcReqL&quot;</span>: [&#123;<br>            <span class="hljs-string">&quot;meth&quot;</span>: <span class="hljs-string">&quot;LocMatch&quot;</span>,<br>            <span class="hljs-string">&quot;req&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;input&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>,<br>                    <span class="hljs-string">&quot;loc&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ALL&quot;</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: keyword,<br>                    &#125;,<br>                    <span class="hljs-string">&quot;maxLoc&quot;</span>: <span class="hljs-number">5</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1|3|&quot;</span><br>        &#125;]<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>:<br>        res = requests.post(url, headers=headers, data=json.dumps(body))<br>        data = res.json()<br>        <span class="hljs-keyword">return</span> data<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Error fetching location matches: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>Here, we basically visiting the API via Saarfahrplan by using its credentials and headers. On top of that we customized the attributes and methods so that we can fetch the customized data we want.</p><h2 id="Session-in-Telegram-Bot"><a href="#Session-in-Telegram-Bot" class="headerlink" title="Session in Telegram Bot"></a>Session in Telegram Bot</h2><p>Now back to our bot, since we implemented our commands seperately. They works fine when users execute them safely. However, we also need to be aware of unexpected usage. For example, what if our user started with the <code>/depart</code> command, but instead of finishing it, he&#x2F;she chooses to start another new <code>/trip</code> command at the same time? When a station is parsed to the <code>context.user_data</code>, which function should it send to? This is reason we need make sure the function is always passing data correctly.</p><figure class="highlight python"><figcaption><span>getDepart.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_depart_stations</span>(<span class="hljs-params">query, context, data</span>):<br>    trip_start = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;start&quot;</span>)<br>    home_start = context.user_data.get(<span class="hljs-string">&quot;home_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;start&quot;</span>)<br>    spawn_start = context.user_data.get(<span class="hljs-string">&quot;spawn_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;start&quot;</span>)<br><br>    context.user_data[<span class="hljs-string">&quot;depart_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>] = <span class="hljs-string">&quot;more&quot;</span><br><br>    <span class="hljs-keyword">if</span> spawn_start == <span class="hljs-string">&quot;more&quot;</span> <span class="hljs-keyword">or</span> trip_start == <span class="hljs-string">&quot;more&quot;</span> <span class="hljs-keyword">or</span> home_start == <span class="hljs-string">&quot;more&quot;</span>:<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;You had a previous session, resume the search?&quot;</span>,reply_markup=build_session_keyboard(<span class="hljs-string">&quot;depart&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">f&quot;Please Type your keyword to search the station&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_depart_session</span>(<span class="hljs-params">query, context, data</span>):<br>    <span class="hljs-keyword">if</span> data == <span class="hljs-string">&quot;resume&quot;</span>:<br>        context.user_data[<span class="hljs-string">&quot;depart_session&quot;</span>] = &#123;&#125;<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;Departure search terminated, resume the previous search.\n Please Type your keyword to search the station&quot;</span>)<br>    <span class="hljs-keyword">elif</span> data == <span class="hljs-string">&quot;continue&quot;</span>:<br>        context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>] = &#123;&#125;<br>        context.user_data[<span class="hljs-string">&quot;spawn_session&quot;</span>] = &#123;&#125;<br>        context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>] = &#123;&#125;<br>        context.user_data[<span class="hljs-string">&quot;depart_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>] = <span class="hljs-string">&quot;more&quot;</span><br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">f&quot;Previous search terminated, continue the departure search.\nPlease Type your keyword to search the station&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Methods/POST">POST - HTTP - MDN Web Docs - Mozilla</a></li><li><a href="https://github.com/public-transport/hafas-client">hafas-client</a></li><li><a href="https://int.bahn.de/en">Deutsche Bahn</a></li><li><a href="https://www.saarfahrplan.de/">SaarFahrplan</a></li><li><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></li><li><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAFAS Bitmask Calculator</title>
      <link href="/projects/hafas-bitmask-calculator/"/>
      <url>/projects/hafas-bitmask-calculator/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://greenmeeple.github.io/hafas-bitmask-calculator/">Web Demo</a></strong></p><p>This is a simple web-based tool to help you <strong>decode</strong> and <strong>encode</strong> bitmasks used by the <a href="https://de.wikipedia.org/wiki/HAFAS">HAFAS</a> (HaCon Fahrplan-Auskunfts-System) API.<br>It visually maps a decimal bitmask to the transport modes it represents and vice versa.</p><h2 id="🔍-What-is-HAFAS"><a href="#🔍-What-is-HAFAS" class="headerlink" title="🔍 What is HAFAS?"></a>🔍 What is HAFAS?</h2><p>HAFAS is a timetable and journey planning system widely used across European transport networks, including:</p><ul><li><a href="https://www.bahn.com/en">Deutsche Bahn (DB)</a></li><li><a href="https://saarvv.de/">SaarVV</a></li><li><a href="https://www.mobiliteit.lu/">Luxembourg Mobilitéit</a></li><li>Many other regional operators</li></ul><p>In HAFAS APIs, transport modes (ICE trains, buses, trams, ferries, etc.) are often encoded in a <strong>bitmask</strong> —<br>a single number where each bit (1, 2, 4, 8, …) represents a specific type of transport.</p><hr><h2 id="✨-Features"><a href="#✨-Features" class="headerlink" title="✨ Features"></a>✨ Features</h2><ul><li>🔢 Enter a number to <strong>decode</strong> it into selected transport modes</li><li>✅ Click transport icons to <strong>encode</strong> a bitmask value</li><li>🔄 Switch between different <strong>mode sets</strong> (DB, SaarVV, Luxembourg, HAFAS client spec)</li><li>⚠️ Input capped to valid 11-bit range (0–2047)</li><li>💡 Uses the official <a href="https://github.com/public-transport/hafas-client/blob/main/docs/writing-a-profile.md">hafas-client mode bitmask</a> as one profile</li></ul><hr><h2 id="🛠-Technology"><a href="#🛠-Technology" class="headerlink" title="🛠 Technology"></a>🛠 Technology</h2><ul><li>React + Vite</li><li>Plain CSS for styling</li><li>No external UI libraries</li><li>Fully static — can be deployed to GitHub Pages, Netlify, etc.</li></ul><hr><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><figure class="highlight bash"><figcaption><span>directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── assets        <span class="hljs-comment"># static scripts and assets for demo</span><br>├── index.html  <span class="hljs-comment"># demo entry</span><br>└── react   <span class="hljs-comment"># react source code</span><br></code></pre></td></tr></table></figure><hr><h2 id="Related-Projects"><a href="#Related-Projects" class="headerlink" title="Related Projects"></a>Related Projects</h2><p><a href="https://github.com/public-transport/hafas-client">hafas-client</a> – JavaScript client for HAFAS public transport APIs.<br><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu</a> – Real-Time tracking of bus lines across Luxembourg</p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hafas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot Development Log (4) -- Implementation on /sethome and /home function</title>
      <link href="/projects/udsfahrplan-log4/"/>
      <url>/projects/udsfahrplan-log4/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>How to build your own telegram bot</li><li>Detailed explanations on the implementation of <strong><a href="https://t.me/udsfahrbot">udsfahrbot</a></strong></li></ul></blockquote><p>Previous post: <a href="../udsfahrplan-log3">UdS Fahrplan Bot Development Log (3) – Implementation on &#x2F;trip and &#x2F;depart function</a></p><h2 id="Brief-Walkthrough-on-Telegram-Bot-Cont"><a href="#Brief-Walkthrough-on-Telegram-Bot-Cont" class="headerlink" title="Brief Walkthrough on Telegram Bot (Cont.)"></a>Brief Walkthrough on Telegram Bot (Cont.)</h2><p>In the previous notes, we’ve already implemented <code>/trip</code> and <code>/depart</code> based on <a href="../udsfahrplan-log1">this</a>. Now, let’s start explaining them one by one.</p><p>We also have another study notes for all of the telegram bot projects in <a href="../../python/tgbot">here</a>, it gives you the basics on how to create your own bot and further descriptions on different functions and attributes on the package  <strong><a href="https://python-telegram-bot.org/">python-telegram-bot</a></strong>.</p><h2 id="sethome-–-Storing-users’-starting-station"><a href="#sethome-–-Storing-users’-starting-station" class="headerlink" title="&#x2F;sethome – Storing users’ starting station"></a>&#x2F;sethome – Storing users’ starting station</h2><p>Similarly, our main function should have <code>app.add_handler(CommandHandler(&quot;sethome&quot;, spawn))</code> and <code>InlineKeyboardMarkup[]</code> ready, these components are defined in previous notes and they are reusable.</p><p>Next, our function has to be able to distinguish different users. Users who interact with the bot using <strong>command</strong> or <strong>tagged message</strong> will have their id stored in <code>message.from_user.id</code>; and <code>query.from_user.id</code> if users are interacting using <strong>buttons</strong>.</p><p>Then, we also need to create a database or storage file to read and write users’ stations. We decide the tool to use based on our use case and needs. Here, the data we need to store are <code>user_id</code>, <code>station_name</code>, and <code>station_id</code>. Which the columns are stable and small size. Therefore, it can be handled by a simple JSON file. Before we store the station, remember to check if the user already stored any station before to avoid creating duplicates.</p><figure class="highlight python"><figcaption><span>bot_spawn.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_spawn_start</span>(<span class="hljs-params">query, context, data</span>):<br>    station = locations[data] <span class="hljs-keyword">if</span> data <span class="hljs-keyword">in</span> locations <span class="hljs-keyword">else</span> data<br>    name = context.user_data.get(<span class="hljs-string">&quot;spawn_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_s&quot;</span>, &#123;&#125;).get(data, data)<br>    user_id = query.from_user.<span class="hljs-built_in">id</span><br><br>    <span class="hljs-keyword">if</span> os.path.exists(SPAWN_DATA):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SPAWN_DATA, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">try</span>:<br>                data_list = json.load(file)<br>            <span class="hljs-keyword">except</span> json.JSONDecodeError:<br>                data_list = []<br>    <span class="hljs-keyword">else</span>:<br>        data_list = []<br><br>    <span class="hljs-comment"># Check if user already exists</span><br>    user_found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-keyword">if</span> entry[<span class="hljs-string">&quot;user_id&quot;</span>] == user_id:<br>            entry[<span class="hljs-string">&quot;home_id&quot;</span>] = station<br>            entry[<span class="hljs-string">&quot;home_name&quot;</span>] = name<br>            user_found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_found:<br>        <span class="hljs-comment"># Add new user entry</span><br>        data_list.append(&#123;<span class="hljs-string">&quot;user_id&quot;</span>: user_id, <span class="hljs-string">&quot;home_id&quot;</span>: station, <span class="hljs-string">&quot;home_name&quot;</span>: name&#125;)<br><br>    <span class="hljs-comment"># Save updated data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SPAWN_DATA, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        json.dump(data_list, file, indent=<span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">await</span> query.edit_message_text(<br>        <span class="hljs-string">f&quot;✅ User <span class="hljs-subst">&#123;user_id&#125;</span>, your home is set to <span class="hljs-subst">&#123;name:&lt;<span class="hljs-number">20</span>&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">spawn</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    context.user_data[<span class="hljs-string">&quot;spawn_session&quot;</span>] = &#123;&#125;<br>    <span class="hljs-keyword">await</span> update.message.reply_text(<span class="hljs-string">f&quot;Hello User <span class="hljs-subst">&#123;update.message.from_user.<span class="hljs-built_in">id</span>&#125;</span>, Set your spawn point&quot;</span>,<br>        reply_markup=build_location_keyboard(<span class="hljs-string">&quot;spawn&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure><h2 id="home-–-A-quick-version-of-trip-for-frequent-repetitive-usage"><a href="#home-–-A-quick-version-of-trip-for-frequent-repetitive-usage" class="headerlink" title="&#x2F;home – A quick version of &#x2F;trip for frequent, repetitive usage"></a>&#x2F;home – A quick version of &#x2F;trip for frequent, repetitive usage</h2><p>Now we are gonna implement our <code>/home</code> command. We have all the components need from our previous work. All we need is to recombulate them and make sure we create a new type of session, <code>context.user_data[&quot;home_session&quot;]</code>. Basically, <code>/home</code> is <code>/trip</code> without setting the destination, but directly retrieve it from the database created by <code>/sethome</code>. Also, to enhance user experience, if a user call <code>/home</code> without setting any destination stations in prior, jump to the <code>/sethome</code> workflow before moving on.</p><figure class="highlight python"><figcaption><span>bot_home.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_home_start</span>(<span class="hljs-params">query, context, data</span>):<br>    start = locations[data] <span class="hljs-keyword">if</span> data <span class="hljs-keyword">in</span> locations <span class="hljs-keyword">else</span> data<br>    context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>] = context.user_data.get(<span class="hljs-string">&quot;home_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_s&quot;</span>, &#123;&#125;).get(data, data)<br><br>    user_id = query.from_user.<span class="hljs-built_in">id</span><br><br>    <span class="hljs-keyword">if</span> os.path.exists(SPAWN_DATA):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SPAWN_DATA, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">try</span>:<br>                data_list = json.load(file)<br>            <span class="hljs-keyword">except</span> json.JSONDecodeError:<br>                data_list = []<br>    <span class="hljs-keyword">else</span>:<br>        data_list = []<br><br>    <span class="hljs-comment"># Check if user already exists</span><br>    user_found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-keyword">if</span> entry[<span class="hljs-string">&quot;user_id&quot;</span>] == user_id:<br>            dest = entry[<span class="hljs-string">&quot;home_id&quot;</span>]<br>            context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>] = entry[<span class="hljs-string">&quot;home_name&quot;</span>]<br>            user_found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_found:<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">f&quot;Hello User <span class="hljs-subst">&#123;user_id&#125;</span>, You haven&#x27;t set your home station.&quot;</span>,<br>            reply_markup=build_location_keyboard(<span class="hljs-string">&quot;spawn&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>))<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">f&quot;🔍 Finding trips from <span class="hljs-subst">&#123;context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>]&#125;</span> to <span class="hljs-subst">&#123;context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>]&#125;</span>...&quot;</span>)<br>        context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;trip&quot;</span>] = get_trips(<span class="hljs-string">&quot;saarvv&quot;</span>, start, dest, <span class="hljs-number">0</span>)<br>        trip_basic=parse_trips_basic(context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;trip&quot;</span>], context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>], context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>])<br>        <br>        <span class="hljs-keyword">if</span> trip_basic <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            btn_retry = InlineKeyboardMarkup([[InlineKeyboardButton(<span class="hljs-string">&quot;again&quot;</span>, callback_data=<span class="hljs-string">&quot;home:details:again&quot;</span>)]])<br>            <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;❌ No trips found. Try again.&quot;</span>, reply_markup=btn_retry)<br>        <span class="hljs-keyword">else</span>:<br>            btn_details = InlineKeyboardMarkup([[InlineKeyboardButton(<span class="hljs-string">&quot;details&quot;</span>, callback_data=<span class="hljs-string">&quot;home:details:show&quot;</span>)]])<br>            <span class="hljs-keyword">await</span> query.edit_message_text(text=trip_basic, reply_markup=btn_details)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_home_details</span>(<span class="hljs-params">query, context, data</span>):<br>    <span class="hljs-keyword">if</span> data == <span class="hljs-string">&quot;again&quot;</span>:<br>        context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>].clear()<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;🚌 Where do you want to start your journey?&quot;</span>,<br>                                      reply_markup=build_location_keyboard(<span class="hljs-string">&quot;home&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        trip = context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>].get(<span class="hljs-string">&quot;trip&quot;</span>)<br>        context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>].clear()<br>        <span class="hljs-keyword">await</span> query.edit_message_text(text=parse_trips_detail(trip,context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>], context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>]))<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    context.user_data[<span class="hljs-string">&quot;home_session&quot;</span>] = &#123;&#125;<br>    user_id = update.message.from_user.<span class="hljs-built_in">id</span><br><br>    <span class="hljs-keyword">if</span> os.path.exists(SPAWN_DATA):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(SPAWN_DATA, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-keyword">try</span>:<br>                data_list = json.load(file)<br>            <span class="hljs-keyword">except</span> json.JSONDecodeError:<br>                data_list = []<br>    <span class="hljs-keyword">else</span>:<br>        data_list = []<br><br>    <span class="hljs-comment"># Check if user already exists</span><br>    user_found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-keyword">if</span> entry[<span class="hljs-string">&quot;user_id&quot;</span>] == user_id:<br>            user_found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_found:<br>        <span class="hljs-keyword">await</span> update.message.reply_text(<span class="hljs-string">f&quot;Hello User <span class="hljs-subst">&#123;user_id&#125;</span>, You haven&#x27;t set your home station.&quot;</span>,<br>            reply_markup=build_location_keyboard(<span class="hljs-string">&quot;spawn&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">await</span> update.message.reply_text(<span class="hljs-string">f&quot;Hello User <span class="hljs-subst">&#123;user_id&#125;</span>, Where are you right now?&quot;</span>,<br>            reply_markup=build_location_keyboard(<span class="hljs-string">&quot;home&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>))<br></code></pre></td></tr></table></figure><h2 id="Advanced-Database-Encryption"><a href="#Advanced-Database-Encryption" class="headerlink" title="Advanced: Database Encryption"></a>Advanced: Database Encryption</h2><p>As a Cybersecurity student, it seems to be a little be “sus” to simply use JSON… Currently our user base is within the people we know, which is totally fine becaue of trust. But if the user base has expanded beyond that, server side of the telegram bot can see everyone’s station, or more precisely, we can even know where a user live!</p><p>In general, there’s no way but trust in this situation, because evey function is implemented by the server&#x2F;provider (me) and we can always log the data because any operations. So even it is encrypted and no other users can check, the server holder can still retrieve at some point. Unless the data is already encrypted before sending (<a href="https://en.wikipedia.org/wiki/End-to-end_encryption">E2EE</a>).</p><p>Another way to guarantee the trust here, is that 1. The whole bot is opensource, and 2. A third party&#x2F;person has verify the running bot is indeed same as the code in the repository online.</p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>We talked about the methodology behind <code>/sethome</code> and <code>/home</code> and the security concern when deploying our product to a larger user base. However, there are some extra work we haven’t covered yet. For example, what are the <code>session</code> being useful in our design, what exactly are our HTTP request and where are they come from?</p><p>Continue Reading: <a href="../udsfahrplan-log5">UdS Fahrplan Bot Development Log (5) – Explanations on bot sessions and requests</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/public-transport/hafas-client">hafas-client</a></li><li><a href="https://int.bahn.de/en">Deutsche Bahn</a></li><li><a href="https://www.saarfahrplan.de/">SaarFahrplan</a></li><li><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></li><li><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot Development Log (3) -- Implementation on /trip and /Depart function</title>
      <link href="/projects/udsfahrplan-log3/"/>
      <url>/projects/udsfahrplan-log3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>How to build your own telegram bot</li><li>Detailed explanations on the implementation of <strong><a href="https://t.me/udsfahrbot">udsfahrbot</a></strong></li></ul></blockquote><p>Previous post: <a href="../udsfahrplan-log2">UdS Fahrplan Bot Development Log (2) – Planning for telegram bot</a></p><h2 id="Brief-Walkthrough-on-Telegram-Bot"><a href="#Brief-Walkthrough-on-Telegram-Bot" class="headerlink" title="Brief Walkthrough on Telegram Bot"></a>Brief Walkthrough on Telegram Bot</h2><p>In the previous notes, we’ve talked about our motivation and planned functions we wanted to implement. Now, let’s start explaining them one by one.</p><p>We also have another study notes for all of the telegram bot projects in <a href="../../python/tgbot">here</a>, it gives you the basics on how to create your own bot and further descriptions on different functions and attributes on the package  <strong><a href="https://python-telegram-bot.org/">python-telegram-bot</a></strong>.</p><h2 id="trip-–-A-basic-Station-A-to-Station-B-search"><a href="#trip-–-A-basic-Station-A-to-Station-B-search" class="headerlink" title="&#x2F;trip – A basic Station A to Station B search"></a>&#x2F;trip – A basic Station A to Station B search</h2><p>We start with the basic trip searching function just like the original app. We used <code>CommandHandler</code> to create the command, <code>InlineKeyboardMarkup</code> to create buttons for stations, <code>CallbackQueryHandler</code> to handle the button actions, and <code>update.message.reply_text</code> to send message back to the users.</p><figure class="highlight python"><figcaption><span>bot_trip.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_location_keyboard</span>(<span class="hljs-params">session, step, exclude=<span class="hljs-literal">None</span></span>):<br>    buttons = [<br>        [InlineKeyboardButton(text=loc, callback_data=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;session&#125;</span>:<span class="hljs-subst">&#123;step&#125;</span>:<span class="hljs-subst">&#123;loc&#125;</span>&quot;</span>)]<br>        <span class="hljs-keyword">for</span> loc <span class="hljs-keyword">in</span> keyboard_flat <span class="hljs-keyword">if</span> loc != exclude<br>    ]<br>    buttons += [[<br>        InlineKeyboardButton(text=<span class="hljs-string">&quot;More Stations&quot;</span>, <br>        callback_data=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;session&#125;</span>:more:<span class="hljs-subst">&#123;step&#125;</span>&quot;</span>)<br>    ]]<br>    <span class="hljs-keyword">if</span> exclude <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        buttons += [[<br>            InlineKeyboardButton(text=<span class="hljs-string">&quot;Back&quot;</span>, <br>            callback_data=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;session&#125;</span>:<span class="hljs-subst">&#123;step&#125;</span>:back&quot;</span>)<br>        ]]<br>    <span class="hljs-keyword">return</span> InlineKeyboardMarkup(buttons)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">trips</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>] = &#123;&#125;<br>    <br>    <span class="hljs-keyword">await</span> update.message.reply_text(<br>        <span class="hljs-string">&quot;🚌 Choose Your Starting Station.&quot;</span>,<br>        reply_markup=build_location_keyboard(<span class="hljs-string">&quot;trip&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure><h3 id="Buttons-for-stations-and-departure-time"><a href="#Buttons-for-stations-and-departure-time" class="headerlink" title="Buttons for stations and departure time"></a>Buttons for stations and departure time</h3><p>When the user called the command <code>/trip</code>, the bot will update the message into a list of buttons thanks to the <code>InlineKeyboardMarkup</code>, it passes a string of message with three components, seperated with colon. <strong>f”{session}:{step}:{loc}”</strong>, it will then pass into <code>handle_callback()</code> and used to indentify different command using <code>session</code>, then it identifies the current state using <code>steps</code> (since stations can be either start or destination), and eventually the station details in <code>loc</code> will be passed to next step.</p><p>At the same time, a dict that carry the data will be initialized in <code>context.user_data.setdefault(&quot;trip_session&quot;, &#123;&#125;)</code>, so that we can keep track on the data that are set by users and what is still required in order to construct the HTTP request.</p><figure class="highlight python"><figcaption><span>bot_main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> telegram.ext <span class="hljs-keyword">import</span> ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters<br><span class="hljs-keyword">from</span> util.bot_trip <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_callback</span>(<span class="hljs-params">update: Update, context: ContextTypes.DEFAULT_TYPE</span>):<br>    query = update.callback_query<br>    <span class="hljs-keyword">await</span> query.answer()<br><br>    <span class="hljs-keyword">try</span>:<br>        session, step, value = query.data.split(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(session, step, value)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;⚠️ Callback parse error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># Ensure session dicts</span><br>    context.user_data.setdefault(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;)<br><br>    <span class="hljs-keyword">if</span> session == <span class="hljs-string">&quot;trip&quot;</span>:<br>        <span class="hljs-keyword">match</span> step:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;start&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_start(query, context, value)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;more&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_stations(query, context, value)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;time&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_time(query, context, value)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dest&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_destination(query, context, value)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;details&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_details(query, context, value)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;session&quot;</span>:<br>                <span class="hljs-keyword">await</span> handle_trip_session(query, context, value)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = ApplicationBuilder().token(os.getenv(<span class="hljs-string">&quot;TOKEN&quot;</span>)).build()<br>    app.add_handler(CommandHandler(<span class="hljs-string">&quot;trip&quot;</span>, trips))<br>    app.add_handler(CallbackQueryHandler(handle_callback))<br>    app.run_polling()<br></code></pre></td></tr></table></figure><p>Once the start station is received, it will then go to <code>handle_trip_start()</code>, it stores the data in <code>context.user_data[&quot;trip_session&quot;][&quot;start&quot;]</code>, and update the bot message into time selection, defined by <code>build_time_keyboard()</code>.</p><figure class="highlight python"><figcaption><span>bot_trip.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_time_keyboard</span>(<span class="hljs-params">session</span>):<br>    buttons = [<br>        [InlineKeyboardButton(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;t&#125;</span> min&quot;</span> <span class="hljs-keyword">if</span> t <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;now&quot;</span>, callback_data=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;session&#125;</span>:time:<span class="hljs-subst">&#123;t&#125;</span>&quot;</span>)]<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> inline_time_options<br>    ]<br><br>    buttons += [[InlineKeyboardButton(text=<span class="hljs-string">&quot;Back&quot;</span>, callback_data=<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;session&#125;</span>:time:back&quot;</span>)]]<br>    <span class="hljs-keyword">return</span> InlineKeyboardMarkup(buttons)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_trip_start</span>(<span class="hljs-params">query, context, data</span>):<br>    context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>] = data<br>    name = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_s&quot;</span>, &#123;&#125;).get(data, data)<br>    <span class="hljs-keyword">await</span> query.edit_message_text(<br>        <span class="hljs-string">f&quot;✅ Starting station is set to <span class="hljs-subst">&#123;name:&lt;<span class="hljs-number">20</span>&#125;</span> \nChoose your departure time:&quot;</span>,<br>        reply_markup=build_time_keyboard(<span class="hljs-string">&quot;trip&quot;</span>)<br>    )<br></code></pre></td></tr></table></figure><p>For destination, it is basically same as starting station, except we changed <strong>f”{session}:start:{loc}”</strong> into <strong>f”{session}:dest:{loc}”</strong>. Afterwards, we called <code>get_trips()</code> to send our HTTP request, then used <code>parse_trips_basic()</code> and <code>parse_trips_detail()</code> to construct our replying message.</p><figure class="highlight python"><figcaption><span>bot_trip.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_trip_destination</span>(<span class="hljs-params">query, context, data</span>):<br><br>    <span class="hljs-keyword">if</span> data == <span class="hljs-string">&quot;back&quot;</span>:<br>        context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;time&quot;</span>] = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">await</span> query.edit_message_text(<br>            <span class="hljs-string">f&quot;✅ Starting station is set to <span class="hljs-subst">&#123;context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>]:&lt;<span class="hljs-number">20</span>&#125;</span> \nChoose your departure time:&quot;</span>,<br>            reply_markup=build_time_keyboard(<span class="hljs-string">&quot;trip&quot;</span>)<br>        )<br>    <span class="hljs-keyword">else</span>:<br>        context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>] = data<br>        start_name = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_s&quot;</span>, &#123;&#125;).get(data, context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>])<br>        dest_name = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_d&quot;</span>, &#123;&#125;).get(data, data)<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">f&quot;🔍 Finding trips from <span class="hljs-subst">&#123;start_name&#125;</span> to <span class="hljs-subst">&#123;dest_name&#125;</span>...&quot;</span>)<br><br>        context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;trip&quot;</span>] = get_trips(<span class="hljs-string">&quot;saarvv&quot;</span>, context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>], context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;dest&quot;</span>], context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;time&quot;</span>])<br>        <br>        trip_basic=parse_trips_basic(context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;trip&quot;</span>], start_name, dest_name)<br>        <br>        <span class="hljs-keyword">if</span> trip_basic <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            btn_retry = InlineKeyboardMarkup([[InlineKeyboardButton(<span class="hljs-string">&quot;again&quot;</span>, callback_data=<span class="hljs-string">&quot;trip:details:again&quot;</span>)]])<br>            <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;❌ No trips found. Try again.&quot;</span>, reply_markup=btn_retry)<br>        <span class="hljs-keyword">else</span>:<br>            btn_details = InlineKeyboardMarkup([[InlineKeyboardButton(<span class="hljs-string">&quot;details&quot;</span>, callback_data=<span class="hljs-string">&quot;trip:details:show&quot;</span>)]])<br>            <span class="hljs-keyword">await</span> query.edit_message_text(text=trip_basic, reply_markup=btn_details)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_trip_details</span>(<span class="hljs-params">query, context, data</span>):<br>    <span class="hljs-keyword">if</span> data == <span class="hljs-string">&quot;again&quot;</span>:<br>        context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>].clear()<br>        <span class="hljs-keyword">await</span> query.edit_message_text(<span class="hljs-string">&quot;🚌 Where do you want to start your journey?&quot;</span>,<br>                                      reply_markup=build_location_keyboard(<span class="hljs-string">&quot;trip&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        trip = context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>].get(<span class="hljs-string">&quot;trip&quot;</span>)<br>        start_name = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_s&quot;</span>, &#123;&#125;).get(data, context.user_data[<span class="hljs-string">&quot;trip_session&quot;</span>][<span class="hljs-string">&quot;start&quot;</span>])<br>        dest_name = context.user_data.get(<span class="hljs-string">&quot;trip_session&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;search_d&quot;</span>, &#123;&#125;).get(data, data)<br>        <span class="hljs-keyword">await</span> query.edit_message_text(text=parse_trips_detail(trip,start_name, dest_name))<br></code></pre></td></tr></table></figure><h2 id="Depart-–-Same-interface-different-request"><a href="#Depart-–-Same-interface-different-request" class="headerlink" title="&#x2F;Depart – Same interface, different request"></a>&#x2F;Depart – Same interface, different request</h2><p>There are two major difference between <code>/trip</code> and <code>/depart</code>:</p><ul><li>We don’t need destination</li><li>Different HTTP request method</li></ul><p>So we used the same interface for buttons and data handling, and used <code>get_departures()</code> and <code>parse_departures()</code> instead to fetch the results.</p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>Now, we finished the basic logic and interface for our telegram bot, and finished the setup on <code>/trip</code> and <code>/depart</code> command. In next note, we are gonna create more commands and functions on top of them.</p><p>Continue Reading: <a href="../udsfahrplan-log4">UdS Fahrplan Bot Development Log (4) – Implementation on &#x2F;sethome and &#x2F;home function</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/public-transport/hafas-client">hafas-client</a></li><li><a href="https://int.bahn.de/en">Deutsche Bahn</a></li><li><a href="https://www.saarfahrplan.de/">SaarFahrplan</a></li><li><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></li><li><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot Development Log (2) -- Planning for telegram bot</title>
      <link href="/projects/udsfahrplan-log2/"/>
      <url>/projects/udsfahrplan-log2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>The motivation of making my own telegram bot</li><li>Is <strong><a href="https://t.me/udsfahrbot">UdSfahrplan</a></strong> “Reinventing the wheel”?</li></ul></blockquote><h2 id="Saarfahrplan-v-s-Uni-Students"><a href="#Saarfahrplan-v-s-Uni-Students" class="headerlink" title="Saarfahrplan v.s. Uni Students"></a>Saarfahrplan v.s. Uni Students</h2><p>Previous post: <a href="../udsfahrplan-log1">UdS Fahrplan Bot Development Log (1) – Fetching data from HAFAS and its APIs through POST requests</a></p><p><a href="https://www.saarfahrplan.de/">SaarFahrplan</a> is a public transport app to provide real-time information and services related to public transportation in Saarland. Its target users are the people who live and travel in Saarland for general purpose. When it comes to a smaller group of users, for example Uni students, some functionalities might be redundant and we may optimized some common use case for better user experience.</p><h3 id="Common-use-cases-for-students"><a href="#Common-use-cases-for-students" class="headerlink" title="Common use cases for students"></a>Common use cases for students</h3><p>Instead of searching different connections, Uni students’ timetable are usually consistent and repetitive. There are a few places where they always go, for example:</p><ul><li>Go to the Uni</li><li>Go to the Mensa</li><li>Go to the Dormintory</li><li>Go to the City</li><li>Go to the Supermarket</li></ul><p>Another scenario will be when we are in somewhere new, we would like to know how to go back home (dormitory).</p><h2 id="Key-functions-on-our-telegram-bot"><a href="#Key-functions-on-our-telegram-bot" class="headerlink" title="Key functions on our telegram bot"></a>Key functions on our telegram bot</h2><p>Based on the above use case, So we create our own app&#x2F;bot that only accommodate them.</p><h3 id="Specified-set-of-stations"><a href="#Specified-set-of-stations" class="headerlink" title="Specified set of stations"></a>Specified set of stations</h3><p>We first made a set of stations that are commonly used by Uni students, that can be used without further search. On the other hand, we also provided a search function for other stations if needed.</p><p><img src="/images/udsfahrplan/stations.png"></p><h3 id="home-–-A-function-that-saves-your-time"><a href="#home-–-A-function-that-saves-your-time" class="headerlink" title="/home – A function that saves your time"></a><code>/home</code> – A function that saves your time</h3><p>Originally, if you want to search for a trip in Saarfahrplan, you need to:</p><ol><li>Go to the “Trip Planner” page</li><li>Type the starting location</li><li>Select the correct station in the pop up fragment</li><li>Back to the “Trip Planner” page</li><li>Type the destination</li><li>Select the correct station in the pop up fragment</li><li>Back to the “Trip Planner” page</li><li>Select Departure time in the pop up (optional)</li><li>Press “Search Button”</li></ol><p>This is somehow annoying if you already know which station you are planning to go. Therefore, we create the following flow:</p><ol><li>Use the <code>/home</code> command</li><li>Select the destination</li><li>Select Departure time</li></ol><p><img src="/images/udsfahrplan/home.png"></p><p>Since we’ve already made a set of stations, we can save lots of time from searching. Of course, if we are in a new place where the set is not included, we can:</p><ol><li>Use the <code>/home</code> command</li><li>Select the <code>More Stations</code></li><li>Type the station name</li><li>Select the correct station</li><li>Select Departure time</li></ol><p>All actions can be done in the same interface.</p><h3 id="sethome-–-One-time-setup-use-forever"><a href="#sethome-–-One-time-setup-use-forever" class="headerlink" title="&#x2F;sethome – One time setup, use forever"></a>&#x2F;sethome – One time setup, use forever</h3><p>As we can see, the major difference between our design and the app is that we don’t have to search or select our destination when using the command <code>/home</code>. This is because we already stored users’ home station beforehand.</p><p><img src="/images/udsfahrplan/sethome.png"></p><h2 id="Short-Summary"><a href="#Short-Summary" class="headerlink" title="Short Summary"></a>Short Summary</h2><p>Instead of repeating the whole workflow, we can first save the progress of some subtasks, and retrieve them in our daily workflow to save our time.</p><blockquote><p>$$\text{(Task A + Task B)}\times\text{repetitons}\Rightarrow\text{Task A + (Task B}\times\text{repetitons)}$$</p></blockquote><p>Continue Reading: <a href="../udsfahrplan-log3">UdS Fahrplan Bot Development Log (3) – Implementation on &#x2F;trip and &#x2F;Depart function</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/public-transport/hafas-client">hafas-client</a></li><li><a href="https://int.bahn.de/en">Deutsche Bahn</a></li><li><a href="https://www.saarfahrplan.de/">SaarFahrplan</a></li><li><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></li><li><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UdS Fahrplan Bot Development Log (1) -- Fetching data from HAFAS and its APIs through POST requests</title>
      <link href="/projects/udsfahrplan-log1/"/>
      <url>/projects/udsfahrplan-log1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>My personal study notes on HAFAS, a public transport management system used around europe</li></ul></blockquote><h2 id="What-is-HAFAS"><a href="#What-is-HAFAS" class="headerlink" title="What is HAFAS?"></a>What is HAFAS?</h2><blockquote><p>The HaCon Timetable Information System (HAFAS) is a software for timetable information from the company HaCon (Hannover Consulting). – <a href="https://de.wikipedia.org/wiki/HAFAS">Wikipedia</a></p></blockquote><p>Basically, the entire Germany, Luxembourg, and the surrounding countries&#x2F;regions use HAFAS to obtain depatures and stations details. This centralized software system can be visited using APIs. Different service providers may create their own HAFAS backend endpoint that exposes a public transport API over HTTP for customized usage. For example, you can send your HTTP requests to Deutsche Bahn (DB) if you have the access of their API, which can be found in <a href="https://developers.deutschebahn.com/db-api-marketplace/apis/">DB API Marketplace</a>.</p><p><img src="/images/udsfahrplan/db-api.png"></p><h2 id="What-can-we-do-with-HAFAS"><a href="#What-can-we-do-with-HAFAS" class="headerlink" title="What can we do with HAFAS?"></a>What can we do with HAFAS?</h2><p>There are four basic functions that the system has provided:</p><ul><li><code>TripSearch</code> – return connections from location A to location B</li><li><code>StationBoard</code> – return all arrivals and departures of a certain station</li><li><code>LocGeoPos</code> – return list of stations in a give range of area</li><li><code>LocMatch</code> – return list of stations based on the keyword given</li></ul><p>These includes most of the functionalities for users. For example, when we tried to plan our journey on DB navigator, the app uses <code>TripSearch</code> to show you connections; when we type the stations in the search box, the app <code>LocMatch</code> to give you related results.</p><p><img src="/images/udsfahrplan/db-nav.png"></p><h3 id="Methods-in-detail"><a href="#Methods-in-detail" class="headerlink" title="Methods in detail"></a>Methods in detail</h3><p>Since HAFAS is a enormous software system , there are a lot of attributes and setting provided to create a precise request. Here are some examples:</p><ul><li>departure time</li><li>arrival time</li><li>no. of trips&#x2F;stations returned</li><li>modes of transportations</li><li>transfer time</li><li>max. no. of transfer</li></ul><h2 id="How-to-perform-a-HTTP-request"><a href="#How-to-perform-a-HTTP-request" class="headerlink" title="How to perform a HTTP request"></a>How to perform a HTTP request</h2><p>A HTTP request can be done by <code>POST</code> or <code>GET</code> as usual. For different regions or transportation providers, they set up their own server (API endpoint) that restrict what data and their format to return. Therefore users will not be overwhelmed with unrelated results. For example, when you are searching for stations in Luxembourg using <a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a>, you may not want to see stations that share the same name, but are located in Berlin.</p><p>For each providers we need the corresponding profiles complete our request. Here is a python example to create a <code>LocMatch</code> request to SaarVV, the transportation provider in Saarland.</p><figure class="highlight python"><figcaption><span>getTrip.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LocMatch</span>():<br>    url = <span class="hljs-string">&quot;https://www.saarfahrplan.de/bin/mgate.exe&quot;</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip&quot;</span>,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;HAFAS&quot;</span><br>    &#125;<br>    body = &#123;<br>        <span class="hljs-string">&quot;ver&quot;</span>: <span class="hljs-string">&quot;1.63&quot;</span>,<br>        <span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;en&quot;</span>,<br>        <span class="hljs-string">&quot;auth&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;AID&quot;</span>, <span class="hljs-string">&quot;aid&quot;</span>: <span class="hljs-string">&quot;yCW9qZFSye1wIv3gCzm5r7d2kJ3LIF&quot;</span>&#125;,<br>        <span class="hljs-string">&quot;client&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;ZPS-SAAR&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;WEB&quot;</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;webapp&quot;</span>,<br>            <span class="hljs-string">&quot;l&quot;</span>: <span class="hljs-string">&quot;vs_webapp&quot;</span>,<br>            <span class="hljs-string">&quot;v&quot;</span>: <span class="hljs-number">10004</span><br>        &#125;,<br>        <span class="hljs-string">&quot;formatted&quot;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&quot;svcReqL&quot;</span>: [&#123;<br>            <span class="hljs-string">&quot;meth&quot;</span>: <span class="hljs-string">&quot;LocMatch&quot;</span>,<br>            <span class="hljs-string">&quot;req&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;input&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>,<br>                    <span class="hljs-string">&quot;loc&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ALL&quot;</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: keyword,<br>                    &#125;,<br>                    <span class="hljs-string">&quot;maxLoc&quot;</span>: <span class="hljs-number">5</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1|3|&quot;</span><br>        &#125;]<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>:<br>        res = requests.post(url, headers=headers, data=json.dumps(body))<br>        data = res.json()<br>        <span class="hljs-keyword">return</span> data<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Error fetching location matches: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>The whole request used a JSON format (<code>&quot;Content-Type&quot;: &quot;application/json&quot;</code>), and the most important fields we need to connect to the API gateway&#x2F;server-side application (<code>URL</code>) is a correct <code>header</code>, <code>auth</code> and <code>client</code>. With these we may establish the connection with the server and fetch the desired data.</p><p>Continue Reading: <a href="../udsfahrplan-log2">UdS Fahrplan Bot Development Log (2) – Planning for telegram bot</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/public-transport/hafas-client">hafas-client</a></li><li><a href="https://int.bahn.de/en">Deutsche Bahn</a></li><li><a href="https://www.saarfahrplan.de/">SaarFahrplan</a></li><li><a href="https://www.mobiliteit.lu/en/">Mobiliteit.lu</a></li><li><a href="https://github.com/Felix3qH4/Mobiliteit.lu">Mobiliteit.lu (Github Repo)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Telegram </tag>
            
            <tag> HAFAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Plugins and Personalization of this site</title>
      <link href="/site/personalize/"/>
      <url>/site/personalize/</url>
      
        <content type="html"><![CDATA[<p>Here are all the plugins and niche settings that personalize this blog and the <a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> theme.</p><h2 id="Remove-Uppercase-Details"><a href="#Remove-Uppercase-Details" class="headerlink" title="Remove Uppercase Details"></a>Remove Uppercase Details</h2><p>The Uppercase characters overflowed the page and affects the aesthetic.</p><p><img src="/images/site_notes/uppercase.png"></p><p>Find the css tag that contains the keyword <strong>Uppercase</strong> and remove it.</p><figure class="highlight javascript"><figcaption><span>article.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;page.<span class="hljs-property">layout</span> !== <span class="hljs-string">&#x27;page&#x27;</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;</span>&gt;</span>&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Better-Sans-Font"><a href="#Better-Sans-Font" class="headerlink" title="Better Sans Font"></a>Better Sans Font</h2><p>In <code>_config.icarus.yml</code>, find the following section <code>providers</code>:</p><figure class="highlight yml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">providers:</span><br>    <span class="hljs-comment"># Name or URL template of the JavaScript and/or stylesheet CDN provider</span><br>    <span class="hljs-attr">cdn:</span> <span class="hljs-string">jsdelivr</span><br>    <span class="hljs-comment"># Name or URL template of the webfont CDN provider</span><br>    <span class="hljs-attr">fontcdn:</span> <span class="hljs-string">https://fonts.googleapis.com/css2?family=Noto+Sans+HK:wght@100..900&amp;display=swap</span><br>    <span class="hljs-comment"># Name or URL of the fontawesome icon font CDN provider</span><br>    <span class="hljs-attr">iconcdn:</span> <span class="hljs-string">fontawesome</span><br></code></pre></td></tr></table></figure><p>Choose your favorite font in <a href="https://fonts.google.com/">Google Fonts</a>, and paste the url of the font to <code>fontcdn</code></p><p><img src="/images/site_notes/notosansHK.png"></p><h2 id="Atom-or-RSS-feed-–-hexo-generator-feed"><a href="#Atom-or-RSS-feed-–-hexo-generator-feed" class="headerlink" title="Atom or RSS feed – hexo-generator-feed"></a>Atom or RSS feed – <a href="https://github.com/hexojs/hexo-generator-feed"><code>hexo-generator-feed</code></a></h2><p>It is used for generating Atom 1.0 feed. <a href="https://greenmeeple.github.io/atom.xml">Check Here</a></p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-excerpt --save<br></code></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight yml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">hub:</span><br>  <span class="hljs-attr">content:</span><br>  <span class="hljs-attr">content_limit:</span> <span class="hljs-number">140</span><br>  <span class="hljs-attr">content_limit_delim:</span> <span class="hljs-string">&#x27; &#x27;</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">autodiscovery:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">template:</span><br></code></pre></td></tr></table></figure><h2 id="Automatic-excerpt-generator-–-hexo-excerpt"><a href="#Automatic-excerpt-generator-–-hexo-excerpt" class="headerlink" title="Automatic excerpt generator – hexo-excerpt"></a>Automatic excerpt generator – <a href="https://github.com/chekun/hexo-excerpt"><code>hexo-excerpt</code></a></h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-excerpt --save<br></code></pre></td></tr></table></figure><h3 id="Configuration-1"><a href="#Configuration-1" class="headerlink" title="Configuration"></a>Configuration</h3><figure class="highlight yml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">excerpt:</span><br>  <span class="hljs-attr">depth:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">excerpt_excludes:</span> []<br>  <span class="hljs-attr">more_excludes:</span> []<br>  <span class="hljs-attr">hideWholePostExcerpts:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SiteNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker Development Log (2) -- Web Developing and GitHub Workflow</title>
      <link href="/projects/mensaar-log2/"/>
      <url>/projects/mensaar-log2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>My personal experience when developing a web crawler using <a href="https://selenium-python.readthedocs.io/">Selenium</a></li><li>Explained with examples from my Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></li></ul></blockquote><h2 id="Fetching-Data-from-Web-Development"><a href="#Fetching-Data-from-Web-Development" class="headerlink" title="Fetching Data from Web Development"></a>Fetching Data from Web Development</h2><p>Previous post: <a href="../mensaarlog1">MensaarLecker Development Log (1) – Web Crawling</a></p><p>Continuing from last post, we have already implemented a script that collect the Mensa menu and stored it on Google Sheets. It is time to build our web interface to connect the database.</p><h3 id="Fetch-Data-from-Google-Sheets-using-Publish"><a href="#Fetch-Data-from-Google-Sheets-using-Publish" class="headerlink" title="Fetch Data from Google Sheets using Publish"></a>Fetch Data from Google Sheets using Publish</h3><p>First, we need to publish our spreadsheet so that it is public to fetch the data.</p><ol><li><p>In the Spreadsheet, click <strong>Share</strong> → Change access to Anyone with the link.</p><p> <img src="/images/mensaar/sheetshare.png"></p></li><li><p>Click <strong>File</strong> → <strong>Share</strong> → <strong>Publish</strong> to the web.</p></li><li><p>Select <strong>Entire Document</strong> → <strong>Comma-separated values (.csv)</strong> and click Publish.</p></li><li><p>Copy the public CSV link.</p></li></ol><figure class="highlight python"><figcaption><span>menu.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">SCRIPT_URL = &#123;PUBLISH_LINK&#125;<br><br><span class="hljs-comment"># Fetch JSON data</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_menu</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(SCRIPT_URL)<br>        response.raise_for_status()  <span class="hljs-comment"># Raise error if bad response</span><br>        <span class="hljs-keyword">return</span> response.json()<br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Error fetching menu: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p>However, the script return no data, why?</p><figure class="highlight go"><figcaption><span>caret.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">Access to fetch at <span class="hljs-string">&#x27;https://docs.google.com/spreadsheets/...&#x27;</span> from origin <span class="hljs-string">&#x27;null&#x27;</span> has been blocked <br>by CORS policy: No <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource. <br>If an opaque response serves your needs, set the request<span class="hljs-string">&#x27;s mode to &#x27;</span>no-cors<span class="hljs-string">&#x27; to fetch the resource with CORS disabled.</span><br></code></pre></td></tr></table></figure><h3 id="CORS-Policy-and-XSS"><a href="#CORS-Policy-and-XSS" class="headerlink" title="CORS Policy and XSS"></a>CORS Policy and XSS</h3><blockquote><p>Cross-origin resource sharing (CORS) is an extension of the same-origin policy. You need it for authorized resource sharing with external third parties. – Amazon Web Services</p></blockquote><p>This is a cyber security scheme to avoid <strong>XSS (Cross-site scripting)</strong>, in a nutshell, when we run the script, the code cannot proceed because it doesn’t login to any Google account! You can imagine the request is block by a imaginary login page and our program doesn’t know how to react.</p><h2 id="Second-Attempt-–-Google-Apps-Script"><a href="#Second-Attempt-–-Google-Apps-Script" class="headerlink" title="Second Attempt – Google Apps Script"></a>Second Attempt – Google Apps Script</h2><p>Google doesn’t allow users to fetch their data casually, except this is executed under Google’s server. This means we need to run our fetching function using Google’s service. <a href="https://developers.google.com/apps-script">Apps Script</a> provide a JavaScript editor to save your code.</p><p><img src="/images/mensaar/appscript.png"></p><figure class="highlight python"><figcaption><span>menu.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">function doGet() &#123;<br>  var sheet = SpreadsheetApp.openById(<span class="hljs-string">&quot;PUT_YOUR_SHEET_ID_HERE&quot;</span>).getActiveSheet();<br>  var data = sheet.getDataRange().getValues();<br><br>  var headers = data[<span class="hljs-number">0</span>];<br>  var jsonData = [];<br><br>  <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">1</span>; i &lt; data.length; i++) &#123;<br>    var row = &#123;&#125;;<br>    <span class="hljs-keyword">for</span> (var j = <span class="hljs-number">0</span>; j &lt; headers.length; j++) &#123;<br>      row[headers[j]] = data[i][j];<br>    &#125;<br>    jsonData.push(row);<br>  &#125;<br><br>  var output = ContentService.createTextOutput(JSON.stringify(jsonData));<br>  output.setMimeType(ContentService.MimeType.JSON);<br>  <span class="hljs-keyword">return</span> output;<br>&#125;<br></code></pre></td></tr></table></figure><p>To get the sheet ID, we can simply open the sheet and it is part of the URL:</p><p><img src="/images/mensaar/sheetid.png"></p><h3 id="Deploying-the-function-and-fetch-the-data"><a href="#Deploying-the-function-and-fetch-the-data" class="headerlink" title="Deploying the function and fetch the data"></a>Deploying the function and fetch the data</h3><p>Afterwards, we can deploy this function and it will generate a unique URL for the function output and we can fetch the data (here we export the data in json format) and use it in our code.</p><p><img src="/images/mensaar/deploy.png"></p><p>You can also double check the URL and make sure it does return the value correctly → <a href="https://script.google.com/macros/s/AKfycbzf5dQ0nWQBaxRV9B0AkFy5tdFIusaitiZdbTpEY1ZkvCGXG96cVXgbdZQf_LMeYsE/exec">link</a></p><figure class="highlight python"><figcaption><span>menu.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SCRIPT_URL = <span class="hljs-string">&quot;URL_DEPLOYED_FROM_APP_SCRIPT&quot;</span>;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_menu</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(SCRIPT_URL)<br>        response.raise_for_status()  <span class="hljs-comment"># Raise error if bad response</span><br>        <span class="hljs-keyword">return</span> response.json()<br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Error fetching menu: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><h2 id="Webpage-Implementation"><a href="#Webpage-Implementation" class="headerlink" title="Webpage Implementation"></a>Webpage Implementation</h2><p>To simplify our automation process on GitHub, we will continue implement our HTML code using Python. Our website should have two pages: <code>index.html</code> contains today’s menu, and <code>menu.html</code> contains the history of collected menus.</p><h3 id="Static-data-–-Tripe-Quotes"><a href="#Static-data-–-Tripe-Quotes" class="headerlink" title="Static data – Tripe Quotes"></a>Static data – Tripe Quotes</h3><p>We can put all the static code in strings. In Python we can store multi-line strings using <a href="https://www.geeksforgeeks.org/triple-quotes-in-python/">triple quotes</a>.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Mensaar Today<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">font-family</span>: Arial, sans-serif; <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;src/uds_spirit.jpg&#x27;</span>); &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>); </span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#003C71</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block; </span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; </span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>); </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>; <span class="hljs-attribute">margin</span>: auto; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.closed-message</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>; <span class="hljs-attribute">color</span>: red; <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff3f3</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.menu-card</span> &#123; <span class="hljs-attribute">background</span>: white; <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>); <span class="hljs-attribute">text-align</span>: left; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.meal-title</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">font-weight</span>: bold; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.meal-components</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.meal-frequency</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#888</span>; <span class="hljs-attribute">font-style</span>: italic; &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.button</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">20px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#007bff</span>; <span class="hljs-attribute">color</span>: white; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>; <span class="hljs-attribute">text-decoration</span>: none; &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Mensaar Menu for &#123;today&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;menu.html&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>📜 View Full Menu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Enhance-the-design-using-DataTable"><a href="#Enhance-the-design-using-DataTable" class="headerlink" title="Enhance the design using DataTable"></a>Enhance the design using <a href="https://datatables.net/">DataTable</a></h3><p>Since we will collect the menu everyday, the table in <code>menu.html</code> will become too long for loading and hard to check. We can use DataTable that provide basic table layout like filtering, searching, and sorting. Also, it is very easy to implement, simply include the JavaScript and CSS link in the HTML code and you can get the basic, but decent design.</p><h2 id="Automation-with-GitHub-Workflow"><a href="#Automation-with-GitHub-Workflow" class="headerlink" title="Automation with GitHub Workflow"></a>Automation with <a href="https://docs.github.com/en/actions/writing-workflows">GitHub Workflow</a></h2><p>Finally, after we deployed the code to GitHub, remember our original goal:</p><ol><li><p>Scrape the Mensa menu every weekday and store it to Google Sheets</p></li><li><p>Fetch the Data Collection from Google Sheets and update the website</p></li></ol><p>In fact, we can run the python script periodically using Github workflow, here are the steps:</p><ol><li><p>The workflow has to be implemented in <code>.yml</code> format, and stored in <code>.github/workflows/&#123;workflow_name&#125;.yml</code></p></li><li><p>Before running the python script, make sure python is set with all the dependencies installed:</p></li></ol><figure class="highlight yml"><figcaption><span>.github/workflows/menu.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">🛠</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Python</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-python@v4</span><br>    <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">python-version:</span> <span class="hljs-string">&quot;3.x&quot;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">📦</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        pip install requests selenium webdriver-manager gspread oauth2client</span><br><span class="hljs-string"></span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">🚀</span> <span class="hljs-string">Run</span> <span class="hljs-string">Mensaar</span> <span class="hljs-string">Scraper</span> <span class="hljs-string">(update</span> <span class="hljs-string">Google</span> <span class="hljs-string">Sheets)</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;🧪 Starting Mensaar_scraper...&quot;</span><br><span class="hljs-string">        python Mensaar_scraper.py</span><br><span class="hljs-string">        echo &quot;✅ Scraper completed.&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">🖼️</span> <span class="hljs-string">Run</span> <span class="hljs-string">HTML</span> <span class="hljs-string">Generator</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;🧪 Generating index.html &amp; menu.html&quot;</span><br><span class="hljs-string">        python generate_menu.py</span><br></code></pre></td></tr></table></figure><ol start="3"><li>For the full workflow, you can find the skeleton code template on GitHub or you can check <a href="https://github.com/GreenMeeple/MensaarLecker/blob/main/.github/workflows/update_menu.yml">here</a>.</li></ol><h2 id="A-random-summary"><a href="#A-random-summary" class="headerlink" title="A random summary"></a>A random summary</h2><p>With all these works, we managed to build our web crawler and a static website using only python. And Github workflow can help us with daily updates.</p><p>Continue Reading: <a href="../mensaarlog3">MensaarLecker Development Log (3) – Telegram Bot Deployment and Integration</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker Development Log (1) -- Web Crawling</title>
      <link href="/projects/mensaar-log1/"/>
      <url>/projects/mensaar-log1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>My personal experience when developing a web crawler using <a href="https://selenium-python.readthedocs.io/">Selenium</a></li><li>Explained with examples from my Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></li></ul></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Me and my friends <del>hate</del><strong>love</strong> the UdS Mensa so much! The infinite frozen food and french fries menus give us so much energy and motivation for the 5-hour afternoon coding marathon. However, no one actually knows how many potatoes they have exterminated throughout the week. We have a genius webpage created by some <a href="https://gibtesheuteschnitzel.de/">Schnitzel lover</a>. Personally, I like its minimalistic layout and determination on Schnitzel searching.</p><blockquote><p>However, we want more.</p></blockquote><p>It’s not just Schnitzel; we want to know everything about their menu. We want to know what’s inside the mensa ladies’ brains when they design next week’s menu.</p><blockquote><p>The desire never ends. We need more data, more details, more, More, <strong>MORE!</strong></p></blockquote><h2 id="Developing-Process"><a href="#Developing-Process" class="headerlink" title="Developing Process"></a>Developing Process</h2><p>Our Goal here is simple:</p><ol><li><p>Scrape the Mensa menu every weekday and store it to Google Sheets</p></li><li><p>Fetch the Data Collection from Google Sheets and update the website</p></li></ol><h2 id="Web-Scraping"><a href="#Web-Scraping" class="headerlink" title="Web Scraping"></a>Web Scraping</h2><p>To collect the data, we can use Python libraries to simplfied the process. But the basic idea it the same: we try to find the pattern of the HTML tag and locate the desired data.</p><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></h3><p>I started my journey with Beautiful Soup, one of the most popular Python web scraper packages. However, as a Uni that is well-known for its computer science program, all the menus are rendered using JavaScript. And beautiful can only scrape HTML and XML tags. So the scraper can only see an empty skeleton page:</p><p><img src="/images/mensaar/mensaar_empty.png"></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="https://selenium-python.readthedocs.io/">Selenium</a></h3><p>Basically, Selenium is a <a href="https://www.selenium.dev/documentation/webdriver/">Webdriver</a> that opens a browser naturally, like a human user. Then from there we can scrape the rendered information. Things get simpler once we can see the website as we see it on the browser. We just need to find the tag that contains the information we need and save it for storage.</p><h3 id="Desired-Data-and-Tags"><a href="#Desired-Data-and-Tags" class="headerlink" title="Desired Data and Tags"></a>Desired Data and Tags</h3><table><thead><tr><th align="left">Data</th><th align="left">Tag</th></tr></thead><tbody><tr><td align="left">menus</td><td align="left"><code>&lt;div class=&quot;counter&quot;&gt;</code></td></tr><tr><td align="left">date</td><td align="left"><code>&lt;div class=&quot;cursor-pointer active list-group-item&quot;&gt;</code></td></tr><tr><td align="left">main dish</td><td align="left"><code>&lt;span class=&quot;meal-title&quot;&gt;</code></td></tr><tr><td align="left">side dish</td><td align="left"><code>&lt;div class=&quot;component&quot;&gt;</code></td></tr></tbody></table><p>The first part of the task is to get the daily menu. We also get the date on the website to make the following work easier.</p><p>By the <code>find_element</code> and <code>find_elements</code> functions in Selenium, we can create a simple scraper like this:</p><figure class="highlight python"><figcaption><span>scraper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br>driver = webdriver.Firefox()<br>driver.get(<span class="hljs-string">&quot;https://mensaar.de/#/menu/sb&quot;</span>)<br>counters = driver.find_elements(By.CLASS_NAME, <span class="hljs-string">&quot;counter&quot;</span>)<br><br><span class="hljs-keyword">for</span> counter <span class="hljs-keyword">in</span> counters:<br>    meal_title = meal.find_element(By.CLASS_NAME, <span class="hljs-string">&quot;meal-title&quot;</span>).text.strip()<br></code></pre></td></tr></table></figure><p>However, on the webpage there is also a counter called <code>Wahlessen.</code> Which refers to a more pricy and unpredictable menu, and we want to exclude its data:</p><figure class="highlight python"><figcaption><span>scraper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">counter_title = counter.find_element(By.CLASS_NAME, <span class="hljs-string">&quot;counter-title&quot;</span>).text.strip()<br><br><span class="hljs-comment"># Filter for specified counter titles</span><br><span class="hljs-keyword">if</span> counter_title <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;Menü 1&quot;</span>, <span class="hljs-string">&quot;Menü 2&quot;</span>, <span class="hljs-string">&quot;Mensacafé&quot;</span>]:<br>    meal_title = meal.find_element(By.CLASS_NAME, <span class="hljs-string">&quot;meal-title&quot;</span>).text.strip()<br></code></pre></td></tr></table></figure><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>In order to make the database easy to be accessed by other users&#x2F;students, we decided to deploy the data set to Google SpreadSheets.</p><figure class="highlight python"><figcaption><span>scraper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(result, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Results saved to <span class="hljs-subst">&#123;output_file&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># Save the updated occurrence counts to the JSON file</span><br>count_result = &#123;<br>    <span class="hljs-string">&quot;meal_counts&quot;</span>: <span class="hljs-built_in">dict</span>(meal_count),<br>    <span class="hljs-string">&quot;component_counts&quot;</span>: <span class="hljs-built_in">dict</span>(component_count)<br>&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(count_file, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(count_result, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Counts saved to <span class="hljs-subst">&#123;count_file&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Change-the-time-format"><a href="#Change-the-time-format" class="headerlink" title="Change the time format"></a>Change the time format</h3><p>Once we fetch data, you may notice that the website display the date in german format e.g. “Freitag, 21. März 2025”, which is not recognized by Google Sheets directly. So we need to make a function to convert them before uploading:</p><figure class="highlight python"><figcaption><span>scraper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">GERMAN_MONTHS = &#123;<br>    <span class="hljs-string">&quot;Januar&quot;</span>: <span class="hljs-string">&quot;01&quot;</span>, <span class="hljs-string">&quot;Februar&quot;</span>: <span class="hljs-string">&quot;02&quot;</span>, <span class="hljs-string">&quot;März&quot;</span>: <span class="hljs-string">&quot;03&quot;</span>, <span class="hljs-string">&quot;April&quot;</span>: <span class="hljs-string">&quot;04&quot;</span>,<br>    <span class="hljs-string">&quot;Mai&quot;</span>: <span class="hljs-string">&quot;05&quot;</span>, <span class="hljs-string">&quot;Juni&quot;</span>: <span class="hljs-string">&quot;06&quot;</span>, <span class="hljs-string">&quot;Juli&quot;</span>: <span class="hljs-string">&quot;07&quot;</span>, <span class="hljs-string">&quot;August&quot;</span>: <span class="hljs-string">&quot;08&quot;</span>,<br>    <span class="hljs-string">&quot;September&quot;</span>: <span class="hljs-string">&quot;09&quot;</span>, <span class="hljs-string">&quot;Oktober&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;November&quot;</span>: <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;Dezember&quot;</span>: <span class="hljs-string">&quot;12&quot;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_date</span>(<span class="hljs-params">german_date</span>):<br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&quot;(\d&#123;1,2&#125;)\. (\w+) (\d&#123;4&#125;)&quot;</span>, german_date)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        day, month, year = <span class="hljs-keyword">match</span>.groups()<br>        month_number = GERMAN_MONTHS.get(month, <span class="hljs-string">&quot;00&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;year&#125;</span>-<span class="hljs-subst">&#123;month_number&#125;</span>-<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(day):02d&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0000-00-00&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Upload-the-data-to-Google-Sheets"><a href="#Upload-the-data-to-Google-Sheets" class="headerlink" title="Upload the data to Google Sheets"></a>Upload the data to Google Sheets</h2><p>In order to interact with the Google Sheets, we need to use Google API. First, go to <a href="https://console.cloud.google.com/">Google Cloud Console</a>.</p><p><img src="/images/mensaar/googleapi.png"></p><p>Create a new project. Next, go to <strong>API and Services</strong>, click <strong>Enable API and Services</strong></p><p><img src="/images/mensaar/apiservices.png"></p><p>Search <strong>Google Sheets API</strong>, select it and choose <strong>Enable</strong>。</p><p><img src="/images/mensaar/googlesheet.png"></p><p>Move <strong>Credentials</strong> from the sidebar, then choose <strong>Create credentials</strong> → <strong>Create service account</strong></p><p><img src="/images/mensaar/credentials.png"></p><p>In step 2, choose the role <strong>Editor</strong></p><p><img src="/images/mensaar/editor.png"></p><p>Now, when you come back to the <strong>Credentials</strong> page, you should see a newly generated email under <strong>Service Accounts</strong>, click it and select the tab <strong>Keys</strong></p><p><img src="/images/mensaar/key.png"></p><p>Select <strong>Create new key</strong>, choose <strong>JSON</strong> format, the file should start downloading automatically.</p><blockquote><p><strong><code>Important Notice</code></strong><br><code>This JSON file contains sensitive data, you should NEVER directly use it in your code, save it as an environment variable or save it as a secret on Github</code></p></blockquote><p><img src="/images/mensaar/secret.png"></p><p>With this key we can login the email we just created in <strong>Service Accounts</strong>, so that it is treated as a virtual users when running the script. Same as human users, in order to access the sheet we need to add this email as an editor in Google Sheets.</p><figure class="highlight python"><figcaption><span>scraper.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Read and validate credentials.json before using it</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;credentials.json&quot;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;❌ credentials.json not found!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;credentials.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        raw_creds = f.read()<br>        creds_data = json.loads(raw_creds)<br><br>    <span class="hljs-comment"># Save to a temp file just in case gspread needs it as a file</span><br>    temp_path = <span class="hljs-string">&quot;parsed_credentials.json&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(temp_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(creds_data, f)<br><br>    creds = ServiceAccountCredentials.from_json_keyfile_name(temp_path, scope)<br>    client = gspread.authorize(creds)<br>    sheet = client.<span class="hljs-built_in">open</span>(SHEET_NAME).sheet1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ Google Sheets Auth OK&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="End-of-Scraping"><a href="#End-of-Scraping" class="headerlink" title="End of Scraping"></a>End of Scraping</h2><p>Now we all set! Next, we need to display our collected results on web interfaces.</p><p>Continue Reading: <a href="../mensaarlog2">MensaarLecker Development Log (2) – Web Developing and GitHub Workflow</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appium commands that are commonly used on Mac</title>
      <link href="/appium/"/>
      <url>/appium/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong><br>Every details and attributes you may need for your first appium automation.</p></blockquote><p>In this example, we will use <a href="https://github.com/appium/appium-inspector">Appium Inspector</a> to start a seesion on your emulator on <a href="https://developer.android.com/studio">Android Studio</a>.</p><h2 id="Start-appium"><a href="#Start-appium" class="headerlink" title="Start appium"></a>Start appium</h2><p><img src="/images/appium/start.png"></p><p>First, start the connection with Appium by <code>cmd appium --allow-cors</code>. It also gives you the <code>remote url</code> and the <code>automationName</code> that can be used in the <a href="https://github.com/appium/appium-inspector">Appium Inspector</a></p><p><img src="/images/appium/inspector.png"></p><h2 id="Start-Session"><a href="#Start-Session" class="headerlink" title="Start Session"></a>Start Session</h2><ul><li><strong>deviceName</strong>:  <code>adb devices</code></li><li><strong>platformName</strong> - <code>appium driver list</code></li><li><strong>platformVersion</strong> -  <code>adb shell getprop ro.build.version.release</code></li></ul><p><img src="/images/appium/session.png"></p><p><img src="/images/appium/inspector2.png"></p><p>Now you can start a session in your emulator, but it always begins from the home page. To directly start a session on certain App, you also need to provide the  <code>appPackage</code> and the <code>appActivity</code>.</p><h2 id="Session-with-Apps"><a href="#Session-with-Apps" class="headerlink" title="Session with Apps"></a>Session with Apps</h2><p>If your app is downloaded from the PlayStore. It is possible that the apk file name&#x2F;path is hidden. However, you can You can simply open the app and check its name by <code>adb shell dumpsys window | grep mCurrentFocus</code>.</p><p>It returns the <code>appPackage</code> and the current <code>appActivity</code> of the App, which are both necessary for our seesion to start. However, sometimes the current activity may not be directly opened. Then we need to check all the possible activities this App contans and try them out.</p><p>To check the activity list, we can use <code>adb shell dumpsys package YOUR_APP_appPackage | grep -i activity</code>.</p><p><img src="/images/appium/activity.png"></p><p>Now, we can start our emulator, and run the command <code>adb shell am start -n YOUR_APP_appPackage/YOUR_APP_appActivity</code> to see whether it can start the App successfully. If it works we can use it in our inspector.</p><p><img src="/images/appium/cici.png"></p>]]></content>
      
      
      <categories>
          
          <category> Appium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium </tag>
            
            <tag> App Testing </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automata, Games, and Verification (Portal)</title>
      <link href="/notes/agv/"/>
      <url>/notes/agv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Chapter-1-Introduction"><a href="#Chapter-1-Introduction" class="headerlink" title="Chapter 1. Introduction"></a>Chapter 1. Introduction</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-1/">1.1. Model Checking</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-2/">1.2. Synthesis</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-3/">1.3. The Logic-Automata Connection</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-2-Buchi-Automata"><a href="#Chapter-2-Buchi-Automata" class="headerlink" title="Chapter 2. Büchi Automata"></a>Chapter 2. Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-1/">2.1. Preliminaries</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-2/">2.2. Automata over Infinite Words</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-3/">2.3. The Büchi Acceptance Condition</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-3-Buchi’s-Characterization-Theorem"><a href="#Chapter-3-Buchi’s-Characterization-Theorem" class="headerlink" title="Chapter 3. Büchi’s Characterization Theorem"></a>Chapter 3. Büchi’s Characterization Theorem</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-1/">3.1. Kleene’s Theorem</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-2/">3.2. $\omega$-regular language</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-3/">3.3 Closure Properties of the Büchi-recognizable languages (Intersection and Union)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-4/">3.4 Closure Properties of the Büchi-recognizable languages (Concatenations)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-5/">3.5 Büchi’s Characterization Theorem</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-4-Deterministic-Buchi-Automata"><a href="#Chapter-4-Deterministic-Buchi-Automata" class="headerlink" title="Chapter 4. Deterministic Büchi Automata"></a>Chapter 4. Deterministic Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv4-1/">4.1. Deterministic vs. Nondeterministic Büchi Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv4-2/">4.2. Complementation of deterministic Büchi Automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-5-Complementation-of-Buchi-automata"><a href="#Chapter-5-Complementation-of-Buchi-automata" class="headerlink" title="Chapter 5. Complementation of Büchi automata"></a>Chapter 5. Complementation of Büchi automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-1/">5.1. Infinite Directed Acyclic Graph (DAG)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-2/">5.2. Ranking of DAG</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-3/">5.3. Complement Büchi Automaton with Odd Ranking</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-6-Logics-over-Infinite-Sequences"><a href="#Chapter-6-Logics-over-Infinite-Sequences" class="headerlink" title="Chapter 6. Logics over Infinite Sequences"></a>Chapter 6. Logics over Infinite Sequences</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-1/">6.1. Linear-Time Temporal Logic (LTL)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-2/">6.2. Expressing Program Properties using LTL</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-3/">6.3. LTL and Counting Languages</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-4/">6.4. Quantified Propositional Temporal Logic (QPTL)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-5/">6.5. Monadic Second-Order Logic of One Successor (S1S)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-6/">6.6. Express QPTL using S1S</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-7/">6.7. S1S$_0$ and Büchi-recognizable LanguageBüchi-recognizable</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-7-Alternating-Buchi-Automata"><a href="#Chapter-7-Alternating-Buchi-Automata" class="headerlink" title="Chapter 7. Alternating Büchi Automata"></a>Chapter 7. Alternating Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-1/">7.1. Alternating Büchi Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-2/">7.2. From LTL to Alternating Büchi Automata</a></td><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-2/">$\varphi&#x3D;(\Diamond p)\ \mathcal{U}\ (\square q)$</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-3/">7.3. Translating Alternating to Nondeterministic automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-8-Linear-Arithmetic"><a href="#Chapter-8-Linear-Arithmetic" class="headerlink" title="Chapter 8. Linear Arithmetic"></a>Chapter 8. Linear Arithmetic</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-1/">8.1. Linear Arithmetic (Theory)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-2/">8.2 Encoding real numbers</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-3/">8.3 Translation from Linear Arithmetic to Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-4/">8.4 Homogenous Inequality Testing is Automatic</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-5/">8.5 From Linear Arithmetic to Automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-9-LTL-Model-Checking"><a href="#Chapter-9-LTL-Model-Checking" class="headerlink" title="Chapter 9. LTL Model Checking"></a>Chapter 9. LTL Model Checking</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-1/">9.1 Automata-based LTL Model Checking with Sequential Circuits</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-2/">9.2 Nested depth-first search</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-3/">9.3 The Emerson-Lei algorithm</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-10-McNaughton’s-Theorem"><a href="#Chapter-10-McNaughton’s-Theorem" class="headerlink" title="Chapter 10. McNaughton’s Theorem"></a>Chapter 10. McNaughton’s Theorem</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-1/">10.1 The Muller Acceptance Condition</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-2/">10.2 From Büchi automata to Muller automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-3/">10.3 Closure Properties of Muller Automata under Boolean Operations</a></td><td align="left"></td></tr></tbody></table><hr><p>Further Reading: <a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UdS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 (Portal 🚪)</title>
      <link href="/notes/sql50/"/>
      <url>/notes/sql50/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a portal for my walkthroughs of SQL 50 on Leetcode</p></blockquote><p><a href="https://leetcode.com/studyplan/top-sql-50/">Link of Leetcode SQL 50</a></p><table><thead><tr><th align="left">Select</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1757/">1757. Recyclable and Low Fat Products</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-584/">584. Find Customer Referee</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-595/">595. Big Countries</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1148/">1148. Article Views I</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1683/">1683. Invalid Tweets</a></td></tr></tbody></table><table><thead><tr><th align="left">Basic Joins</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1378/">1378. Replace Employee ID With The Unique Identifier</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1068/">1068. Product Sales Analysis I</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1581/">1581. Customer Who Visited but Did Not Make Any Transactions</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-197/">197. Rising Temperature</a></td></tr></tbody></table><table><thead><tr><th align="left">Advanced String Functions &#x2F; Regex &#x2F; Clause</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1667/">1667. Fix Names in a Table</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1683/">1527. Patients With a Condition</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-196/">196. Delete Duplicate Emails</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-176/">176. Second Highest Salary</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1484/">1484. Group Sold Products By The Date</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1327/">1327. List the Products Ordered in a Period</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1517/">1517. Find Users With Valid E-Mails</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-zhruby -- Implementing HTML Ruby tag in Hexo</title>
      <link href="/projects/hexo-zhruby/"/>
      <url>/projects/hexo-zhruby/</url>
      
        <content type="html"><![CDATA[<p>Implement the HTML tag <code>&lt;ruby&gt;</code> for Hexo using <a href="https://hexo.io/docs/tag-plugins">Tag Plugin</a> feature. Provide auto pronounciation indication for Jyutping (Cantonese), Zhuyin (Taiwanese Mandarin), and Pinyin (Chinese Mandarin), and the default setting for general usage. Support Traditonal and Simplified Chinese characters. </p><p>Inspired by the <a href="https://github.com/jamespan/hexo-ruby-character">hexo-ruby-character</a> by <a href="https://github.com/jamespan">jamespan</a>.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-zhruby --save<br></code></pre></td></tr></table></figure><h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h2><p>Ruby (ルビ) is also known as <a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a> (振り仮名).  It contains two basic use cases:</p><ol><li>To clarify or indicate the pronunciation for readers</li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun</a>, in which the characters have different pronunciations than they seem due to convention or for a specific context. For example, the pronunciation of 煙草 in Japanese is <em>tabako (tobacco)</em>.</li></ol><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p><strong>TLDR</strong>: Usage: <code>&#123;% tag rb|rt %&#125;</code>; Tag options: <code>ruby_def</code>, <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>.</p><hr><h3 id="For-the-1st-use-case-pronunciation-indication"><a href="#For-the-1st-use-case-pronunciation-indication" class="headerlink" title="For the 1st use case (pronunciation indication)"></a>For the 1st use case (pronunciation indication)</h3><p><code>ruby_def</code> allows any language, and the spacing in <code>rp</code> will expand evenly with respect to the word length in <code>rt</code>.</p><ul><li><code>&#123;% ruby_def 基本|きほん %&#125;</code> → <ruby>基本<rp>(</rp><rt>きほん</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 基本|기본 %&#125;</code> → <ruby>基本<rp>(</rp><rt>기본</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 基本|fundamental %&#125;</code> → <ruby>基本<rp>(</rp><rt>fundamental</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 基本|θεμελιώδες %&#125;</code> → <ruby>基本<rp>(</rp><rt>θεμελιώδες</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 基本|базовый %&#125;</code> → <ruby>基本<rp>(</rp><rt>базовый</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 基本|základní %&#125;</code> → <ruby>基本<rp>(</rp><rt>základní</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def fundamental|基本 %&#125;</code> → <ruby>fundamental<rp>(</rp><rt>基本</rt><rp>)</rp></ruby></li></ul><p><code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code> refers to <strong>Jyutping</strong>, <strong>Pinyin</strong>, <strong>Zhuyin</strong> respectively.</p><p>No need to enter the pronunciation manually in <code>rt</code>; the value will automatically be returned.</p><ul><li><code>&#123;% ruby_zy 基本 %&#125;</code> → <ruby>基本<rp>(</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_py 基本 %&#125;</code> → <ruby>基本<rp>(</rp><rt>jī běn</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_jy 基本 %&#125;</code> → <ruby>基本<rp>(</rp><rt>gei1 bun2</rt><rp>)</rp></ruby></li></ul><hr><h3 id="For-the-2nd-use-case-Gikun"><a href="#For-the-2nd-use-case-Gikun" class="headerlink" title="For the 2nd use case (Gikun)"></a>For the 2nd use case (Gikun)</h3><p>Same usage for <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_def special|basic %&#125;</code> → <ruby>special<rp>(</rp><rt>basic</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_def 特別|基本 %&#125;</code> → <ruby>特別<rp>(</rp><rt>基本</rt><rp>)</rp></ruby></li></ul><p>In <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>, you can also add <code>|rt</code> just like <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_zy 特別|special %&#125;</code> → <ruby>特別<rp>(</rp><rt>special</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_py 特別|special %&#125;</code> → <ruby>特別<rp>(</rp><rt>special</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_jy 特別|special %&#125;</code> → <ruby>特別<rp>(</rp><rt>special</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_zy 特別|基本 %&#125;</code> → <ruby>特別<rp>(</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_py 特別|基本 %&#125;</code> → <ruby>特別<rp>(</rp><rt>jī běn</rt><rp>)</rp></ruby></li><li><code>&#123;% ruby_jy 特別|基本 %&#125;</code> → <ruby>特別<rp>(</rp><rt>gei1 bun2</rt><rp>)</rp></ruby></li></ul><p>Notice that the <code>rt</code> output depends on the pronunciation in <code>rt,</code> but <strong>not</strong> <code>rp.</code> This feature is only available when <code>rt</code> is a <strong>Chinese Character</strong> in <a href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)">CJK Unified Ideographs</a> (\U4E00-\U9FFF).</p><p>If the input of <code>rt</code> is not in CJK Unified Ideographs, it is considered as <code>ruby_def</code>.</p><h2 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h2><p>The Chinese language contains a lot of <strong>Homophones</strong>, which can be resolved by context most of the time. However, for long sentences (&gt;&#x3D; 15 characters), or very specific names and terms, the auto-generation from 1st use case may not be very sensitive.</p><p>Please use <code>ruby_def</code> if it happens or contribute to this project by providing a more sensitive or advanced Chinese vocabulary library.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/CJK_characters">CJK Unified Ideographs (Unicode block)</a></li><li><a href="https://en.wikipedia.org/wiki/Homophone">Homophone</a></li><li><a href="https://en.wiktionary.org/wiki/%E7%BE%A9%E8%A8%93#Japanese">Gikun (japanese only)</a></li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun (English version under the article Kanji)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby">&lt;ruby&gt;: The Ruby Annotation element</a></li><li><a href="https://en.wikibooks.org/wiki/Unicode/Character_reference">Unicode&#x2F;Character reference</a></li><li><a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters">Universal Character Set characters (Unicode)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
            <tag> HTML </tag>
            
            <tag> Cantonese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Tag Plugin (2) -- Create and publish your own Hexo Tag Plugin</title>
      <link href="/js/hexo-tagplugin-2/"/>
      <url>/js/hexo-tagplugin-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>How to use your own Tag Plugin in local environment?</li><li>How to publish your Tag Plugin to npm and hexo?</li></ul></blockquote><p>For explaination on <code>Tag Plugin</code> and <code>Scripts</code> in Hexo, see the previous post<br><a href="../hexo-tagplugin-1">Hexo Tag Plugin (1) – Use ‘Hexo Scripts’ to create your own Tag Plugin</a>.</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><blockquote><p>Be Careful! Don’t mix <code>Plugin</code>, <code>Tag</code>, and <code>Tag Plugin</code> in Hexo, even though they look extremely similar.</p></blockquote><p>Usually, <code>Plugin</code> are for complicated functions. Yet if you want to publish your custom <code>Tag Plugin</code> to the NPM registry or even shown on the Hexo Community Page, <code>Plugin</code> would be a very good choice.</p><h3 id="From-Script-to-Plugin"><a href="#From-Script-to-Plugin" class="headerlink" title="From Script to Plugin"></a>From Script to Plugin</h3><p>Assume you already have a script call <code>index.js</code>, and you want to turn it into package, you may do the following:</p><ol><li><p>Navigate <code>node_modules</code> folder in your project folder. This is the folder where Hexo stored all the packages for your blog. Create a folder inside and the name must begin with <code>hexo-</code> or Hexo will ignore it.</p></li><li><p>Your folder must contain at least two files: the actual JavaScript code and <code>package.json</code> file that describes the purpose of the plugin and sets its dependencies.</p></li></ol><figure class="highlight bash"><figcaption><span>directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── index.js<br>└── package.json<br></code></pre></td></tr></table></figure><ol start="3"><li>In <code>package.json</code>, it should at least have the <code>name</code>, <code>version</code> and <code>main</code> entries set.</li></ol><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-my-plugin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>In the root <code>package.json</code> of your hexo project, you also need to list your <code>plugin</code> as a <code>dependency</code>, for Hexo to detect and load it.<br> Please remember that if your package contain other dependencies, also install and list them for testing and dubugging.</li></ol><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-site&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo generate&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;clean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo deploy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo server&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.3.0&quot;</span><span class="hljs-punctuation">,</span><br>        ...<br>        <span class="hljs-attr">&quot;hexo-my-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;my-plugin-dependency1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;my-plugin-dependency2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>If you run command that check all the package after step 4, for exmaple <code>hexo clean</code>, it will check all the packages in <code>node_modules</code> and remove packages that are not publish on npm.</p></blockquote><h2 id="Publish-Plugin-to-npm"><a href="#Publish-Plugin-to-npm" class="headerlink" title="Publish Plugin to npm"></a>Publish Plugin to npm</h2><p>To publish your package on the NPM registry, don’t forget you have to setup your account on <a href="https://www.npmjs.com/">npm</a> first.</p><p>After creating the account, open your terminal and run <code>npm login</code> in the root of your package. </p><p>Enter your <code>username</code> and <code>password</code>, then you should see a message like this if login is successful,</p><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Logged in as &lt;your-username&gt; on https://registry.npmjs.org/.<br></code></pre></td></tr></table></figure><p>Once you logged-in, you may simply publish your folder with <code>npm publish</code> command.</p><h2 id="Publish-Plugin-to-Hexo"><a href="#Publish-Plugin-to-Hexo" class="headerlink" title="Publish Plugin to Hexo"></a>Publish Plugin to Hexo</h2><p>After publish your plugin package in npm, you can also publish it to Hexo official.</p><h3 id="Fork-and-Clone"><a href="#Fork-and-Clone" class="headerlink" title="Fork and Clone"></a>Fork and Clone</h3><p>First of all, <code>Fork</code> <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a> from Github</p><p><img src="/images/hexo_plugin/fork.png"></p><p>Then <code>Clone</code> the repository to your computer and install dependencies.</p><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/&lt;username&gt;/site.git<br>cd site<br>npm install<br></code></pre></td></tr></table></figure><h3 id="Add-your-Plugin-to-the-list"><a href="#Add-your-Plugin-to-the-list" class="headerlink" title="Add your Plugin to the list"></a>Add your Plugin to the list</h3><p>Create a new yaml file in <code>source/_data/plugins/</code>, use your plugin name as the file name</p><p>Edit <code>source/_data/plugins/&lt;your-plugin-name&gt;.yml</code> and add your plugin. For example:</p><p><img src="/images/hexo_plugin/plugin_yml.png"></p><h3 id="Push-the-branch"><a href="#Push-the-branch" class="headerlink" title="Push the branch"></a>Push the branch</h3><p>Create a pull request and describe the change. Hexo official create a nice form to make sure you have included everything needed.</p><p><img src="/images/hexo_plugin/pull_form.png"></p><p><img src="/images/hexo_plugin/pull_req.png"></p><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>You may check the progress on the pull requests history.<br>Once it is closed you can see your plugin on the Hexo Plugins Community.</p><p><img src="/images/hexo_plugin/pull_closed.png"></p><p><img src="/images/hexo_plugin/hexo_list.png"></p><h2 id="Example-work"><a href="#Example-work" class="headerlink" title="Example work"></a>Example work</h2><p>As you may see, I also made my Plugin “Hexo-zhruby” for Hexo and you can now see it on the community.<br>For more details and see how it works, you may check <a href="../hexo-zhruby/">here</a>.</p><hr><p>Further Reading:</p><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li><li><a href="https://docs.npmjs.com/cli/v8/commands/npm-publish">npm-publish</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Tag Plugin (1) -- Use &#39;Hexo Scripts&#39; to create your own Tag Plugin</title>
      <link href="/js/hexo-tagplugin-1/"/>
      <url>/js/hexo-tagplugin-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>This blog post is trying to tell you:</strong></p><ul><li>What is Hexo Tag and Hexo script?</li><li>How to implement your own Hexo Tag Plugin using Hexo Script?</li></ul></blockquote><p>To color your personal Hexo Blog with more features, scripts and plugins are your powerful tools to use. Below we are trying to create our own <code>tag plugin</code> for the Hexo blog.</p><h2 id="Tag-Plugin"><a href="#Tag-Plugin" class="headerlink" title="Tag Plugin"></a>Tag Plugin</h2><blockquote><p>Be careful! Tag plugins are different from <a href="https://hexo.io/docs/front-matter">post tags</a>.</p></blockquote><p>Tag plugins are special type of syntax that you may use in your Markdown file.</p><p>Hexo has already provided some default Tag plugins like <code>Block Quote</code> and <code>iframe</code>.</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>For example, the syntax of <code>iframe</code> tag is:</p><figure class="highlight markdown"><figcaption><span>video.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;[width]&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;[height]&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">&quot;lazy&quot;</span> <span class="hljs-attr">allowfullscreen</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>Let say I want to embed a video from me and my friends’ YouTube video:</p><figure class="highlight markdown"><figcaption><span>video.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;720&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;461&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">&quot;lazy&quot;</span> <span class="hljs-attr">allowfullscreen</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>And that’s how it looks like:</p><iframe src="https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z" width="720" height="461" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><p>Let say we want to create our own tag plugin, we can use the Hexo <code>script</code> function. Here’re the steps.</p><ol><li><p>Create a JavaScript file with function <code>hexo.extend.tag.register(&quot;tag_name&quot;, args)</code>. You may also put your own function inside so that the second argument can also be <code>function (args)&#123;&#125;</code></p><p> Here is an example of a function that create a tag named <code>youtube</code>, with embedding video function:</p></li></ol><figure class="highlight javascript"><figcaption><span>video.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">tag</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;youtube&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-keyword">var</span> id = args[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> (<br>        <span class="hljs-string">&#x27;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/&#x27;</span> +<br>        id +<br>        <span class="hljs-string">&#x27;&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span><br>    );<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="2"><li><p>Put your JavaScript files in the <code>scripts</code> folder. If your project folder is new, you may not be able to find it. This is because <code>scripts</code> folder is actually under the <code>Themes</code> folder.</p><p> You may check <a href="https://hexo.io/docs/themes">here</a> to see the structure of <code>themes</code> and create your own one. Or you may be simply find a template on the <a href="https://hexo.io/themes/">Hexo themes community</a> then put your <code>.js</code> file into the theme.</p></li><li><p>It is done! Hexo will load them during initialization and you may use them in your blog post designs.</p></li></ol><h3 id="Beyond-Scripts"><a href="#Beyond-Scripts" class="headerlink" title="Beyond Scripts"></a>Beyond Scripts</h3><p>If you are not satisfied with creating a local tag plugin, but a public one that will be seen by the community, you should consider using Hexo <code>plugin</code> function instead.</p><p>check <a href="../hexo-tagplugin-2">here</a> to continue the journey.</p><hr><p>Continue Reading: <a href="../hexo-tagplugin-2">Hexo Tag Plugin (2) – Create and publish your own Hexo Tag Plugin</a></p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/api/tag">Hexo Tag Api</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Railroad Diagram of version range operators</title>
      <link href="/js/json-dependencies-diagram/"/>
      <url>/js/json-dependencies-diagram/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a image version of the post <a href="../json-dependencies/">here</a></p></blockquote><p><a name="range-set"></a></p><p><strong>range-set:</strong><br><img src="/images/json_dep_diagram/range-set.png"></p><figure class="highlight go"><figcaption><span>range-set.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">range</span>-set   ::= <span class="hljs-keyword">range</span> ( logical-or <span class="hljs-keyword">range</span> )*<br></code></pre></td></tr></table></figure><p><strong>logical-or:</strong></p><p><img src="/images/json_dep_diagram/logical-or.png"></p><figure class="highlight go"><figcaption><span>logical-or.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">logical-or  ::= <span class="hljs-string">&#x27; &#x27;</span>* <span class="hljs-string">&#x27;||&#x27;</span> <span class="hljs-string">&#x27; &#x27;</span>*<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="range"></a></p><p><strong>range:</strong></p><p><img src="/images/json_dep_diagram/range.png"></p><figure class="highlight go"><figcaption><span>range.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">range</span>   ::= hyphen<br>           | simple ( <span class="hljs-string">&#x27; &#x27;</span> simple )*<br>           | <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="hyphen"></a></p><p><strong>hyphen:</strong></p><p><img src="/images/json_dep_diagram/hyphen.png"></p><figure class="highlight go"><figcaption><span>hyphen.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">hyphen   ::= partial <span class="hljs-string">&#x27; - &#x27;</span> partial<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#range">range</a></p><p><a name="simple"></a></p><p><strong>simple:</strong></p><p><img src="/images/json_dep_diagram/simple.png"></p><figure class="highlight go"><figcaption><span>simple.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">simple   ::= primitive<br>           | partial<br>           | tilde<br>           | caret<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#range">range</a></p><p><a name="primitive"></a></p><p><strong>primitive:</strong></p><p><img src="/images/json_dep_diagram/primitive.png"></p><figure class="highlight go"><figcaption><span>primitive.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">primitive   ::= ( <span class="hljs-string">&#x27;&lt;&#x27;</span> | <span class="hljs-string">&#x27;&gt;&#x27;</span> | <span class="hljs-string">&#x27;&gt;=&#x27;</span> | <span class="hljs-string">&#x27;&lt;=&#x27;</span> | <span class="hljs-string">&#x27;=&#x27;</span> ) partial<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#simple">simple</a></p><p><a name="partial"></a></p><p><strong>partial:</strong></p><p><img src="/images/json_dep_diagram/partial.png"></p><figure class="highlight go"><figcaption><span>partial.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">partial  ::= xr ( <span class="hljs-string">&#x27;.&#x27;</span> xr ( <span class="hljs-string">&#x27;.&#x27;</span> xr qualifier? )? )?<br></code></pre></td></tr></table></figure><p>referenced by:</p><ul><li><a href="#caret">caret</a></li><li><a href="#hyphen">hyphen</a></li><li><a href="#primitive">primitive</a></li><li><a href="#simple">simple</a></li><li><a href="#tilde">tilde</a></li></ul><p><a name="xr"></a></p><p><strong>xr:</strong></p><p><img src="/images/json_dep_diagram/xr.png"></p><figure class="highlight go"><figcaption><span>xr.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">xr    ::= <span class="hljs-string">&#x27;x&#x27;</span><br>        | <span class="hljs-string">&#x27;X&#x27;</span><br>        | <span class="hljs-string">&#x27;*&#x27;</span><br>        | nr<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#partial">partial</a></p><p><a name="nr"></a></p><p><strong>nr:</strong></p><p><img src="/images/json_dep_diagram/nr.png"></p><figure class="highlight go"><figcaption><span>nr.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">nr    ::= <span class="hljs-string">&#x27;0&#x27;</span><br>        | [<span class="hljs-string">&#x27;1&#x27;</span>-<span class="hljs-string">&#x27;9] [&#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-number">9</span>]*<br></code></pre></td></tr></table></figure><p>referenced by:</p><ul><li><a href="#part">part</a></li><li><a href="#xr">xr</a></li></ul><p><a name="tilde"></a></p><p><strong>tilde:</strong></p><p><img src="/images/json_dep_diagram/tilde.png"></p><figure class="highlight go"><figcaption><span>tilde.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">tilde    ::= <span class="hljs-string">&#x27;~&#x27;</span> partial<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#simple">simple</a></p><p><a name="caret"></a></p><p><strong>caret:</strong></p><p><img src="/images/json_dep_diagram/caret.png"></p><figure class="highlight go"><figcaption><span>caret.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">caret    ::= <span class="hljs-string">&#x27;^&#x27;</span> partial<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#simple">simple</a></p><p><a name="qualifier"></a></p><p><strong>qualifier:</strong></p><p><img src="/images/json_dep_diagram/qualifier.png"></p><figure class="highlight go"><figcaption><span>qualifier.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">qualifier   ::= ( <span class="hljs-string">&#x27;-&#x27;</span> pre )? ( <span class="hljs-string">&#x27;+&#x27;</span> build )?<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#partial">partial</a></p><p><a name="pre"></a></p><p><strong>pre:</strong></p><p><img src="/images/json_dep_diagram/pre.png"></p><figure class="highlight go"><figcaption><span>pre.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">pre     ::= parts<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="build"></a></p><p><strong>build:</strong></p><p><img src="/images/json_dep_diagram/build.png"></p><figure class="highlight go"><figcaption><span>build.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">build   ::= parts<br></code></pre></td></tr></table></figure><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="parts"></a></p><p><strong>parts:</strong></p><p><img src="/images/json_dep_diagram/parts.png"></p><figure class="highlight go"><figcaption><span>parts.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">parts   ::= part ( <span class="hljs-string">&#x27;.&#x27;</span> part )*<br></code></pre></td></tr></table></figure><p>referenced by:</p><ul><li><a href="#build">build</a></li><li><a href="#pre">pre</a></li></ul><p><a name="part"></a></p><p><strong>part:</strong></p><figure class="highlight go"><figcaption><span>part.ebnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">part    ::= nr | [<span class="hljs-number">-0</span><span class="hljs-number">-9</span>A-Za-z]+<br></code></pre></td></tr></table></figure><p><img src="/images/json_dep_diagram/part.png"></p><hr><p>generated by <a href="https://www.bottlecaps.de/rr/ui">RR - Railroad Diagram Generator</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Explaination of version range operators in package.json for package dependencies</title>
      <link href="/js/json-dependencies/"/>
      <url>/js/json-dependencies/</url>
      
        <content type="html"><![CDATA[<blockquote><p>To see the syntax and Railroad diagram version, goto <a href="../json-dependencies-diagram/">here</a></p></blockquote><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>Package dependecies are a tuple of <code>[major, minor, patch]</code> with numeric values.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;project name&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;description of the project&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;keyword 1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;keyword 2&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;package-1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~0.6.2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;package-2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;=2.6.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Version-Range-operator"><a href="#Version-Range-operator" class="headerlink" title="Version Range operator"></a>Version Range operator</h2><h3 id="Basic-Range"><a href="#Basic-Range" class="headerlink" title="Basic Range"></a>Basic Range</h3><p>For <code>x</code> in exmaple, see <strong>Advanced Range</strong> below.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left">package version must be exactly matched</td><td align="left"><code>1.0.0</code> :&#x3D; <code>=1.0.0</code><br>(They are equivalent)</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">package version must be less than indicated</td><td align="left"><code>&lt;2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>1.x.x</code></td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">package version must be less than or euqal to indicated</td><td align="left"><code>&lt;=2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>2.0.0</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">package version must be greater than indicated</td><td align="left"><code>&gt;2.0.0</code>:&#x3D; <br>version from <code>2.0.1</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">package version must be greater than or euqal to indicated</td><td align="left"><code>&gt;=2.0.0</code> <br>:&#x3D;version from <code>2.0.0</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>||</code></td><td align="left">joined one or more operator</td><td align="left"><code>&gt;2.0.1 || &lt;1.7.3</code> <br>:&#x3D;version greater than <code>2.0.1</code> or less than <code>1.7.3</code></td></tr><tr><td align="left"><code>space</code></td><td align="left">Intersected one or more operator</td><td align="left"><code>&gt;=2.0.1  &lt;=1.7.3</code> <br>:&#x3D;version from <code>2.0.1</code> to <code>1.7.3</code> (inclusive)</td></tr></tbody></table><h3 id="Advanced-Range"><a href="#Advanced-Range" class="headerlink" title="Advanced Range"></a>Advanced Range</h3><p>Advanced ranges may be combined in the same way as primitive comparators using <code>space</code> or <code>||</code>.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>X</code>, <code>x</code>, <code>*</code></td><td align="left">A Wildcard may be used for any values in the <code>[major, minor, patch]</code> tuple (missing value are consider using Wildcard <code>x</code>)</td><td align="left"><code>*</code> :&#x3D; <code> </code><em>(empty string)</em> :&#x3D; <code>&gt;=0.0.0</code><br><code>1.x.x</code> :&#x3D; <code>1.x</code> :&#x3D; <code>1</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">Specifies an inclusive set of package version</td><td align="left"><code>1.2 - 2.3.4</code> :&#x3D; <code>&gt;=1.2.0 &lt;=2.3.4</code> <br>(missing pieces of first version are replaced with zeroes)<br><code>1.2.3 - 2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.4.x</code><br>(missing pieces of second version replace with <code>X-range</code>)</td></tr><tr><td align="left"><code>~</code></td><td align="left">Allows <code>patch</code> or <code>minor</code> level version changes, depends on specification</td><td align="left"><code>~1.2.3</code> :&#x3D; any version starts with <code>1.2</code> and greater than <code>1.2.3</code><br><code>~1.2</code> :&#x3D; any version starts with <code>1.2</code> (same as <code>1.2.x</code>)</td></tr><tr><td align="left"><code>^</code></td><td align="left">Allows version changes in the <code>[major, minor, patch]</code> tuple without modify the <strong>left-most non-zero</strong> element.</td><td align="left"><code>^1.2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.0.0</code><br>(minor update)<br><code>^0.2.3</code> :&#x3D; <code>&gt;=0.2.3 &lt;0.3.0</code> <br>(patch update)<br><code>^0.0.3</code> :&#x3D; <code>&gt;=0.0.3 &lt;0.0.4</code><br>(no updates)</td></tr></tbody></table><h2 id="Further-Explaination-on-Caret-Ranges"><a href="#Further-Explaination-on-Caret-Ranges" class="headerlink" title="Further Explaination on Caret Ranges ^"></a>Further Explaination on Caret Ranges <code>^</code></h2><h3 id="Special-interaction-with-Wildcard-operator-x"><a href="#Special-interaction-with-Wildcard-operator-x" class="headerlink" title="Special interaction with Wildcard operator x"></a>Special interaction with Wildcard operator <code>x</code></h3><p>When parsing caret ranges, minor and patch values with wildcard <code>x</code> desugars to the number <code>0</code> (missing values are consider as <code>x</code>):</p><p>Example:</p><ul><li><code>^1.2.x</code> :&#x3D; <code>&gt;=1.2.0 &lt;2.0.0-0</code> (equivalent to <code>^1.2.0</code>)</li><li><code>^1.x</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0-0</code> (equivalent to <code>^1.0.0</code>)</li></ul><p>However, when both <code>major</code> and <code>minor</code> versions are <code>0</code>, Caret range allow flexibility within wildcard <code>x</code>:</p><p>Example:</p><ul><li><code>^0.0.x</code> :&#x3D; <code>&gt;=0.0.0 &lt;0.1.0-0</code> (<strong>NOT</strong> equivalent to <code>^0.0.0</code>, but similar to <code>^0.1.0</code>)</li></ul><h3 id="Usage-and-Common-Practices"><a href="#Usage-and-Common-Practices" class="headerlink" title="Usage and Common Practices"></a>Usage and Common Practices</h3><p>Caret ranges usually ideally used when an author may make breaking changes. For example, between <code>0.2.4</code> and <code>0.3.0</code> releases, which is a common practice. </p><p>However, it presumes that there will not be breaking changes between <code>0.2.4</code> and <code>0.2.5</code>. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices.</p><hr><p>Further Reading: <a href="https://github.com/npm/node-semver#ranges">version range</a> in npm-semver, <a href="https://github.com/actions/setup-node#supported-version-syntax">setup-node</a> in GitHub Actions</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why you shouldn&#39;t deploy your Hexo webpage using GitHub Desktop?</title>
      <link href="/github-desktop/"/>
      <url>/github-desktop/</url>
      
        <content type="html"><![CDATA[<h2 id="Methods-to-Deploy-Hexo-to-GitHub-io"><a href="#Methods-to-Deploy-Hexo-to-GitHub-io" class="headerlink" title="Methods to Deploy Hexo to GitHub.io"></a>Methods to Deploy Hexo to GitHub.io</h2><p>Assume you’ve created a repository on GitHub called <code>&lt;username&gt;.github.io</code>. Here are two common method you can deploy you Hexo Blog:</p><h3 id="Hexo-Command"><a href="#Hexo-Command" class="headerlink" title="Hexo Command"></a>Hexo Command</h3><p>Hexo’s documentations and Tutorial has provided sufficient instructions on deploying your personal website on your GitHub repository.</p><p>According to the <a href="https://hexo.io/docs/github-pages">Hexo Tutorial</a>, we can deploy the repository by using <a href="https://docs.github.com/en/actions">GitHub Actions</a>.</p><ol><li>Create and Add the following contents to <code>.github/workflows/pages.yml</code>:</li></ol><figure class="highlight yml"><figcaption><span>.github/workflows/pages.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br><span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment"># default branch</span><br><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">token:</span> <span class="hljs-string">$</span><br>        <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">20</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span><br>        <span class="hljs-comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;&gt;=20&quot;</span> <br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$-npm-cache</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $-npm-cache</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">Pages</span> <span class="hljs-string">artifact</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-pages-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">./public</span><br><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">permissions:</span><br>    <span class="hljs-attr">pages:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">id-token:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">environment:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">github-pages</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">$</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deployment</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/deploy-pages@v4</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Install <code>hexo-deployer-git</code>.</li><li>Add&#x2F;Change the following configurations to <code>_config.yml</code>:</li></ol><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="hljs-comment"># for example, this blog is https://github.com/greenmeeple/greenmeeple.github.io</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><ol start="4"><li>After finishing your bog posts, Run <code>hexo clean &amp;&amp; hexo deploy</code>.</li></ol><h3 id="GitHub-Desktop"><a href="#GitHub-Desktop" class="headerlink" title="GitHub Desktop"></a>GitHub Desktop</h3><p>Many Users installed <a href="https://desktop.github.com/download/">GitHub Desktop</a> for better visualization on changes, so do I. It provides more intuitive push and commit procedure and instruction compared to terminal. Most of the time I use it to make sure no unexpected line changes or modification.</p><p><img src="/images/site_notes/github_desktop.png"></p><p>But soon I noticed that, every time after running <code>hexo clean &amp;&amp; hexo deploy</code>, GitHub Desktop will warn me that there’s something need to be pulled. When I pull it for merging it return <code>Unable to merge unrelated histories in repository</code>. Even in the image above, it shows that I should pull something. However, how would I need to pull if I’ve just push it?</p><h2 id="Security-Problem"><a href="#Security-Problem" class="headerlink" title="Security Problem"></a>Security Problem</h2><p>So I inspect my repository, these two method actually deploy <strong>completely different</strong> content to the repository, even though they output the identical content on the webpage.</p><p>When you deploy you webpage with Hexo command, it actually creates a folder <code>.deploy_git</code>, which is static HTML content without showing any configurations like your <code>themes</code> folder or <code>_config.yml</code> folder. In contrast, GitHub Desktop solely commit all folder that is not in <code>.gitignore</code> file and the website just rendered dynamically in the repository when someone visit.</p><p>This create a huge security problem as much as it seems. All contents in your config is now visible to everyone. Since Hexo is a simple framework that depends heavily on <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <code>.yml</code> files, there’s on where to hide all your settings and <code>&lt;script&gt;</code> if they just directly commit to your repository before building it statically. This may include not only your SEO and functionality of your webiste, but even some secret variable.</p><h3 id="GitTalk-comment-section-and-GitHub-OAUTH"><a href="#GitTalk-comment-section-and-GitHub-OAUTH" class="headerlink" title="GitTalk comment section and GitHub OAUTH"></a>GitTalk comment section and GitHub OAUTH</h3><p>For example, the comment section below every posts in this blog are powered by <a href="https://github.com/gitalk/gitalk">GitTalk</a>. It requires users to login through GitHub to comment. In order to handle the authorization of login, blog owners need to create an <a href="https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app">OAUTH App</a>. Then they need to input their <code>clientID</code> and <code>clientSecret</code> initiate the plugin. For Hexo file structure, this will usually be stored in <code>_config.yml</code>.</p><p>Therefore, if Blog Owner simply commit the whole folder using GitHub Desktop, their OAUTH App credentials are leaked to everyone. And this is how I start noticing the two deploy methods above are so different.</p><h2 id="Saving-your-sensitive-information-from-Data-Leak"><a href="#Saving-your-sensitive-information-from-Data-Leak" class="headerlink" title="Saving your sensitive information from Data Leak?"></a>Saving your sensitive information from Data Leak?</h2><p>As you may know, once you commit your issue on GitHub, it will leave a trace. This is because the version control nature of GitHub. But that also means everyone can always inspect your repositories’ history, even your newest version already removed your leaked data. Other than deleting your repository and start all over again, you may also cover and rewrite your commit history, and even rewrite the content by following <a href="./">this</a>.</p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Environment_variable">Environment variable</a>, <a href="https://stackoverflow.com/questions/44342276/how-to-push-code-to-github-hiding-the-api-keys">How to push code to Github hiding the API keys?</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathjax prime superscript problem in Hexo theme</title>
      <link href="/site/hexo-mathjax/"/>
      <url>/site/hexo-mathjax/</url>
      
        <content type="html"><![CDATA[<h2 id="Prime-superscript-problem-e-g-x’-i-in-Mathjax"><a href="#Prime-superscript-problem-e-g-x’-i-in-Mathjax" class="headerlink" title="Prime superscript problem (e.g. x’_i) in Mathjax"></a>Prime superscript problem (e.g. x’_i) in Mathjax</h2><p>When I was using <a href="https://www.mathjax.org/">Mathjax</a> to create math formula in my blog post, I typed<br><code>((q_1, q_2), a, (q&#39;_1, q&#39;_2)) \in S \times \Sigma_&#123;int&#125; \times S</code> and it rendered as</p><p><em><strong>$((q_1, q_2), a, (q’_1, q’<em>2)) \in S \times \Sigma</em>{int} \times S$</strong></em></p><p>However, when <code>((q_1, q_2), a, (q&#39;_1, q&#39;_2))</code> &amp; <code>\in S \times \Sigma_&#123;int&#125; \times S</code> are seperated, they rendered properly.</p><p>$$((q_1, q_2), a, (q’_1, q’_2))$$</p><p>$$\in S \times \Sigma_{int} \times S$$</p><blockquote><p>Maybe I should use <code>\left</code> and <code>\right</code> for (), just like <code>\lbrace</code> and <code>\rbrace</code> for {}?</p></blockquote><p>So I typed <code>\left( \left( q_1, q_2 \right), a, \left( q&#39;_1, q&#39;_2 \right) \right) \in S \times \Sigma_&#123;int&#125; \times S</code>, didn’t work out:</p><p><em><strong>$\left( \left( q_1, q_2 \right), a, \left( q’_1, q’<em>2 \right) \right) \in S \times \Sigma</em>{int} \times S$</strong></em></p><h2 id="Source-of-error"><a href="#Source-of-error" class="headerlink" title="Source of error"></a>Source of error</h2><blockquote><p>Problem definitely comes from the first half of the formula, since second half are all variables.</p></blockquote><p>Turns out there may be an issue with how the <strong>prime symbol</strong> are being handled.</p><p>For simple formula, <code>q&#39;_1</code> and <code>q_1&#39;</code> are considered the identical.<br>However, for more complicated formula, the only <code>q_1&#39;</code> can be rendered correctly:</p><p>$$((q_1, q_2), a, (q_1’, q_2’)) \in S \times \Sigma_{int} \times S$$</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>Afterwards, I found people reported <a href="https://physics.meta.stackexchange.com/questions/2614/a-prime-superscript-in-latex-mathjax-not-displayed-correctly">similar issue</a> before.</p><p>Two basic solutions:</p><ol><li><p>Stick to the format <code>x_&#123;Subscript&#125;^&#123;Superscript&#125;</code>, but for prime symbol <code>&#39;</code>, use it as <code>x_&#123;Subscript&#125;&#39;</code></p></li><li><p>Simply use <code>&#123;\prime&#125;</code> for every situation, e.g. <code>x_&#123;i&#125;^&#123;\prime&#125;</code>.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SiteNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Latex </tag>
            
            <tag> Mathjax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
