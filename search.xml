<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AGV 5.2 -- Ranking (DAG)</title>
      <link href="/agv5-2/"/>
      <url>/agv5-2/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv5-1/">Infinite Directed Acyclic Graph (DAG)</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Ranking"><a href="#Ranking" class="headerlink" title="Ranking"></a>Ranking</h2><p>last section, we have introduced the <strong>DAG</strong> and the <strong>pruning method</strong> to reason about the run of the word on a non-deterministic Büchi automaton. We know that pruning can be use to prove the <strong>non-acceptance</strong> of the word by automaton is we obtains an empty graph eventually.</p><p><img src="/../images/notes/uds/agv/5_1_g1.png"></p><p>In this section, we will introduce <strong>ranking</strong>, which can formalize our pruning construction.</p><blockquote><p>$\textbf{Definition 5.2. }\text{(Ranking). A }\textit{ranking}\text{ on a run DAG } G&#x3D;(V,E)\text{ is a function }f:V\rightarrow\newline\lbrace 0,\dots,2|Q|\rbrace\text{ such that:}$<br>$\begin{array}{l}\hspace{1cm} 1. \ \text{ If }q\in F\text{, then }f((q,i))\text{ is even for all }i.\newline\hspace{1cm} 2. \ \text{ If }(v,v’)\in E\text{, we have that }f(v’)\leq f(v).\end{array}\newline$<br>$\text{A ranking } f\text{ is }\textit{odd}\text{ if, for each even }j\text{, there is no infinite path in }G\text{ that consists only }\newline\text{of verticies }v\text{ such that }f(v)&#x3D;j.$</p></blockquote><p>By the above definition, we can see:</p><ol><li>All verticies that contains state q (the accepting state) are marked as even rank.</li><li>Verticies will never have lower rank than their successors.</li></ol><p>Most importantly, it introduced a new concept: <strong>Odd Ranking</strong>. Meaning that the run of the DAG is rejected.</p><p>Now, let’s consider the function $rank:V\rightarrow\lbrace 0,\dots,2|Q|\rbrace$, where</p><ul><li>$rank(q,i)&#x3D;2j$ iff $(q,i)$ is <strong>endangered</strong> in $G_{2j}$, and</li><li>$rank(q,i)&#x3D;2j+1$ iff $(q,i)$ is <strong>safe</strong> in $G_{2j+1}$.</li></ul><p><img src="/../images/notes/uds/agv/5_2_dag.png"></p><p>By tracking our pruning procedure, we can easily identify their rank now.<br>Blue verticies that remove in $G_1$ are <strong>safe</strong>, thus their rank are 1, and so as orange (2), green (3) and red (4).</p><h2 id="Odd-Ranking"><a href="#Odd-Ranking" class="headerlink" title="Odd Ranking"></a>Odd Ranking</h2><p>Now back to odd ranking, by our new function $rank$, we can prove the following lemma.</p><blockquote><p>$\textbf{Lemma 5.1. }\newline\text{A Büchi automaton }\mathcal{A}\text{ reject the word }\alpha\text{ iff the run DAG of }\mathcal{A}\text{ on }\alpha\text{ has an odd ranking}$</p></blockquote><h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h2><blockquote><p><strong>If the run DAG of $\mathcal{A}$ on $\alpha$ has an odd ranking, then $\alpha$ is rejected</strong></p></blockquote><p>By the definition above, we know that graph with odd ranking has <strong>no infinite path that settles on only even rank $f(v)&#x3D;j$</strong>. Which means:</p><ul><li>every run of $\mathcal{A}$ on $\alpha$ <strong>gets stuck</strong>, or,</li><li>eventually <strong>settles on vertices with a constant odd rank</strong>, since ranks are not increasing.</li></ul><p>In which case the run eventually only visits states that are not accepting.</p><blockquote><p><strong>If $\alpha$ is rejected, then the run DAG of $\mathcal{A}$ on $\alpha$ has an odd ranking</strong></p></blockquote><p>Since we know pruning leads to rejecting with function $rank$. Therefore, instead of using odd ranking directly, we try to show the function $rank$ is the odd ranking. To prove this, we need to show that:</p><ol><li>All vertices are indeed pruned away, latest by step $2|Q|$.</li><li>Accepting vertices must have an even rank</li><li>The rank cannot increase upon traversing an edge.</li><li>There is no infinite path that consists only of vertices of even rank.</li></ol><h3 id="Requirement-1-All-vertices-are-indeed-pruned-away-latest-by-step-2-Q"><a href="#Requirement-1-All-vertices-are-indeed-pruned-away-latest-by-step-2-Q" class="headerlink" title="Requirement 1: All vertices are indeed pruned away, latest by step $2|Q|$"></a>Requirement 1: All vertices are indeed pruned away, latest by step $2|Q|$</h3><p>Here, we define the <strong>width</strong> of a level $j$ in a graph $G_i$ as the number of vertices of the form $(q,j)$ in $G_i$.<br>(For the above example, $G_0$ has width &#x3D; 3 in level 3, 4, 5, …, while in $G_1$ it becomes 2)</p><p>We will now analyze the $j$-th iteration of the pruning, which begins with the graph $G_{2j}$.<br>Step $2j$ removes all <code>endangered</code> vertices from $G_{2j}$ to obtain $G_{2j+1}$. $G_{2j+1}$ either become empty, or still has infinitely many vertices (become vertices that not <code>endangered</code> have some infinite path)</p><p>If $G_{2j+1}$ has infinitely many vertices, then there must exist a <code>safe</code> vertex in $G_{2j+1}$. Otherwise each vertex is either accepting, or has a path to an accepting vertex. Since our run is not accepted, this is contradicting.</p><p>Consider a <code>safe</code> vertex $(q,m)$ in $G_{2j+1}$ which has the smallest $m$ (closest to the beginning). All descendants of this vertex in $G_{2j+1}$ are also safe. (see the blue verticies in the above example) These <code>safe</code> vertices will be pruned away in step $2j+1$.</p><p>Observe the affect towards the width after these deletions:</p><ul><li>At the beginning of iteration $0$, each level has width at most $|Q|$ (max. no. of states).</li><li>In every iteration $j$, the widths of all levels $i\geq m$ decrease by at least 1.<br>(because we at least removed one vertex in m, then all its descendants in $i\geq m$)</li></ul><p>This implies for some $m$ after $|Q|$ iterations, the width of all levels $i\geq m$ will decrease by $|Q|$, which becomes $0$.<br>Therefore, we know $G_{2|Q|}$ must be a finite graph, which means all vertices in $G_{2|Q|}$ are <code>endangered</code><br>($2|Q|$ because <code>safe</code> and <code>endangered</code> removal is alternating). Then in step $2|Q|$ will prune all vertices away.</p><h3 id="Requirement-2-Accepting-vertices-must-have-an-even-rank"><a href="#Requirement-2-Accepting-vertices-must-have-an-even-rank" class="headerlink" title="Requirement 2: Accepting vertices must have an even rank"></a>Requirement 2: Accepting vertices must have an even rank</h3><p>Accepting vertices cannot be pruned away as <code>safe</code>. Since all vertices of the run DAG are pruned away, they<br>must have been pruned away as <code>endangered</code>, and therefore get an even rank.</p><h3 id="Requirement-3-The-rank-cannot-increase-upon-traversing-an-edge"><a href="#Requirement-3-The-rank-cannot-increase-upon-traversing-an-edge" class="headerlink" title="Requirement 3: The rank cannot increase upon traversing an edge"></a>Requirement 3: The rank cannot increase upon traversing an edge</h3><p>Suppose there is a $(q’,i+1)$ that is pruned later than $(q,i)$. Consider the step $j$ at which $(q,i)$ is pruned. The graph $G_j$ would have contained both vertices, along with their edge.</p><p>If $j$ is even, it means that $(q,i)$ has even rank, and <code>endangered</code> in $G_j$ , and hence so must be its successor $(q’,i+1)$, meaning that it is pruned at step $j$.</p><p>If $j$ is odd, then $(q,i)$ was established to be <code>safe</code> in Gj , implying the safety of its successor too. In both cases, the pruning of $(q’,i+1)$ in the same step is inevitable.</p><h3 id="Requirement-4-There-is-no-infinite-path-of-only-even-ranked-vertices"><a href="#Requirement-4-There-is-no-infinite-path-of-only-even-ranked-vertices" class="headerlink" title="Requirement 4: There is no infinite path of only even-ranked vertices"></a>Requirement 4: There is no infinite path of only even-ranked vertices</h3><p>If such a path exists, since ranks do not increase along a path, and there are only finitely many ranks, this path will eventually consist only of vertices of rank $2j$.</p><p>However, only <code>endangered</code> verticies will have even rank in $G_{2j}$, and endangered vertices only have finite paths.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>With the above properties and proofs, we know that:</p><ul><li>the run DAG of $\mathcal{A}$ on $\alpha$ has an odd ranking &#x3D; $\alpha$ is rejected</li><li>Pruning method with $rank$ function &#x3D; odd ranking</li></ul><blockquote><p>So if a word is rejected, its run DAG always becomes an empty graph after pruning, and if a run DAG eventually becomes an empty graph after pruning, it must be rejected by $\mathcal{A}$.</p></blockquote><p>With these definition, we can now construct complementation of Büchi automaton $\mathcal{A}$ using the run DAG of $\mathcal{A}$ and the odd ranking. Let see how is it done in the next section.</p><hr><p>Next chapter: <a href="../agv5-3/">Complement Büchi Automaton with Odd Ranking</a></p><p>Further Reading: <a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 5.1 -- Infinite Directed Acyclic Graph (DAG)</title>
      <link href="/agv5-1/"/>
      <url>/agv5-1/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv4-2/">Complementation of deterministic Büchi Automata</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Reasoning-about-all-runs-of-an-automaton"><a href="#Reasoning-about-all-runs-of-an-automaton" class="headerlink" title="Reasoning about all runs of an automaton"></a>Reasoning about all runs of an automaton</h2><p>Since complementation inevitably introduce <strong>nondeterminism</strong>, we need to check whether <strong>all</strong> runs of the automaton on the word are <strong>rejecting</strong> to determine whether a word is in the complement of the language recognized by this Büchi automaton.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Consider the following nondeterministic Büchi automaton $\mathcal{A}$. Its language consists of all infinite words over $\lbrace a,b\rbrace$ with infinitely many <em>b</em>s, i.e., $(a^*b)^\omega$:</p><p><img src="/../images/notes/uds/agv/5_1_eg.png"></p><blockquote><p>$\textbf{Definition 5.1. }\text{Let }\mathcal{A}&#x3D;(\Sigma,Q,I,T,\small\text{BÜCHI} \normalsize (F))\text{ be a Büchi automaton. The run DAG of }\mathcal{A}\newline\text{on a word }\alpha\in\Sigma^\omega\text{ is the directed acylic graph }G&#x3D;(V,E)\text{, where}$<br>$\begin{array}{l}\hspace{1cm} \cdot \ V &#x3D; \cup_{i\geq0}(Q_i\times\lbrace i\rbrace)\text{ with }Q_0&#x3D;I\text{ and}\newline\hspace{1.1cm} \ Q_{i+1}&#x3D;\lbrace q’\mid(q,\alpha(i),q’)\in T\text{ for some }q\in Q\rbrace\newline\hspace{1cm} \cdot \ E&#x3D;\lbrace((q,i),(q’,i+1))\mid i\geq 0,(q,\alpha(i),q’)\in T\rbrace.\end{array}$<br>$\text{For a natural number }i\text{, we refer to the set }Q_i\text{ as the }\textit{level }i\text{ of the DAG.}$</p></blockquote><p>Using <strong>infinite directed acyclic graph (DAG)</strong> to represent the set of all runs on a particular word, e.g., $ababa^\omega$.</p><p><img src="/../images/notes/uds/agv/5_1_g1.png"></p><p>In the above example: the word $\alpha&#x3D;ababa^\omega$ has only two <em>b</em>‘s and hence must be rejected by $\mathcal{A}$.</p><p>Since the automaton is nondeterministic, a single word of $\mathcal{A}$ will have multiple runs on $\alpha$, represented by each <em>path in DAG</em>. The path is called accepting <strong>if and only if</strong> its corresponding run is accepting, i.e., the path visits $F\times\mathcal{A}$ infinitely often.</p><h2 id="Graph-Pruning"><a href="#Graph-Pruning" class="headerlink" title="Graph Pruning"></a>Graph Pruning</h2><p>To show the <strong>non-acceptance</strong> of $\alpha$ by $\mathcal{A}$, we can systematically identifying and pruning away vertices of the run DAG that only lead to rejecting paths until the graph is empty using the following definitions:</p><p><code>Endangered</code>: a vertex in a DAG is endangered if it has only <strong>finitely many descendants</strong>;</p><p><code>Safe</code>: a vertex in a DAG is safe if it is <strong>not in</strong> $F\times\mathcal{A}$ and <strong>none of its descendants</strong> are in $F\times\mathcal{A}$ either.</p><p>We start with a graph $G_0&#x3D;G$. Each iteration $j\geq 0$ of our pruning will consist of two steps:</p><ol><li>in step $2j$, the graph &#x3D; $G_{2j}$, remove all <code>endangered</code> vertices, graph after removal &#x3D; $G_{2j+1}$</li><li>in step $2j+1$, the graph &#x3D; $G_{2j+1}$, remove all <code>safe</code> vertices, graph after removal &#x3D; $G_{2j+2}$</li></ol><h3 id="Step-0-Remove-endangered-vertices"><a href="#Step-0-Remove-endangered-vertices" class="headerlink" title="Step 0: Remove endangered vertices"></a>Step 0: Remove <code>endangered</code> vertices</h3><ul><li>Input: $G_0$ ↑ (using example above), Output: $G_1$ ↓</li></ul><p>Since there’s no <code>endangered</code> verticies, $G_0$ &#x3D; $G_1$</p><p><img src="/../images/notes/uds/agv/5_1_g1.png"></p><h3 id="Step-1-Remove-safe-vertices-marked-as-blue"><a href="#Step-1-Remove-safe-vertices-marked-as-blue" class="headerlink" title="Step 1: Remove safe vertices (marked as blue)"></a>Step 1: Remove <code>safe</code> vertices (marked as blue)</h3><ul><li>Input: $G_1$ ↑, Output: $G_2$ ↓</li></ul><p>As we can see all vertices that in state r stay in r forever (accepting state is q). Therefore those path can never be accepted and they are safe.</p><p><img src="/../images/notes/uds/agv/5_1_g2.png"></p><h3 id="Step-2-Remove-endangered-vertices-marked-as-red"><a href="#Step-2-Remove-endangered-vertices-marked-as-red" class="headerlink" title="Step 2: Remove endangered vertices (marked as red)"></a>Step 2: Remove <code>endangered</code> vertices (marked as red)</h3><ul><li>Input: $G_2$ ↑, Output: $G_3$ ↓</li></ul><p>After <code>safe</code> verticies in r are removed, paths towards r from q become dead end. Therefore they are now <code>endangered</code>.</p><p><img src="/../images/notes/uds/agv/5_1_g3.png"></p><h3 id="Step-3-Remove-safe-vertices-marked-as-blue"><a href="#Step-3-Remove-safe-vertices-marked-as-blue" class="headerlink" title="Step 3: Remove safe vertices (marked as blue)"></a>Step 3: Remove <code>safe</code> vertices (marked as blue)</h3><ul><li>Input: $G_3$ ↑, Output: $G_4$ ↓</li></ul><p>Now all the vertices starting from (p,3) stay in p forever. Therefore they are <code>safe</code> as well.</p><p><img src="/../images/notes/uds/agv/5_1_g4.png"></p><h3 id="Step-4-Remove-endangered-vertices-marked-as-red"><a href="#Step-4-Remove-endangered-vertices-marked-as-red" class="headerlink" title="Step 4: Remove endangered vertices (marked as red)"></a>Step 4: Remove <code>endangered</code> vertices (marked as red)</h3><ul><li>Input: $G_4$ ↑, Output: $G_5$ ↓</li></ul><p>Now the graph is finite, meaning all the vertices in the graph are <code>endangered</code>.</p><p><img src="/../images/notes/uds/agv/5_1_g5.png"></p><p>Therefore, graph $G_5$ will be an empty graph, which means there’s no accepting path and thus the word $ababa^\omega$ is rejected.</p><h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h3><p>We start from removing <code>endangered</code> verticies in <strong>step 0</strong> because they can never infinitely reach the accepting states. Then we can remove all <code>Safe</code> verticies in <strong>step 1</strong> because they never visit accepting states anymore.</p><p>For the subsequent pruning, if a vertex v of the original run DAG is pruned away in step $2j$ because it is <code>endangered</code> in $G_{2j}$, it means that all paths from v in the original run DAG can reach were pruned away in the earlier steps.</p><p>Similarly, if a vertex v of the original run DAG is pruned away in step $2j+1$ because it is <code>safe</code> in $G_{2j+1}$, it means that v corresponds to a <strong>non-accepting state</strong>. And furthermore, all paths from v in the original run DAG either avoid accepting vertices, or eventually reach a vertex that was pruned away in the earlier steps.</p><p>So we can see that if a vertex is pruned away, all paths from that vertex are rejecting. Hence, if our scheme eventually obtains the empty graph, the pruning is a proof of the non-acceptance of the word by the automaton.</p><p>We formalize this type of reasoning as a <code>ranking</code>, which labels the vertices with numbers. We will define <code>ranking</code> in the next chapter. </p><hr><p>Next chapter: <a href="../agv5-2/">Ranking (DAG)</a></p><p>Further Reading: <a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 4.2 -- Complementation of deterministic Büchi Automata</title>
      <link href="/agv4-2/"/>
      <url>/agv4-2/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv4-1/">Deterministic Büchi Automata</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>For regular languages, Complementation is very simple: one translates a given complete deterministic automaton $\mathcal{A}$ that recognizes some language $L\subseteq\Sigma^*$ into an automaton $\mathcal{A’}$ that recognizes the complement $\Sigma^*\setminus L$ by complementing the set of final states, i.e., $F’&#x3D;Q\setminus F$.</p><p>For deterministic Büchi automata, the construction is tricky, because it introduces <strong>nondeterminism</strong></p><blockquote><p>$\textbf{Construction 4.1. }\text{Let }\mathcal{A}&#x3D;(\Sigma,Q,I,T,\small\text{BÜCHI} \normalsize (F))\text{ be a complete deterministic Büchi}\newline\text{automaton, where we assume w.l.o.g. that } Q\neq\emptyset. \text{ We construct a Büchi automaton}\newline\mathcal{A’}&#x3D;(\Sigma,Q’,I’,T’,\small\text{BÜCHI} \normalsize (F’))\text{ with }\mathcal{L}(\mathcal{A’})&#x3D;\Sigma^\omega\setminus\mathcal{L}(\mathcal{A})\text{ as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q’&#x3D;(Q\times\lbrace 0\rbrace)\cup((Q\setminus F)\times\lbrace 1\rbrace)\newline<br>\hspace{1cm} \cdot \ I’&#x3D;I\times\lbrace 0\rbrace\newline<br>\hspace{1cm} \cdot \ T’&#x3D;\lbrace ((q,0),\sigma,(q’,i))\mid(q,\sigma,q’)\in T,i\in\lbrace 0,1\rbrace,(q’,i)\in Q’\rbrace \cup \newline<br>\hspace{2.4cm} \ \lbrace ((q,1),\sigma,(q’,1))\mid(q,\sigma,q’)\in T,q’,q’\in Q\setminus F\rbrace\newline<br>\hspace{1cm} \cdot \ F’&#x3D;(Q\setminus F)\times\lbrace 1\rbrace\newline<br>\end{array}$</p></blockquote><h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h3><p>$Q’:$ Uses two copies of the given automaton $\mathcal{A}$, mark them seperately using $\lbrace 0\rbrace$ and $\lbrace 1\rbrace$, notice that all <strong>accpeting states</strong> from $\lbrace 1\rbrace$ are eliminated.</p><p>$I’:$ The complemented automaton starts from initial states from $\lbrace 0\rbrace$.</p><p>$T’:$ The switch from $\lbrace 0\rbrace$ and $\lbrace 1\rbrace$ happens nondeterministically. And once you enter the second copy $\lbrace 1\rbrace$, it stays forever.</p><p>$F’:$ The automaton $\mathcal{A’}$ accepts if the run ends up in the second copy, which means that, on the unique run of $\mathcal{A}$ on the input word, the accepting states of $\mathcal{A}$ are only visited <strong>finitely often</strong>.</p><p>Note that the resulting automaton is <strong>nondeterministic</strong>. This is, in general, <strong>unavoidable</strong>.</p><p>This is because there are languages, such as $L&#x3D;(b^*a)^\omega$ where the language itself is recognizable by a deterministic Buchi automaton, while its complement $\Sigma^\omega\setminus L$ can only be recognized by a nondeterministic Büchi automaton.</p><blockquote><p>$\textbf{Theorem 4.3. }\textit{For every deterministic Büchi automaton }\mathcal{A}\textit{, there exists a Büchi automaton }\mathcal{A’}\newline\textit{ such that }\mathcal{L}(\mathcal{A’})&#x3D;\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}).$</p></blockquote><h3 id="Explained-in-Human-Language"><a href="#Explained-in-Human-Language" class="headerlink" title="Explained in Human Language"></a>Explained in Human Language</h3><p>$\mathcal{L}(\mathcal{A’})\subseteq\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}):$</p><p>To prove that “If $\alpha$ is accepted by $\mathcal{L}(\mathcal{A’})$, then it is also accepted by the complement of $\mathcal{L}(\mathcal{A})$”, we can show that every state in $\mathcal{A’}$ is same as $\mathcal{A}$, but as long as it switched to $\lbrace 1\rbrace$, it stays forever and there is no accepting states of $\mathcal{A}$.</p><p>Therefore, every accepted word in $\mathcal{L}(\mathcal{A’})$ is also accepted in $\Sigma^\omega \setminus\mathcal{L}(\mathcal{A})$.</p><p>$\mathcal{L}(\mathcal{A’})\supseteq\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}):$</p><p>To prove that “If $\alpha$ is accepted by the complement of $\mathcal{L}(\mathcal{A})$, then it is also accepted by $\mathcal{L}(\mathcal{A’})$”, we assume there’s a word $\alpha$ that is not accepted by $\mathcal{L}(\mathcal{A})$.</p><p>Since $\mathcal{A}$ is <strong>complete</strong> and <strong>deterministic</strong>, so the run on $\alpha$ is still infinite, yet <strong>never</strong> visit the accepted states <strong>infinitely often</strong>. i.e. starting from certain position, it will never visit the accepting states anymore.</p><p>We can treat that position as the switch from $\lbrace 0\rbrace$ and $\lbrace 1\rbrace$ in $\mathcal{A’}$ occurs. And therefore $\alpha$ is an accepted word in $\mathcal{L}(\mathcal{A’})$.</p><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>Let $\mathcal{A’}$ be constructed from the given deterministic Büchi automaton $\mathcal{A}$ (which we<br>assume, w.l.o.g., to be complete) by <em>Construction 4.1.</em> We prove that $\mathcal{L}(\mathcal{A’})&#x3D;\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}).$</p><p>$\mathcal{L}(\mathcal{A’})\subseteq\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}):$</p><p>For every word $\alpha\in\mathcal{L}(\mathcal{A’})$ we have an accepting run: $r’:(q_0,0)(q_1,0)\dots(q_j,0)(q’_0,1)(q_1,1)\dots$ on $\mathcal{A}$. Hence, $r:q_0q_1\dots q_jq_0’q_1’\dots$ is the unique run of $\mathcal{A}$ on $\alpha$. Since $q_0’,q_1’,\dots\in Q\setminus F$, we have that $\text{Inf}(r)\subseteq Q\setminus F$. Hence, $r$ is not accepting and $\alpha\in\Sigma^\omega\setminus\mathcal{L}(\mathcal{A})$.</p><p>$\mathcal{L}(\mathcal{A’})\supseteq\Sigma^\omega \setminus\mathcal{L}(\mathcal{A}):$</p><p>Let $\alpha\notin\mathcal{L}(\mathcal{A’})$ be some word that is not in the language of $\mathcal{A}$. Since $\mathcal{A}$ is complete and deterministic, there exists a unique run $r:q_0q_1q_2\dots$ of $\mathcal{A}$ on $\alpha$ and  $\text{Inf}(r)\cap F&#x3D;\emptyset$. Thus, there exists a $k\in\mathbb{N}$ such that $q_j\notin F$ for all $j &gt; k$.</p><p>This gives us the run: $r’:(q_0,0)(q_1,0)\dots(q_j,0)(q’_0,1)(q_1,1)\dots$ of $\mathcal{A’}$ on $\alpha$ with $\text{Inf}(r)\subseteq ((Q\setminus F)\times\lbrace 1\rbrace)&#x3D;F’$. Hence, $r’$ is accepting and therefore $\alpha\in\mathcal{L}(\mathcal{A’})$.</p><h3 id="Example-mathcal-L-mathcal-A-b-ast-a-omega-and-mathcal-L-mathcal-A’-a-b-ast-b-omega"><a href="#Example-mathcal-L-mathcal-A-b-ast-a-omega-and-mathcal-L-mathcal-A’-a-b-ast-b-omega" class="headerlink" title="Example: $\mathcal{L}(\mathcal{A})&#x3D;(b^\ast a)^\omega$ and $\mathcal{L}(\mathcal{A’})&#x3D;(a+b)^\ast b^\omega$"></a>Example: $\mathcal{L}(\mathcal{A})&#x3D;(b^\ast a)^\omega$ and $\mathcal{L}(\mathcal{A’})&#x3D;(a+b)^\ast b^\omega$</h3><p><img src="/../images/notes/uds/agv/4_2_eg.png"></p><p>Note that, since not all $\omega$-regular languages can be recognized by deterministic Büchi automata, Construction 4.1 does not provide us with a complementation construction for all $\omega$-regular languages. Such a general construction is the subject of the following section.</p><hr><p>Next chapter: <a href="../agv5-1/">Infinite Directed Acyclic Graph (DAG)</a></p><p>Further Reading: <a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 4.1 -- Deterministic Büchi Automata</title>
      <link href="/agv4-1/"/>
      <url>/agv4-1/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv3-5/">Büchi’s Characterization Theorem</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In the theory of automata over finite words, we have <a href="https://en.wikipedia.org/wiki/Powerset_construction">Rabin-Scott powerset construction</a>, which converts a <em>nondeterministic automaton</em> over finite words into a <em>deterministic automaton</em> that <strong>recognizes the same language</strong>. This shows that nondeterminism does not make automata over finite words more expressive (but makes it more concise as the construction produces an exponential number of states).</p><p>The situation is different for Büchi automata: even though the language $L &#x3D; (a+b)^*b^\omega$ is clearly <em>Büchi-recognizable</em>, there is, as the following theorem shows, <strong>no deterministic Büchi automaton that recognizes L</strong>.</p><h2 id="Deterministic-vs-nondeterministic-Buchi-automata"><a href="#Deterministic-vs-nondeterministic-Buchi-automata" class="headerlink" title="Deterministic vs. nondeterministic Büchi automata"></a>Deterministic vs. nondeterministic Büchi automata</h2><blockquote><p>$\textbf{Theorem 4.1. }\textit{Language $L&#x3D;(a+b)^*b^\omega$ is not recognizable by deterministic Büchi Automata}$</p></blockquote><p>Starting a base case $b^\omega$, we add $(a+b)$ as the prefix one by one. Can we express the  <strong>kleene star</strong>?<br>That is, is the automaton only accept <strong>finitely many</strong> $(a+b)$?</p><h3 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h3><p>Assume, by way of contradiction, that $L$ is recognizable by the deterministic Büchi automaton $\mathcal{A}&#x3D;(\Sigma,Q,I,T,\small\text{BÜCHI}\normalsize(F))$. Since $\alpha_0&#x3D;b^\omega$ is in $L$, there is an unique run</p><p>$$r_0&#x3D;r_0(0)r_0(1)r_0(2)\dots$$</p><p>of $\mathcal{A}$ on $\alpha_0$ with $r_0(n_0)\in F$ for some $n_0\in\mathbb{N}$. Similarly, $\alpha_1&#x3D;b^{n_0}ab^\omega$ in $L$ and there is a unique run</p><p>$$r_1&#x3D;r_0(0)r_0(1)r_0(2)\dots r_0(n_0)r_1(n_0+1)r_1(n_0+2)\dots$$</p><p>of $\mathcal{A}$ on $\alpha_1$ with $r_1(n_1)\in F$ for some $n_1&gt;n_0$. Because $\mathcal{A}$ is deterministic, $r_0$ and $r_1$ are identical up to position $n_0$.</p><p>By repeating this argument infinitely often, we obtain a word $\alpha&#x3D;b^{n_0}ab^{n_1}ab^{n_2}a\dots$ and a run $r$ with infinitely many visits to $F$. Hence, $\alpha$ is accepted by $\mathcal{A}$. However, $\alpha$ is not an element of $L$. This contradicts $L &#x3D; \mathcal{L}(\mathcal{A})$.</p><h2 id="Limit-Operator"><a href="#Limit-Operator" class="headerlink" title="Limit Operator"></a>Limit Operator</h2><p>We start by defining a <em>Limit Operator</em> to generate $\omega$-language using regular language. For the regular language $W$, $\overrightarrow{W}$ contains all the words that they all contain words in $W$ as substrings.</p><blockquote><p>$\textbf{Definition 4.1. }\text{(Limit). The}\textit{ limit }\overrightarrow{W}\text{ of a language }W\subseteq\Sigma^* \text{ over finite words}\newline\text{is the following language over infinite words:}$ $$\overrightarrow{W}&#x3D;\lbrace\alpha\in\Sigma^\omega\mid\text{there exist infinitely many }n\in\mathbb{N}\text{ s.t. }\alpha[0,n]\in W\rbrace.$$</p></blockquote><p>And From regular language, now we can define an $\omega$-regular language that is recognizable by deterministic Büchi Automata:</p><blockquote><p>$\textbf{Theorem 4.2. }\textit{An $\omega$-language $L\subseteq\Sigma^\omega$ is recognizable by a deterministic Büchi Automata}\newline\textit{iff there is a regular langauge $W\subseteq\Sigma^*$ s.t. $L&#x3D;\overrightarrow{W}$}.$</p></blockquote><h3 id="Explained-in-Human-language"><a href="#Explained-in-Human-language" class="headerlink" title="Explained in Human language"></a>Explained in Human language</h3><p>Basically, we are trying to prove $\mathcal{L}(\mathcal{A_B})&#x3D;\overrightarrow{\mathcal{L}(\mathcal{A_F})}$, where $\mathcal{L}(\mathcal{A_B})$ is a deterministic Büchi Automata and $\mathcal{L}(\mathcal{A_F})$ is a a deterministic automaton over finite words.</p><p>As we can see, an accepted word $\alpha\in\mathcal{L}(\mathcal{A_B})$ with have substring $\alpha[0,n]$ that is accepted by $\mathcal{L}(\mathcal{A_F})$ with infinitely many $n\in\mathbb{N}$, by the definition of the <em>limit operator</em>.</p><p>We can prove regular language $W$ exists if $\alpha$ exists using $\overrightarrow{W}$. Automata that accepts $W$ and $\overrightarrow{W}$ should exist, namely $\mathcal{L}(\mathcal{A_F})$ and $\overrightarrow{\mathcal{L}(\mathcal{A_F})}$ respectively.</p><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>We claim that the languages of a deterministic Büchi automaton $\mathcal{A}_B$ and of a deterministic<br>automaton over finite words $\mathcal{A}_F$, where the automata $\mathcal{A}_B&#x3D;(\Sigma,Q,I,T,\small\text{BÜCHI}\normalsize(F))$ and $\mathcal{A}_F&#x3D;(\Sigma,Q,I,T,F)$, constructed from the same components, are related as follows:</p><p>$$\mathcal{L}(\mathcal{A_B})&#x3D;\overrightarrow{\mathcal{L}(\mathcal{A_F})}.$$</p><p>Since every regular language is recognized by a deterministic automaton over finite words,<br>the theorem follows. To prove the claim, we consider an infinite word $\alpha\in\Sigma^\omega$.</p><p>$\hspace{1cm}\alpha\in\mathcal{L}(\mathcal{A_B})\newline<br>\text{iff} \hspace{0.5cm}\text{for the unique run $r$ of $\mathcal{A_B}$ on $\alpha$, Inf($r$) $\cap$ $F\neq\emptyset$}\newline \text{iff} \hspace{0.5cm} \alpha[0,n]\in\mathcal{L}(\mathcal{A_F})\text{ for infinitely many }n\in\mathbb{N}\newline<br>\text{iff} \hspace{0.5cm} \alpha\in\mathcal{L}(\mathcal{A_F})$</p><hr><p>Next chapter: <a href="../agv4-2/">Complementation of deterministic Büchi Automata</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Powerset_construction">powerset construction</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 3.5 -- Büchi&#39;s Characterization Theorem</title>
      <link href="/agv3-5/"/>
      <url>/agv3-5/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv3-4/">Infinite concatenation and…</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><p>We are now ready to prove Büchi’s Characterization Theorem, a result from 1962.</p><blockquote><p>$\textbf{Theorem 3.6. }\text{(Büchi’s Characterization Theorem) }\newline\textit{An $\omega$-language is Büchi-recognizable iff it is $\omega$-regular.}$</p></blockquote><h3 id="Explained-in-Human-language"><a href="#Explained-in-Human-language" class="headerlink" title="Explained in Human language"></a>Explained in Human language</h3><blockquote><p>p.s. Büchi-recognizable means the language can be described by a Büchi automata.</p></blockquote><p>$”\Leftarrow”$<br>We have to prove if the language is <strong>$\omega$-regular</strong>, then it is <strong>Büchi-recognizable</strong>.<br>In <a href="../agv3-2/">section 3.2</a>, we learn that an $\omega$-regular language contains 3 operators:</p><ul><li><strong>union</strong> of $\omega$-regular languages, $W_1+W_2$ (proved by Theorem <a href="../agv3-3/">3.2</a>),</li><li><strong>infinite concatenation</strong> of a <strong>non-empty</strong> regular language $E^\omega$ (proved by Theorem <a href="../agv3-4/">3.4</a>), and</li><li><strong>concatenation</strong> of regular languages and $\omega$-regular language $E\cdot W$ (proved by Theorem <a href="../agv3-4/">3.5</a>)</li></ul><p>$”\Rightarrow”$<br>We have to prove if the language is <strong>Büchi-recognizable</strong>, then it is <strong>$\omega$-regular</strong>.<br>Here, we try to construct a Büchi-recognizable using all <strong>$\omega$-regular</strong> operators.</p><p>We begin by constructing a <strong>regular language</strong> $W_{q,q’}$. <strong>Words</strong> of the language $w$ is accepted by some finite-word automata, with a pair of state $q,q’\in Q$ being the <strong>initial and accepting states</strong> respectively.</p><p>Then we try to prove that a <strong>Büchi-recognizable language</strong> $\mathcal{L}(\mathcal{A})$ equals to the regular language <strong>concatenates</strong> (<a href="../agv3-4/">3.5</a>) with the <strong>infinite concatenated</strong>, <strong>non-empty</strong> (<a href="../agv3-4/">3.4</a>) starting from the previous accepting state. That is $W_{q,q’}\cdot(W_{q’,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$.</p><p>On top of that, we do a set union (<a href="../agv3-3/">3.2</a>) for each pair of <strong>initial and accepting states</strong> $q,q’\in Q$, that is $\bigcup_{q\in I,q’\in F}$</p><blockquote><p>Therefore, now we only need to prove that $\mathcal{L}(\mathcal{A})&#x3D;\bigcup_{q\in I,q’\in F}W_{q,q’}\cdot(W_{q,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$.</p></blockquote><p>For the word $\alpha$ from L.H.S, it reaches $q’\in F$ infinitely often. We can thus seperate into $r:q\xrightarrow{w_0}q’\xrightarrow{w_1}q’\xrightarrow{w_2}\dots$<br>The $w$ here refers the word to reach $q’$. We know that Büchi automata is non-empty so $|w_i|&gt;0$ when $i&gt;0$.<br>Therefore, $w_0$ will be a word from $W_{q,q’}$ and the rest will be words for $(W_{q’,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$ because they reach the accepting state $q’\in F$.</p><p>For the word $w_0w_1w_2\dots$ from R.H.S, where $w_0$ refers to $W_{q,q’}$ and the rest refers to $(W_{q’,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$.<br>This is accepted by $\mathcal{L}(\mathcal{A})$ because it reaches the accepting state $q’\in F$ infinitely often.</p><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>$”\Leftarrow”$<br>Follows from the closure properties of the Büchi-recognizable languages established by Theorems <a href="../agv3-3/">3.2</a>, <a href="../agv3-4/">3.4</a>, <a href="../agv3-4/">3.5</a>.</p><p>$”\Rightarrow”$<br>Given a Büchi automaton $\mathcal{A}$, we consider for each pair $q,q’\in Q$ the regular language<br>$$<br>W_{q,q’} &#x3D; \lbrace w\in\Sigma^*\mid \text{finite-word automaton } (\Sigma,Q,\lbrace q\rbrace,T,{q’}) \text{ accepts }w\rbrace.<br>$$<br>We claim that $\mathcal{L}(\mathcal{A})&#x3D;\bigcup_{q\in I,q’\in F}W_{q,q’}\cdot(W_{q,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$. The claim is proven as follows.</p><p>$\mathcal{L}(\mathcal{A})\subseteq\bigcup_{q\in I,q’\in F}W_{q,q’}\cdot(W_{q,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$: Let $\alpha\in\mathcal{L}(\mathcal{A})$. Then there is an accpeting run $r$ of $\mathcal{A}$ on $\alpha$, which begins at some $q&#x3D;r(0)\in I$ and visits some $q’\in F$ infinitely often:</p><p>$$<br>r:q\xrightarrow{w_0}q’\xrightarrow{w_1}q’\xrightarrow{w_2}\dots<br>$$</p><p>where $w_i\in\Sigma^*$ for all $i\ge 0$, $|w_i|&gt;0$ for all $i&gt;0$ and $\alpha&#x3D;w_0w_1w_2\dots$ The notation $q_0\xrightarrow{w}q_{k+1}$ for some finite word $w&#x3D;w(0)w(1)\dots w(k)$ means that there exist states $q_1,\dots,q_k\in Q$ s.t. $(q_i,w(i),q_{i+1})\in T$ for all $0\leq i \leq k$. Since $w_0\in W_{q,q’}$ and $w_k\in W_{q’,q’}$ for $k&gt;0$, we have that $\alpha \in W_{q,q’}\cdot W_{q’,q’}^\omega$ for some $q\in I,q’\in F$.</p><p>$\mathcal{L}(\mathcal{A})\supseteq\bigcup_{q\in I,q’\in F}W_{q,q’}\cdot(W_{q,q’}\setminus\lbrace\varepsilon\rbrace)^\omega$: Let $\alpha&#x3D;w_0w_1w_2\dots$ with $w_0\in W_{q,q’}$ and $w_k\in W_{q’,q’}$ for some $q\in I,q’\in F$ and for all $k&gt;0$. Then the run:</p><p>$$<br>r:q\xrightarrow{w_0}q’\xrightarrow{w_1}q’\xrightarrow{w_2}\dots<br>$$</p><p>exists and is aceepting because $q’\in F$. It follows that $\alpha\in\mathcal{L}(\mathcal{A})$.</p><hr><p>Next chapter: <a href="../agv4-1/">Deterministic Büchi Automata</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 3.4 -- Infinite concatenation and Concatenation of regular Langauge and Büchi-recognizable Language</title>
      <link href="/agv3-4/"/>
      <url>/agv3-4/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv3-3/">Intersection and Union of Closure Properties</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><p>In this section, we continue the proof of the <strong>closure properties</strong> of the Büchi-recognizable languages.</p><h2 id="Concatenation-of-regular-Langauge-and-Buchi-recognizable-Language"><a href="#Concatenation-of-regular-Langauge-and-Buchi-recognizable-Language" class="headerlink" title="Concatenation of regular Langauge and Büchi-recognizable Language"></a>Concatenation of regular Langauge and Büchi-recognizable Language</h2><blockquote><p>$\textbf{Construction 3.3. } \text{Let }\mathcal{A}_1&#x3D;(\Sigma,Q_1,I_1,T_1,F_1)\text{ be an automaton over finite words that}\newline\text{recognizes the languge }L_1\text{, and let }\mathcal{A}_2 &#x3D; (\Sigma,Q_2,I_2,T_2,\small\text{BÜCHI}\normalsize (F_2))\text{ be a Büchi automaton}\newline\text{over the same alphabet that recognizes }L_2.\text{ We construct a Büchi autotmaton }\newline\mathcal{A’}&#x3D;(\Sigma,Q’,I’,T’,\small\text{BÜCHI}\normalsize (F_2))\text{ with }\mathcal{L}(\mathcal{A’})&#x3D;L_1\cdot L_2\text{ as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q’&#x3D;Q_1\cup Q_2 \hspace{1cm}(\text{w.l.o.g we assume }Q_1\cap Q_2&#x3D;\emptyset)\newline<br>\hspace{1cm} \cdot \ I’&#x3D;\biggl\lbrace \begin{array}{l}I_1 \hspace{2cm}\text{if }I_1\cap F_1&#x3D;\emptyset\newline<br>I_1\cup I_2 \hspace{1cm}\text{otherwise}\end{array} \newline<br>\hspace{1cm} \cdot \ T’&#x3D;T_1\cup T_2\cup\lbrace (q,\sigma,q’)\mid(q,\sigma,f)\in T_1,f\in F_1,q’\in I_2\rbrace \newline<br>\end{array}$</p></blockquote><p>$Q’:$ Same as Union, we include both automata for concatenation</p><p>$I’:$ We normaly start the the automaton from $I_1$ If $I_1$ is non-empty, otherwise we start at $I_2$</p><p>$T’:$ For any states that can reach the accepting states of $T_1$ with one transition, we create a new transitions that reach the initial states of $T_2$ $(I_2)$.</p><p>The correctness of this construction is proven by the following theorem.</p><blockquote><p>$\textbf{Theorem 3.4. }\newline\textit{If $L_1$ is a regular language and $L_2$ is Büchi-recognizable, then $L_1\cdot L_2$ is Büchi-recognizable.}$</p></blockquote><h3 id="Explained-in-Human-language"><a href="#Explained-in-Human-language" class="headerlink" title="Explained in Human language"></a>Explained in Human language</h3><p>If $I_1$ is non-empty, then we can have a run that starts from $I_1$ to $r(n)$, that is one transition before $\mathcal{A_1}$’s accepting states of $f$. Then for next transition we either move to $f$, or we move on to $\mathcal{A_2}$ starting from $r(n+1)$.</p><p>If $I_1$ is empty, then any word accepted by $\mathcal{A‘}$ is accepted by $\mathcal{A_2}$</p><p>On the other way, we can always construct a word $w\alpha$. If $w$ is accepted by $\mathcal{A_1}$ and $\alpha$ is accepted by $\mathcal{A_2}$, then $w\alpha$ is always accepted by $\mathcal{A’}$</p><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>We prove that the Büchi automaton $\mathcal{A’}$ built from the automaton on finite words $\mathcal{A}_1$ and the Büchi automaton $\mathcal{A}_2$ indeed recognizes the concatenation of the languages of the two automata.</p><p>$\mathcal{L}(\mathcal{A’})\subseteq\mathcal{L}(\mathcal{A}_1)\cdot\mathcal{L}(\mathcal{A}_2):$</p><p>For $\alpha\in\mathcal{L}(\mathcal{A’})$, we have an accepting run $r&#x3D;r(0)r(1)r(2)\dots$ of $\mathcal{A’}$ on $\alpha$.<br>If $r(0)\in I_1$, then there is an $n\in\mathbb{N}$ such that $(r(n),\alpha(n),r(n+1))\in Q_1\times\Sigma\times I_2$ and therefore, there is a final state $f\in F_1$ such that $r(0)r(1)r(2)\dots r(n)f$ is an accepting run of $\mathcal{A_1}$ on $\alpha(0)\alpha(1)\alpha(2)\dots \alpha(n)$ and $r(n+1)r(n+2)\dots$ is an accepting run of $\mathcal{A_2}$ on $\alpha(n+1)\alpha(n+2)\dots$<br>If $r(0)\in I_2$ then $I_1\cup F_1 \neq\emptyset$ and therefore, $\varepsilon\in\mathcal{L}(\mathcal{A_1}),\alpha\in\mathcal{L}(\mathcal{A_2})$</p><p>$\mathcal{L}(\mathcal{A’})\supseteq\mathcal{L}(\mathcal{A}_1)\cdot\mathcal{L}(\mathcal{A}_2):$</p><p>For $w\in\mathcal{A_1}$, let $r&#x3D;r(0)r(1)\dots r(n)$ be an accepting run $\mathcal{A_1}$ on $w$.<br>For $\alpha\in\mathcal{A_2}$, let $s&#x3D;s(0)s(1)\dots$ be an accepting run of $\mathcal{A_2}$ on $\alpha$.<br>Then, $r(n)\in F_1$ and, by construction, $r(0)r(1)\dots r(n-1)s(0)s(1)\dots$ is an accepting run of $\mathcal{A’}$ on $w\alpha$.</p><h2 id="Infinite-concatenation-of-Regular-language"><a href="#Infinite-concatenation-of-Regular-language" class="headerlink" title="Infinite concatenation of Regular language"></a>Infinite concatenation of Regular language</h2><p>Finally, we show that the infinite concatenation of words of a regular language forms a Büchi-recognizable language. We construct a Büchi automaton for this language from an automaton over finite words in two steps.</p><h3 id="From-automaton-over-finite-words-to-a-single-initial-state"><a href="#From-automaton-over-finite-words-to-a-single-initial-state" class="headerlink" title="From automaton over finite words to a single initial state"></a>From automaton over finite words to a single initial state</h3><p>Firstly, we modify a given automaton over finite words into an equivalent automaton with one <strong>single initial state</strong> that has <strong>no incoming transitions</strong>.</p><p>We do this by create a new fresh state as the new initial state, with all transitions identical as the original. And the original initial state now has no incoming transitions.</p><blockquote><p>$\textbf{Construction 3.4. } \text{Let }\mathcal{A}_1&#x3D;(\Sigma,Q_1,I_1,T_1,F_1)\text{ be an automaton over finite words. We assume}\newline\text{that }\varepsilon\notin\mathcal{L}(\mathcal{A})\text{. We construct an automaton }\mathcal{A’} &#x3D; (\Sigma,Q’,I’,T’,F)\text{ over finite words such that }\newline\mathcal{L}(\mathcal{A})&#x3D;\mathcal{L}(\mathcal{A’})\text{ and }\mathcal{A’}\text{ has a single initial state that has no incoming transitions.}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q’&#x3D;Q_1\cup\lbrace q_f\rbrace \text{where }q_f\text{ is a fresh state}\newline<br>\hspace{1cm} \cdot \ I’&#x3D;\lbrace q_f\rbrace\newline<br>\hspace{1cm} \cdot \ T’&#x3D;T\cup\lbrace (q_f,\sigma,q’)\mid(q,\sigma,q’)\in T \text{ for some }q\in I\rbrace\newline<br>\end{array}$</p></blockquote><p>The second construction builds the Büchi automaton that recognizes the infinite concatenations of words from the regular language by <strong>adding a loop</strong> to the modified automaton.</p><blockquote><p>$\textbf{Construction 3.5. } \text{Let }\mathcal{A}\text{ be an automaton over finite words. We assume that }\varepsilon\notin\mathcal{L}(\mathcal{A}).\newline\text{We construct a Büchi automaton }\mathcal{A’’}&#x3D;(\Sigma,Q’’,I’’,T’’,\small\text{BÜCHI}\normalsize (F’’))\text{ such that }\mathcal{L}(\mathcal{A’’})&#x3D;\mathcal{L}(\mathcal{A})^\omega.\newline\text{Let }\mathcal{A’}&#x3D;(\Sigma,Q’,I’,T’,F’)\text{ be the automaton of Construction 3.4. Then }A’’\text{ is defined as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q’’&#x3D;Q’ \hspace{1cm} \cdot \ I’’&#x3D;I’ \hspace{1cm} \cdot \ F’’&#x3D;I’\newline<br>\hspace{1cm} \cdot \ T’’&#x3D;T’\cup\lbrace (q,\sigma,q_f)\mid(q,\sigma,q’)\in T’ \text{ and }q’\in F’\rbrace\newline<br>\end{array}$</p></blockquote><p>This construction change the final state into the initial state, with adding new transition from final state to initial state. Therefore the automaton becomes a loop.</p><p>The correctness of this construction is proven by the following theorem.</p><blockquote><p>$\textbf{Theorem 3.5. }\textit{If $L$ is a regular language such that $\varepsilon\notin L$, then $L^\omega$ is Büchi-recognizable}$</p></blockquote><h3 id="Explained-in-Human-language-1"><a href="#Explained-in-Human-language-1" class="headerlink" title="Explained in Human language"></a>Explained in Human language</h3><p>If there is accepting run for $\mathcal{L}(\mathcal{A’’})$, it reaches the accepting state infinitely often.<br>We can split the word in every accepting states and it will be an accepting run for $\mathcal{L}(\mathcal{A’})$, since the transition to accepting state $F’’$ and $F’$ are identical.</p><p>If there is accepting run(s) for $\mathcal{L}(\mathcal{A’})$, we can infinitely repeat them so that is also accepted for $\mathcal{L}(\mathcal{A’’})$.</p><h3 id="Formal-Proof-1"><a href="#Formal-Proof-1" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>Construction 3.4 does not affect the language of $\mathcal{A}$. We show that the Büchi automaton $\mathcal{A’’}$ built in Construction 3.5 from the resulting automaton $\mathcal{A’}$ on finite words indeed recognizes $\mathcal{L}(\mathcal{A’})^\omega$.</p><p>$\mathcal{L}(\mathcal{A’’})\subseteq\mathcal{L}(\mathcal{A’})^\omega:$</p><p>Assume that $\alpha\in\mathcal{L}(\mathcal{A’’})$ and that $r(0)r(1)r(2)\dots$ is an accpeting run of $\mathcal{A’’}$ on $\alpha$. Hence, we have that $r(i)&#x3D;q_f\in F’’&#x3D;I’$ for inifinitely many indices $i:i_0,i_1,i_2,\dots$. This provides a sequence of runs of $\mathcal{A’}$:</p><ul><li>run $r(0)r(1)\dots r(i_0-1)q$ on $w_0&#x3D; \alpha(0)\alpha(1)\dots\alpha(i_0-1)$ for some $q\in F’$</li><li>run $r(i_0)r(i_0+1)\dots r(i_i-1)q$ on $w_1&#x3D; \alpha(i_0)\alpha(i_1)\dots\alpha(i_1-1)$ for some $q\in F’$</li><li>and so forth.</li></ul><p>We thus have that $w_k\in\mathcal{L}(\mathcal{A’})$ for every $k\geq 0$. Hence, $\alpha\in\mathcal{L}(\mathcal{A’})^\omega$.</p><p>$\mathcal{L}(\mathcal{A’’})\supseteq\mathcal{L}(\mathcal{A’})^\omega:$</p><p>Assume that $\alpha &#x3D;w_0w_1w_2\dots\in\Sigma^\omega$ such that $w_k\in\mathcal{L}(\mathcal{A’})$ for all $k\geq 0$. For each $k$, we choose an accepting run $r_k(0)r_k(1)r_k(2)\dots r_k(n_k)$ of $\mathcal{A’}$ on $w_k$. Hence, $r_k(0)\in I’$ and $r_k(n_k)\in F’$ for all $k&gt;1$. Thus,</p><p>$$r_0(0)\dots r_0(n_0-1)r_1(0)\dots r_1(n_1-1)r_2(0)\dots r_2(n_2-1)\dots$$</p><p>is an accepting run of $\mathcal{A’’}$ on $\alpha$. Hence, $\alpha\in\mathcal{L}(\mathcal{A’’})$.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Now we proved the closure property holds for <strong>Union</strong> $(W_1\cup W_2)$, <strong>Intersection</strong> $(W_1\cap W_2)$, <strong>Concatenation of regular Langauge and Büchi-recognizable Language</strong> $(E+W)$, and <strong>Infinite concatenation of Regular language</strong> $(E^\omega)$.</p><p>In the next section we can start to prove <strong>Büchi’s Characterization Theorem</strong>.</p><hr><p>Next chapter: <a href="../agv3-5/">Büchi’s Characterization Theorem</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Closure_(mathematics)">Closure (mathematics)</a>, <a href="https://en.wikipedia.org/wiki/Concatenation">Concatenation</a>, <a href="https://en.wikipedia.org/wiki/Absolute_infinite">Absolute infinite</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 3.3 -- Closure Properties of Intersection and Union of the Büchi-recognizable languages</title>
      <link href="/agv3-3/"/>
      <url>/agv3-3/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv3-2/">$\omega$-regular language</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><p>In the following we will refer to the languages recognized by Büchi automata simply as <strong>Büchi-recognizable languages</strong>.</p><p><strong>Büchi’s characterization theorem</strong> states that the $\omega$-regular languages are exactly <strong>Büchi-recognizable languages</strong>.</p><p>To prepare for the proof of Büchi’s theorem, we establish several <strong>closure properties</strong> of the Büchi-recognizable languages.</p><h2 id="Closure-Properties-of-Language-Union"><a href="#Closure-Properties-of-Language-Union" class="headerlink" title="Closure Properties of Language Union"></a>Closure Properties of Language Union</h2><blockquote><p>$\textbf{Construction 3.1. } \text{Let $L_1$ and $L_2$ be $\omega$-languages recognized by the Büchi automata}\newline<br>\mathcal{A}_1&#x3D;(\Sigma,Q_1,I_1,T_1,\small\text{BÜCHI}\normalsize (F_1))\text{ and }\mathcal{A}_2 &#x3D; (\Sigma,Q_2,I_2,T_2,\small\text{BÜCHI}\normalsize (F_2))\text{, respectively.}\newline<br>\text{We construct}\mathcal{A}_\cup&#x3D;(\Sigma,Q_\cup,I_\cup,T_\cup,\small\text{BÜCHI}\normalsize (F_\cup))\text{ with }\mathcal{L}(\mathcal{A}_\cup)&#x3D;L_1\cup L_2\text{ as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q_\cup&#x3D;Q_1\cup Q_2 \hspace{1cm} (\text{w.l.o.g we assume }Q_1\cap Q_2&#x3D;\emptyset)\newline<br>\hspace{1cm} \cdot \ I_\cup&#x3D;I_1\cup I_2 \hspace{1cm} \cdot \ T_\cup&#x3D;T_1\cup T_2 \hspace{1cm} \cdot \ F_\cup&#x3D;F_1\cup F_2 \newline<br>\end{array}$</p></blockquote><p>The correctness of this construction is proven by the following theorem.</p><blockquote><p>$\textbf{Theorem 3.2. } \textit{If $L_1$ and $L_2$ are Büchi-recognizable, then so is $L_1\cup L_2$.}$</p></blockquote><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>We prove that the Büchi automaton $\mathcal{A}_\cup$ built by $\mathcal{A}_1$ and $\mathcal{A}_2$ indeed recognizes the union of the languages of the two automata.</p><p>$\mathcal{L}(\mathcal{A}_\cup)\subseteq\mathcal{L}(\mathcal{A}_1)\cup\mathcal{L}(\mathcal{A}_2):$</p><p>For $\alpha\in\mathcal{L}(\mathcal{A}_\cup)$, we have an accepting run $r&#x3D;r(0)r(1)r(2)\dots$ of $\mathcal{A}_\cup$ on $\alpha$.<br>If $r(0)\in I_1$, then $r$ is an accepting run of $\mathcal{A}_1$, otherwise $r(0)\in I_2$ and $r$ is an accepting run of $\mathcal{A}_2$.</p><p>$\mathcal{L}(\mathcal{A}_\cup)\supseteq\mathcal{L}(\mathcal{A}_1)\cup\mathcal{L}(\mathcal{A}_2):$</p><p>For $i\in\lbrace 1,2\rbrace$ and $\alpha\in\mathcal{L}(\mathcal{A}_i)$, there is an accepting run $r$ of $\mathcal{A}_i$. The run $r$ is also an accepting run of $\mathcal{A}_\cup$.</p><h2 id="Closure-Properties-of-Language-Intersection"><a href="#Closure-Properties-of-Language-Intersection" class="headerlink" title="Closure Properties of Language Intersection"></a>Closure Properties of Language Intersection</h2><p>As we will see later, the Büchi-recognizable languages are closed under <code>complement</code>.<br>The closure under <code>complement</code> and <code>union</code> implies the closure under <code>intersection</code> $(\mathcal{A}_\cap &#x3D; (\mathcal{A’_1}\cup \mathcal{A’_2})’)$</p><p>Below, the automaton for the intersection is essentially the product of the two automata.</p><blockquote><p>$\textbf{Construction 3.2. } \text{Let $L_1$ and $L_2$ be $\omega$-languages recognized by the Büchi automata}\newline<br>\mathcal{A}_1&#x3D;(\Sigma,Q_1,I_1,T_1,\small\text{BÜCHI}\normalsize (F_1))\text{ and }\mathcal{A}_2 &#x3D; (\Sigma,Q_2,I_2,T_2,\small\text{BÜCHI}\normalsize (F_2))\text{, respectively.}\newline<br>\text{We construct}\mathcal{A}_\cap&#x3D;(\Sigma,Q_\cap,I_\cap,T_\cap,\small\text{BÜCHI}\normalsize (F_\cap))\text{ with }\mathcal{L}(\mathcal{A}_\cap)&#x3D;L_1\cap L_2\text{ as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ Q_\cap&#x3D;Q_1\times Q_2\times\lbrace 1,2\rbrace\newline<br>\hspace{1cm} \cdot \ I_\cap&#x3D;I_1\times I_2\times\lbrace 1\rbrace\newline<br>\hspace{1cm} \cdot \ T_\cap&#x3D;\lbrace (q_1,q_2,i),\sigma ,(q’_1,q’_2,j)\mid (q_1,\sigma,q’_1)\in T_1,(q_2,\sigma,q’_2)\in T_2,i,j\in\lbrace 1,2\rbrace,\newline<br>\hspace{7.7cm} \ q_i \notin F_i\rightarrow i&#x3D;j \wedge q_i\in F_i\wedge i\neq j\rbrace\newline<br>\hspace{1cm} \cdot \ F_\cap&#x3D;\lbrace (q_1,q_2,2)\mid q_1\in F_1, q_2\in F_2\rbrace\newline<br>\end{array}$</p></blockquote><p>$Q_\cap:$ States in the new automaton is <strong>tuples</strong> that contain the states of two automata plus the third component that used to <strong>combine acceptance conditions</strong>, e.g. $(q_1,q_2,1)$ is a state.</p><p>$I_\cap:$ New automaton is constructed with only <strong>one initial state</strong>, so we assign the value to the acceptance condition <code>&#123;1&#125;</code> for simplicity</p><p>$T_\cap:$ For each transition, it has to be possible by both automata and if such transition reach the one of the automata’s accepting state, the acceptance condition changed. This creates an alternation between the accepting state of the 1st and 2nd automaton.</p><p>$F_\cap:$ Since we start our acceptance condition as <code>&#123;1&#125;</code>, our accepting states of the new automaton will be the <strong>accepting states of the 2nd automaton when acceptance condition becomes <code>&#123;2&#125;</code></strong>. i.e. Whenever the run reach to the accepting states of the 2nd automaton, it always has to first reach the accepting states of the 1st automaton.</p><blockquote><p>$\textbf{Theorem 3.3. } \textit{If $L_1$ and $L_2$ are Büchi-recognizable, then so is $L_1\cap L_2$.}$</p></blockquote><h3 id="Formal-Proof-1"><a href="#Formal-Proof-1" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><p>The run $r’$ is accepting iff $r_1$ is accepting and $r_2$ is accepting.</p><p>i.e. $r’&#x3D;(q_1^0,q_2^0,t^0)(q_1^1,q_2^1,t^1)\dots$ is a run of $\mathcal{A}_\cap$ on an input word $\alpha$,<br>iff $r_1 &#x3D; q^0_1 q^1_1\dots$ is a run of $\mathcal{A}_1$ on $\alpha$ and $r_1 &#x3D; q^0_2 q^1_2\dots$ is a run of $\mathcal{A}_2$ on $\alpha$</p><p>Therefore, an accepting run will be: <strong>(1)</strong> go to states with <code>&#123;1&#125;</code> → <strong>(2)</strong> reach accepting state of 1st automaton → <strong>(3)</strong> go to states with <code>&#123;2&#125;</code> → <strong>(4)</strong> reach accepting state of 2nd automaton → goes back to <strong>(1)</strong>…</p><hr><p>Next chapter: <a href="../agv3-4/">Infinite concatenation and…</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Closure_(mathematics)">Closure (mathematics)</a>, <a href="https://en.wikipedia.org/wiki/Intersection_(set_theory)">Intersection (set theory)</a>, <a href="https://en.wikipedia.org/wiki/Union_(set_theory)">Union (set theory)</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 3.2 -- $&#92;omega$-regular language</title>
      <link href="/agv3-2/"/>
      <url>/agv3-2/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv/">Kleene’s Theorem</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><em>$\omega$-regular expression</em> denotes languages over <strong>infinite</strong> words.<br>In addition to language union on languages over infinite words, we have 2 operations that convert languages over finite words into languages over infinite words.</p><h2 id="omega-regular-expression"><a href="#omega-regular-expression" class="headerlink" title="$\omega$-regular expression"></a>$\omega$-regular expression</h2><p>The collection of $\omega$-regular languages over an alphabet $\Sigma^\omega$ is $\mathcal{L}(W)$, where $W$ is a $\omega$-regular expression.<br>$\omega$-regular expression can be defined as $W :&#x3D; E^\omega \mid E\cdot W\mid W_1+W_2 $, where:</p><ul><li><strong>infinite concatenation</strong> of a <strong>non-empty</strong> regular language $E^\omega$,</li><li><strong>union</strong> of $\omega$-regular languages, $W_1+W_2$, and</li><li><strong>concatenation</strong> of regular languages and $\omega$-regular language $E\cdot W$</li></ul><blockquote><p>$\textbf{Definition 3.3. } \textit{$\omega$-Regular expressions } \text{are defined as follows:}$<br>$\begin{array}{l}<br>\hspace{1cm} \cdot \ \text{If $E$ is a regular expression where $\varepsilon\notin\mathcal{L}(E)$, then $E^\omega$ is an $\omega$-regular expression.}\newline<br>\hspace{1cm} \ \ \mathcal{L}(E^\omega) &#x3D; \mathcal{L}(E)^\omega\newline<br>\hspace{1cm} \ \ \text{where } L^\omega &#x3D;\lbrace \omega_0\omega_1\dots\mid\omega_i\in L,|\omega_i|&gt;0\rbrace \text{ for } L\subseteq\Sigma^* \newline<br>\hspace{1cm} \cdot \ \text{If $E$ is a regular expression and $W$ is an $\omega$-regular expression,}\newline<br>\hspace{1cm} \ \ \text{then $E\cdot W$ is an $\omega$-regular expression:}\newline<br>\hspace{1cm} \ \ \mathcal{L}(E\cdot W) &#x3D; \mathcal{L}(E)\cdot\mathcal{L}(W)\newline<br>\hspace{1cm} \ \ \text{where } L_1 \cdot L_2&#x3D;\lbrace \omega\alpha\mid\omega\in L_1,\alpha\in L_2\rbrace \text{ for } L_1 \subseteq\Sigma^*, L_2 \subseteq\Sigma^\omega\newline<br>\hspace{1cm} \cdot \ \text{If $W_1$ and $W_2$ are $\omega$-regular expressions, then $W_1+W_2$ is an $\omega$-regular expression:}\newline<br>\hspace{1cm} \ \ \mathcal{L}(W_1+W_2) &#x3D; \mathcal{L}(W_1)\cup\mathcal{L}(W_2) .\newline<br>\end{array}$</p></blockquote><p>A language over infinite words is $\omega$-regular if it is definable by a $\omega$-regular expression.</p><hr><p>Next chapter: <a href="../agv3-3/">Intersection and Union of Closure Properties</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Omega_language">Omega language</a>, <a href="https://en.wikipedia.org/wiki/Omega-regular_language">Omega Regular language</a>, <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 3.1 -- Kleene&#39;s Theorem</title>
      <link href="/agv3-1/"/>
      <url>/agv3-1/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv2-3/">The Büchi Acceptance Condition</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><em>Kleene’s theorem</em> states that the <em>set of languages over finite words</em> that can be defined by <strong>regular expressions</strong> is exactly the set of languages that can be recognized by <strong>automata over finite words</strong>.</p><p>Based on this, we define $\omega$-regular expressions, and finally prove the corresponding theorem for $\omega$-regular languages: <strong>Büchi’s characterization theorem</strong>.</p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><p>Regular expression consist of <strong>constants</strong> that denote languages of <em>finite words</em>, and<br>consist of <strong>operator symbols</strong> that denote <em>operations over these languages</em>.</p><p>The collection of regular languages over an alphabet $\Sigma$ is $\mathcal{L}(E)$, where $E$ is a regular expression.<br>Regular expression can be defined as $E :&#x3D; \varepsilon\mid\emptyset\mid a\in\Sigma\mid E+F\mid E\cdot F\mid E^* $, where:</p><ul><li><strong>empty language</strong>: $\varepsilon$,</li><li><strong>empty string language</strong>: $\emptyset$,</li><li><strong>singleton language</strong>: (single letter from alphabet) $a\in\Sigma$,</li><li><strong>union</strong> of regular languages: $E+F$,</li><li><strong>concatenation</strong> of regular languages: $E\cdot F$, and</li><li>language with <strong>kleene star</strong>: $E^*$.</li></ul><blockquote><p>$\textbf{Definition 3.1. } \textit{Regular expressions } \text{are defined as follows:}$<br>$<br>\begin{array}{l}<br>\hspace{1cm} \cdot \ \text{The constants $\varepsilon$ and $\emptyset$ are regular expressions.}\newline<br>\hspace{1cm} \ \ \mathcal{L}(\varepsilon) &#x3D; \lbrace\varepsilon\rbrace ,\mathcal{L}(\emptyset)&#x3D;\emptyset .\newline<br>\hspace{1cm} \cdot \ \text{If $a\in\Sigma$ is a symbol, then $a$ is a regular expressions.}\newline<br>\hspace{1cm} \ \ \mathcal{L}(a) &#x3D; \lbrace a\rbrace .\newline<br>\hspace{1cm} \cdot \ \text{If $E$ and $F$ are regular expressions, then $E+F$ is a regular expression:}\newline<br>\hspace{1cm} \ \ \mathcal{L}(E+F) &#x3D; \mathcal{L}(E)\cup\mathcal{L}(F) .\newline<br>\hspace{1cm} \cdot \ \text{If $E$ and $F$ are regular expressions, then $E\cdot F$ is a regular expression:}\newline<br>\hspace{1cm} \ \ \mathcal{L}(E\cdot F) &#x3D; \lbrace uv\mid u\in\mathcal{L}(E),v\in\mathcal{L}(F)\rbrace .\newline<br>\hspace{1cm} \cdot \ \text{If $E$ is a regular expression, then $E^*$ is a regular expression.}\newline<br>\hspace{1cm} \ \ \mathcal{L}(E^*) &#x3D; \lbrace u_1 u_2 \dots u_n \mid n\in\mathbb{N},u_i \in\mathcal{L}(E)\text{ for all }0\leq i\leq n\rbrace.\newline<br>\end{array}<br>$</p></blockquote><h2 id="Kleene’s-Theorem"><a href="#Kleene’s-Theorem" class="headerlink" title="Kleene’s Theorem"></a>Kleene’s Theorem</h2><p><em>A language over finite words</em> is <strong>regular</strong> if it is definable by a <em>regular expression</em>, or<br>if it is recognized by <em>automata over finite words</em>.</p><blockquote><p>$\textbf{Definition 3.2. } \text{An }\textit{automaton on finite words } \mathcal{A}\text{ is a tuple } (\Sigma,Q,I,T,F), \text{ where $\Sigma$ is an input} \newline \text{alphabet, $Q$ is a nonempty finite set of states, $I\in Q$ is a set of initial states, $\Delta\subseteq Q\times\Sigma\times Q$ is}\newline\text{a set of transitions, and $F\subseteq Q$ are a set of finite states.}$</p></blockquote><h3 id="Mathematical-Definition"><a href="#Mathematical-Definition" class="headerlink" title="Mathematical Definition"></a>Mathematical Definition</h3><p>An automaton $\mathcal{A}$ accepts a finite word $w \in\Sigma^*$ if there is a finite sequence of states $q(0)q(1) . . . q(|w|)$ such that $q(0)\in I$ and $(q(i),w(i), q(i + 1))\in\Delta$ for all $i &lt; |w|$ and with $q(|w|)\in F$</p><h3 id="Explained-in-Human-language"><a href="#Explained-in-Human-language" class="headerlink" title="Explained in Human language"></a>Explained in Human language</h3><p>In a nutshell, a finite word $w$ is <strong>accepted</strong> by an automaton $\mathcal{A} &#x3D; (\Sigma,Q,I,T,F)$ if:</p><ul><li>$\Sigma:$ w is a finite word in $\Sigma$</li><li>$Q:$ There exists a finite sequence of states $q(0)q(1) . . . q(|w|)$</li><li>$I:$ In such sequence, $q(0)$ is one of the initial state $I$</li><li>$T:$ In such sequence, there is transition from $q(i)$ to $q(i+1)$ for each letter $w(i)$, where $i&lt;|w|$.</li><li>$F:$ In such sequence, $q(|w|)$ is one of the final state $F$,<br>and it will be the last state of the run since there is no more letters.</li></ul><h3 id="From-accepted-word-to-accepted-language"><a href="#From-accepted-word-to-accepted-language" class="headerlink" title="From accepted word to accepted language"></a>From accepted word to accepted language</h3><p>The set of all words accepted by $\mathcal{A}$ is called the <strong>language</strong> of $\mathcal{A}$, denoted by $\mathcal{L}(\mathcal{A})$.</p><blockquote><p>$\textbf{Theorem 3.1. } \text{(Kleene’s Theorem)}\newline\textit{A language is regular iff it is recognized by some finite word automaton.}$</p></blockquote><hr><p>Next post: <a href="../agv3-2/">$\omega$-regular language</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Regular_expression">Regular expression</a>,<a href="https://en.wikipedia.org/wiki/Regular_language">Regular language</a> <a href="https://en.wikipedia.org/wiki/Kleene_star#:~:text=The%20Kleene%20star%20is%20defined,x%E2%8B%85y%20%E2%88%88%20S*.">Kleene star</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 2.3 -- The Büchi Acceptance Condition</title>
      <link href="/agv2-3/"/>
      <url>/agv2-3/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv2-2/">Automata over Infinite Words</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="2-3-The-Buchi-Acceptance-Condition"><a href="#2-3-The-Buchi-Acceptance-Condition" class="headerlink" title="2.3 The Büchi Acceptance Condition"></a>2.3 The Büchi Acceptance Condition</h2><p>The Büchi Acceptance Condition is given as a set of <strong>accepting states</strong> $F$.<br>A run of a Büchi automaton is accepting if <strong>some state from this set occurs infinitely often</strong>.</p><p><a name="inf"></a></p><h3 id="Infinite-word"><a href="#Infinite-word" class="headerlink" title="Infinite word"></a>Infinite word</h3><p>For an infinite word $\alpha$ over $\Sigma$, an <strong>Infinity Set</strong> of $\alpha$ is denoted as:<br>$$\text{Inf}(\alpha) &#x3D; \lbrace\sigma\in\Sigma\mid\forall m\in\mathbb{N}.\exists n\in\mathbb{N}.n\geq m \text{ and } \alpha(n)&#x3D;\sigma\rbrace$$</p><p>Meaning that $\text{Inf}(\alpha)$ is a set of all letters $\sigma$ from the alphabet $\Sigma$, so that<br>for all $m$, you can always find $\sigma$ as the n-th letter of $\alpha$ when there exists an $n$ where $n\geq m$.</p><p>This denotes the set of all letters of $\Sigma$ that occur <strong>infinitely often</strong> in $\alpha$.</p><h3 id="Buchi-Condition"><a href="#Buchi-Condition" class="headerlink" title="Büchi Condition"></a>Büchi Condition</h3><p>To express the meaning of “some state from the set of <em>accepting states</em> is reached <strong>infinitely often</strong>“, we can rewrite our accpeing condition $Acc$ into Büchi Condition $\small\text{BÜCHI} \normalsize (F)$</p><p>Here, $\small\text{BÜCHI} \normalsize (F)$ is a set of <em>infinite word</em> that</p><blockquote><p>$\textbf{Definition 2.4. } \text{ The } \textit{Büchi Condition } \small\text{BÜCHI} \normalsize (F)\text{ on a set of states $F\subseteq Q$ is the set}$<br>$$\small\text{BÜCHI} \normalsize (F) &#x3D; \lbrace\alpha\in Q^\omega \mid \text{Inf}(\alpha) \cap F \neq \emptyset\rbrace$$ $\text{An automaton }\mathcal{A}&#x3D;(\Sigma,Q,I,T,Acc)\text{ with }Acc&#x3D;\small\text{BÜCHI} \normalsize (F)\text{ is called a }\textit{Büchi automaton.}\newline \text{The set $F$ is called the }\textit{set of accepting states.}$</p></blockquote><h2 id="Constrcution-of-Complete-Buchi-Automaton"><a href="#Constrcution-of-Complete-Buchi-Automaton" class="headerlink" title="Constrcution of Complete Büchi Automaton"></a>Constrcution of Complete Büchi Automaton</h2><blockquote><p>$\textbf{Theorem 2.1. } \textit{For every Büchi Automaton $\mathcal{A}$, there is a complete Büchi Automaton $\mathcal{A}’$} \newline \textit{such that $\mathcal{L}(\mathcal{A}) &#x3D; \mathcal{L}(\mathcal{A}’)$}$</p></blockquote><p>$\textbf{Example 2.2.}$<br>Let $\mathcal{A}$ be the automaton from Example <a href="../agv2-2/#eg1">2.1</a> with Büchi acceptance condition $\small\text{BÜCHI}\normalsize (\lbrace D\rbrace)$. The language of the automaton consists of a single word:<br>$$\mathcal{L}(\mathcal{A})&#x3D;\lbrace aabbaabbaabb\dots\rbrace$$</p><p>For a Büchi Automaton $\mathcal{A} &#x3D; (\Sigma,Q,I,T,\small\text{BÜCHI} \normalsize (F))$,<br>we define the <strong>complete</strong> Büchi Automaton $\mathcal{A’} &#x3D; (\Sigma,Q’,I’,T’,\small\text{BÜCHI} \normalsize (F’))$ using:</p><ul><li>$Q’$ &#x3D; $Q \cup \lbrace q_f\rbrace$ where $q_f$ is a fresh state</li><li>$I’$ &#x3D; $I$</li><li>$T’$ &#x3D; $T \cup \lbrace (q,\sigma,q_f) \mid \nexists q’ . (q,\sigma,q’)\in T\rbrace\cup\lbrace (q_f,\sigma,q_f)\mid\sigma\in\Sigma\rbrace$</li><li>$F’$ &#x3D; $F$</li></ul><p><img src="/images/notes/uds/agv/2_3_eg.png"></p><h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h3><p>First, we add a <strong>fresh state</strong> $q_f$ the <em>set of state</em> $Q$ without changing the <em>initial</em> and <em>accepting</em> states.</p><p>A <em>complete Büchi Automaton</em> requires every states must have transitions for every letters in the alphabet.<br>So for each states orginally in $Q$, we construct new transitions that the letters are not yet used by the state.<br>(which is $\nexists q’ . (q,\sigma,q’)\in T$)</p><p>Finally, for all transitions from the fresh state are self transitioning, and they include all letters.<br>(which is $(q_f,\sigma,q_f)\mid\sigma\in\Sigma$)</p><h3 id="Formal-Proof"><a href="#Formal-Proof" class="headerlink" title="Formal Proof"></a>Formal Proof</h3><ul><li><p>The runs of $\mathcal{A’}$ are a <strong>superset</strong> of those of $\mathcal{A}$.</p><ul><li>During the construction of $\mathcal{A’}$, we have not removed any original transitions, but adding new fresh states.</li></ul></li><li><p>Furthermore, on <strong>any infinite input word</strong>, the accepting runs of $\mathcal{A}$ and $\mathcal{A’}$ are the same.</p><ul><li>If $\mathcal{A}$ accepts, $\mathcal{A’}$ also accepts because $\mathcal{A’}$ is a superset.</li><li>If a run reaches new fresh states $q_f$ stays in $q_f$ forever, and</li><li>since $q_f\notin F’$, such a run is not accepting.</li></ul></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>A <em>complete deterministic automaton</em> may be viewed as a <strong>total function</strong> from $\Sigma^\omega$ to $Q^\omega$.<br>A <em>complete (possibly nondeterministic) automaton</em> produces <strong>at least one run for every input word</strong>.</p><hr><p>Next chapter: <a href="../agv3-1/">Kleene’s Theorem</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a>, <a href="https://en.wikipedia.org/wiki/Omega_language">Omega language</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 2.2 -- Automata over Infinite Words</title>
      <link href="/agv2-2/"/>
      <url>/agv2-2/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv2-1/">Büchi automata (Preliminaries)</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="2-2-Automata-over-Infinite-Words"><a href="#2-2-Automata-over-Infinite-Words" class="headerlink" title="2.2 Automata over Infinite Words"></a>2.2 Automata over Infinite Words</h2><p>The operational behavior of an automaton over infinite words is very similar to automaton over finite words:</p><ol><li>Start with an <em>initial state</em></li><li>Automaton constructs a <strong>run</strong> by reading one letter of the input alphabet at a time, and<br>transitioning to a successor <em>state</em> permitted by its <em>transitions</em>.</li></ol><p>The major difference between automata over finite and infinite words is the <strong>acceptance condition</strong>.</p><blockquote><p>$\textbf{Definition 2.1. } \text{ An } \textit{automaton over infinite words } \text{is a tuple $\mathcal{A} &#x3D; (\Sigma,Q,I,T,Acc)$, where} \newline<br>\begin{array}{l}<br>\hspace{1cm} \cdot \ \Sigma \text{ is a finite } \textit{alphabet} \newline<br>\hspace{1cm} \cdot \ Q \text{ is a finite set of } \textit{states} \newline<br>\hspace{1cm} \cdot \ I \subseteq Q \text{ is a subset of } \textit{initial states} \newline<br>\hspace{1cm} \cdot \ T \subseteq Q \times \Sigma \times Q \text{ is a set of } \textit{transitions} \text{, and} \newline<br>\hspace{1cm} \cdot \ Acc \subseteq Q^\omega \text{ is the } \textit{accepting condition}<br>\end{array}$</p></blockquote><p>In the following, we refer an automaton over infinite words simply as an automaton.</p><h3 id="Runs-of-Buchi-automata"><a href="#Runs-of-Buchi-automata" class="headerlink" title="Runs of Büchi automata"></a>Runs of Büchi automata</h3><p>A run in a Büchi automaton has to transition infinitely many times, and starts with the initial state.</p><blockquote><p>$\textbf{Definition 2.2. } \text{ An } \textit{run } \text{of an automaton $\mathcal{A}$ on an infinite input word $\alpha$ is an } \newline<br>\text{infinite sequence of states $r&#x3D;r(0)r(1)r(2)\dots$ such that the following hold:}\newline<br>\begin{array}{l}<br>\hspace{1cm} \cdot \ r(0) \in I \newline<br>\hspace{1cm} \cdot \ \text{for all } i \in \mathbb{N}, (r(i),\alpha(i),r(i+1))\in T<br>\end{array}$</p></blockquote><p><a name="eg1"></a></p><p>$\textbf{Example 2.2.}$ Below is a graphical representation of an automation over:</p><ul><li>alphabet $\Sigma &#x3D; \lbrace a,b\rbrace$, and with</li><li>set of states $Q &#x3D;\lbrace A,B,C,D\rbrace$,</li><li>initial set of states $I &#x3D;\lbrace A\rbrace$, and</li><li>set of transitions $T &#x3D;\lbrace (A,a,B),(B,a,C),(C,b,D),(D,b,A)\rbrace$</li></ul><p><img src="/images/notes/uds/agv/2_1_eg.png"></p><p>On the infinite input word $aabbaabb\dots$, the (only) run of the automaton is $ABCDABCDABCD\dots$</p><h2 id="Deterministic-and-Complete-Automaton"><a href="#Deterministic-and-Complete-Automaton" class="headerlink" title="Deterministic and Complete Automaton"></a>Deterministic and Complete Automaton</h2><p>An automaton is <strong>deterministic</strong> if $|I|\leq 1$ and $\mid\lbrace (q,\sigma,q’)\in T \mid q’\in Q\rbrace|\leq 1$ for every $q\in Q$ and $\sigma\in\Sigma$.<br>Meaning that the automaton has <strong>exactly 1</strong> <em>initial state</em>, and <strong>exactly 1</strong> <em>transition</em> from $q$ to $q’$</p><p>An automaton is <strong>complete</strong> if $\mid\lbrace (q,\sigma,q’)\in T \mid q’\in Q\rbrace|\geq 1$ for every $q\in Q$.<br>Meaning that any two states $(q,q’)$ in the automaton should have <strong>at least 1</strong> transitions from $q$ to $q’$.</p><p>Therefore, the automaton in the example above is deterministic but not complete.</p><p>The transitions of an <em>deterministic and complete automata</em> are usually given as a function $\delta:Q \times\Sigma\rightarrow Q$.<br>Meaning that the set of all transitions $\delta$ contains <strong>any states</strong> with <strong>any letter</strong>.</p><h2 id="Accepted-Run"><a href="#Accepted-Run" class="headerlink" title="Accepted Run"></a>Accepted Run</h2><blockquote><p>$\textbf{Definition 2.3. } \text{ An automaton } \mathcal{A} \textit{ accepts } \text{ an infinite word $\alpha$ if: } \newline<br>\text{infinite sequence of states $r&#x3D;r(0)r(1)r(2)\dots$ such that the following hold:}\newline<br>\begin{array}{l}<br>\hspace{1cm} \cdot \ \text{there is a run $r$ of $\mathcal{A}$ on $\alpha$, and}\newline<br>\hspace{1cm} \cdot \ r \text{ is } \textit{accepting}:r\in Acc<br>\end{array}<br>\newline<br>\text{The } \textit{language recognized }\text{by $\mathcal{A}$ is defined as follows: }<br>\mathcal{L}(\mathcal{A}) &#x3D; \lbrace \alpha\in\Sigma^\omega\mid\mathcal{A}\text{ accepts }\alpha\rbrace$</p></blockquote><p>We say two automata are <strong>equivalent</strong> if they have the same language.</p><hr><p>Next chapter: <a href="../agv2-3/"></a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a>, <a href="https://en.wikipedia.org/wiki/Omega_language">Omega language</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 2.1 -- Büchi automata (Preliminaries)</title>
      <link href="/agv2-1/"/>
      <url>/agv2-1/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv1-3/">The Logic-Automata Connection</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="2-1-Preliminaries"><a href="#2-1-Preliminaries" class="headerlink" title="2.1 Preliminaries"></a>2.1 Preliminaries</h2><h3 id="Basic-math-notations"><a href="#Basic-math-notations" class="headerlink" title="Basic math notations"></a>Basic math notations</h3><ul><li>Natural numbers: $\mathbb{N} &#x3D; \lbrace 0,1,2,3\dots\rbrace$</li><li>Positive Natural numbers: $\mathbb{N}^+ &#x3D; \lbrace 1,2,3\dots\rbrace$</li><li>Numbers from $n$ to $m$: $[n,m] &#x3D; \lbrace n,n+1,\dots,m\rbrace$ For $n,m\in \mathbb{N}$ with $n\leq m$</li><li>Numbers from $0$ to $m$: $[m] &#x3D; \lbrace 0,1,\dots,m\rbrace$</li></ul><h3 id="Alphabet-and-Letter"><a href="#Alphabet-and-Letter" class="headerlink" title="Alphabet and Letter"></a>Alphabet and Letter</h3><ul><li><strong>Alphabet</strong> a nonempty, finite set of symbols, usually denoted by $\Sigma$</li><li><strong>Letter</strong>: elements of an <em>alphabets</em>, denoted by $\sigma$</li></ul><h3 id="Finite-and-Infinite-Word"><a href="#Finite-and-Infinite-Word" class="headerlink" title="Finite and Infinite Word"></a>Finite and Infinite Word</h3><ul><li><strong>Finite Words</strong>: concatenation $w&#x3D;w(0)w(1)\dots w(n-1)$ of <em>finitely many letters</em> of $\Sigma$</li><li><strong>Infinite Words</strong>: $\alpha$ (will be explained in <a href="../agv2-3/#inf">chapter 2.3</a></li><li><strong>$n$-th letter</strong> of word $w$ : $ w(n)$ for each $n \in [|w| - 1]$</li><li><strong>Length</strong> of words $w$ : $ |w|$</li><li>set of all <strong>finite words</strong>: $ \Sigma^*$</li><li>set of all <strong>non-empty finite words</strong> : $ \Sigma^+ &#x3D; \Sigma^* \backslash \lbrace \epsilon \rbrace$</li><li>set of all <strong>infinite words</strong> : $ \Sigma^\omega$</li></ul><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><ul><li>language over <strong>finite words</strong> ($\omega$<strong>-language</strong>) : each subset of $\Sigma^*$</li><li>language over <strong>infinite words</strong> ($\omega$<strong>-language</strong>) : each subset of $\Sigma^\omega$</li></ul><hr><p>Next chapter: <a href="../agv2-2/">Automata over Infinite Words</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a>, <a href="https://en.wikipedia.org/wiki/Omega_language">Omega language</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 1.3 -- The Logic-Automata Connection</title>
      <link href="/agv1-3/"/>
      <url>/agv1-3/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv1-2/">Synthesis</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Verification-or-Synthesis"><a href="#Verification-or-Synthesis" class="headerlink" title="Verification or Synthesis"></a>Verification or Synthesis</h2><p>In applications like <a href="../agv1-1/">verification</a> and <a href="../agv1-2/">synthesis</a>, the automata- and game-theoretic machinery is usually “hidden” behind a logical formulation of the problem.</p><p><img src="/images/notes/uds/agv/1_3_logic.png"></p><h3 id="Logics-with-corresponding-Automata"><a href="#Logics-with-corresponding-Automata" class="headerlink" title="Logics with corresponding Automata"></a>Logics with corresponding Automata</h3><blockquote><p><strong>S1S</strong>‘s expressiveness exceeds that of <strong>LTL</strong>, and<br><strong>S2S</strong>‘s expressiveness exceeds that of <strong>CTL*</strong> (on binary trees)</p></blockquote><table><thead><tr><th align="left">Logic</th><th align="left">Usage</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><strong>Linear-time temporal logic (LTL)</strong></td><td align="left">sets of infinite <strong>words</strong></td><td align="left">$\square \Diamond \ell_1$</td></tr><tr><td align="left"><strong>Computation-tree logic (CTL &#x2F; CTL*)</strong></td><td align="left">sets of infinite <strong>trees</strong></td><td align="left">$\textsf{EF}\ell_1 \wedge \textsf{EF}m_1$</td></tr><tr><td align="left"><strong>Monadic second-order logic with one successor (S1S)</strong></td><td align="left">logic over infinite <strong>words</strong></td><td align="left">$\forall x . x \in P \rightarrow S(x) \in P$</td></tr><tr><td align="left"><strong>Monadic second-order logic with two successors (S2S)</strong></td><td align="left">logic over infinite <strong>binary trees</strong></td><td align="left">$\forall x . x \in P \rightarrow S_1(x) \in P \vee S_2(x) \in P$</td></tr></tbody></table><h3 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h3><ul><li>$\square \Diamond \ell_1$<br>$P_0$ is infinitely often at location $\ell_1$.</li><li>$\textsf{EF}\ell_1 \wedge \textsf{EF}m_1$<br>There exists a computation path in which $P_0$ reaches location $\ell_1$, and<br>there is a (possibly different) computation path in which $P_1$ reaches location $m_1$.</li><li>$\forall x . x \in P \rightarrow S(x) \in P$<br>A (given) set of natural numbers $P$ is either empty, or<br>consists of all positions starting from some position of the word.</li><li>$\forall x . x \in P \rightarrow S_1(x) \in P \vee S_2(x) \in P$<br>A (given) set of nodes $P$ contains from each node $n \in P$ an entire path starting in $n$.</li></ul><p>For example, <strong>mutual exclusion</strong> property can be expressed using <strong>linear-time temporal logic (LTL)</strong>:<br>$$\square \neg (\ell_1 \wedge m_1)$$</p><h2 id="Satisfiability-problem"><a href="#Satisfiability-problem" class="headerlink" title="Satisfiability problem"></a>Satisfiability problem</h2><p>Other than verification and synthesis, another important application of the connection between logic and automata is to decide the <em>satisfiability</em> problem of the various logics.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>We want to know if there exist two natural numbers $x$ and $y$ such that $x&#x3D;y+1$ and $y&#x3D;x+1$.<br>This can be expressed as the <strong>S1S</strong> formula $x&#x3D;S(y) \wedge y&#x3D;S(x)$, translate each conjunct into an automaton:</p><p><img src="/images/notes/uds/agv/1_3_automaton.png"></p><p><strong>Alphabet</strong>: subsets of $\lbrace x,y\rbrace$.</p><p>There does not exist a word that is accepted by both automaton. Hence, the formula is unsatisfiable.</p><hr><p>Next chapter: <a href="../agv2-1/">Büchi automata (Preliminaries)</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 1.2 -- Synthesis</title>
      <link href="/agv1-2/"/>
      <url>/agv1-2/</url>
      
        <content type="html"><![CDATA[<p>Previous chapter: <a href="../agv1-1/">Model Checking</a></p><blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Synthesis"><a href="#Synthesis" class="headerlink" title="Synthesis"></a>Synthesis</h2><p>In synthesis, we check automatically if there <em>exists</em> a program that satisfies a given specification.</p><p>If the answer is yes, we construct such a program.</p><p>We solve it by determine the winner of a <strong>two-player game</strong> between a <em>system player</em> and an <em>environment player</em>.</p><table><thead><tr><th align="left"></th><th align="left">Task</th><th align="left">Goal</th></tr></thead><tbody><tr><td align="left"><strong>System player</strong></td><td align="left">choose the <strong>outputs</strong> of the system</td><td align="left"><strong>meet</strong> the specification</td></tr><tr><td align="left"><strong>Environment player</strong></td><td align="left">choose the <strong>inputs</strong> of the system</td><td align="left"><strong>falsify</strong> the specification</td></tr></tbody></table><p>Therefore, the specification is satisfied if the <strong>System player</strong> wins.<br>Such <strong>winning strategy</strong> can be translated into a program that is guaranteed to satisfy the specification.</p><h3 id="Example-coffee-machine"><a href="#Example-coffee-machine" class="headerlink" title="Example: coffee machine"></a>Example: coffee machine</h3><p>In this example, we assume there’s a machine that “outputs coffee” whenever users press a button.</p><p><strong>Set of</strong> $AP &#x3D; \lbrace bu, co\rbrace$, where input $AP_I &#x3D; \lbrace bu\rbrace$ and output $AP_O &#x3D; \lbrace co\rbrace$.</p><p><strong>Specification</strong>: $co$ should hold iff. $bu$ holds in every step.</p><p><img src="/images/notes/uds/agv/1_2_coffee.png"></p><p>From this automaton, we construct a <em><strong>game arena</strong></em> where in each round,</p><ol><li>Environment player chooses the input ($bu$ or $\neg bu$)</li><li>System player chooses the output ($co$ or $\neg co$)</li></ol><p>States of the game keep track of the corresponding state of the automaton,<br>then we can determine who is the winner for each possible play.</p><p><img src="/images/notes/uds/agv/1_2_game.png"></p><p>Here, system player gets to choose the next move with circles, and environment player choose with squares.</p><p>System player has a simple winning strategy from starting position $t_0$:</p><blockquote><p>react input $bu$ with output $co$, and react input $\neg bu$ with output $\neg co$</p></blockquote><p>In this way, the play visits $t_0$ infinitely often, which proves that it satisfies the specification.</p><hr><p>Next chapter: <a href="../agv1-3/">The Logic-Automata Connection</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Program_synthesis">Program synthesis</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGV 1.1 -- Model Checking</title>
      <link href="/agv1-1/"/>
      <url>/agv1-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Model-Checking"><a href="#Model-Checking" class="headerlink" title="Model Checking"></a>Model Checking</h2><p>Given a <strong>system model</strong>, we try to check whether it meets its <strong>specification</strong> <em>automatically</em> and <em>exhaustively</em>.<br>To describe&#x2F;represent the <strong>system</strong> and <strong>specification</strong>, we use <strong>Automata over infinite objects</strong>.</p><h3 id="Verification-Problem"><a href="#Verification-Problem" class="headerlink" title="Verification Problem"></a>Verification Problem</h3><p>The verification problem can be solved by:</p><blockquote><p>Constructing the <strong>intersection</strong> of system, with an automaton for the <strong>negation of the specification</strong>,<br>then checking whether the language of the resulting automaton is <strong>empty</strong>.</p></blockquote><p>$\textbf{Example 1.1. } \text{Consider the concurrent program }\small{\text{TURN}}:$<br>$$<br>\text{local $t$: boolean where initially $t$ &#x3D; $false$}<br>\newline<br>P_0::<br>\left[ \begin{array}{l}<br>  \text{loop forever do}<br>  \newline<br>  \hspace{1cm}<br>  \left[ \begin{array}{l}<br>    \ell_0: \text{await }\neg t; \newline<br>    \ell_1: \text{critical;} \newline<br>    \ell_2: t :&#x3D; true; \newline<br>  \end{array} \right]<br>\end{array} \right]<br>\mid\mid P_1::<br>\left[ \begin{array}{l}<br>  \text{loop forever do}<br>  \newline<br>  \hspace{1cm}<br>  \left[ \begin{array}{l}<br>    m_0: \text{await } t; \newline<br>    m_1: \text{critical;} \newline<br>    m_2: t :&#x3D; false; \newline<br>  \end{array} \right]<br>\end{array} \right]<br>$$</p><p>The example above is a simple solution to the <strong>mutual exclusion problem</strong>:<br>it ensures that at any given point of time, <strong>at most one</strong> process is in the critical region.</p><h3 id="From-Program-to-automaton"><a href="#From-Program-to-automaton" class="headerlink" title="From Program to automaton"></a>From Program to automaton</h3><p>To represent the above program using automaton, we need to define an <strong>alphabet $\Sigma$</strong>.</p><p>Firstly, we fix a set of <strong>atomic propositions (AP)</strong>, that is (potentially) relevant to the program states.<br>For the program in $\small{\text{Example 1.1}}$, $AP &#x3D; \lbrace\ell_0,\ell_1,\ell_2,m_0,m_1,m_2,t\rbrace$.<br>i.e. The present program location and the current value of $t$.</p><p>Then, we define the <strong>alphabet</strong> as $\Sigma &#x3D; 2^{AP}$, the set of subsets of $AP$.<br>An $AP$ is included in the subset if it is currently $true$.</p><p><img src="/images/notes/uds/agv/1_1_turn.png"></p><p>This automaton is a <em><strong>safety automaton</strong></em>, it accepts all <strong>infinite repetitons</strong> of the sequence<br>$\lbrace\ell_0,m_0\rbrace \lbrace\ell_1,m_0\rbrace \lbrace\ell_2,m_0\rbrace \lbrace\ell_0,m_0,t\rbrace \lbrace\ell_0,m_2,t\rbrace$</p><h2 id="Automata-Verification"><a href="#Automata-Verification" class="headerlink" title="Automata Verification"></a>Automata Verification</h2><p>To verify $\small{\text{TURN}}$ satisfies the <strong>mutual exclusion</strong> property ($P_0$ and $P_1$ are never in $\ell_1$ and $m_1$ at the same time),<br>we build an automaton that <strong>represents the negation</strong> (eventually $P_0$ and $P_1$ are simultaneously in location 01):</p><p><img src="/images/notes/uds/agv/1_1_neg.png"></p><p>This automaton is a <em><strong>Büchi automaton</strong></em> with accepting state $t_1$.</p><p>A <strong>word</strong> is accepted if $t_1$ is visited <strong>infinitely often</strong>.</p><p>For every word accepted by the <em>system automaton</em>, this <em>property automaton</em> stays in $t_0$ forever and therefore does not accept the word.<br>This means there does not exist an infinite sequence that <strong>generated by the program</strong>, and<br><strong>accepted by the negation automaton</strong> of the specification. In other words, $\small{\text{TURN}}$ is <strong>correct</strong>.</p><hr><p>Next post: <a href="../agv1-2/">Synthesis</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/B%C3%BCchi_automaton">Büchi automaton</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 197. Rising Temperature</title>
      <link href="/sql50-197/"/>
      <url>/sql50-197/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Weather"><a href="#Table-name-Weather" class="headerlink" title="Table name: Weather"></a>Table name: <code>Weather</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">recordDate</td><td align="left">date</td></tr><tr><td align="left">temperature</td><td align="left">int</td></tr></tbody></table><p>There are no different rows with the same <code>recordDate</code>.<br>This table contains information about the <code>temperature</code> on a certain day.</p><blockquote><p>Write a solution to find all <code>dates&#39; id</code> with higher temperatures compared to its <strong>previous dates</strong> (yesterday).<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>Here, we need to learn how to handle the datatype <code>date</code>.<br>To modify the date, we can use <code>INTERVAL</code> keyword, or <code>DATEADD()</code> function.</p><h3 id="INTERVAL"><a href="#INTERVAL" class="headerlink" title="INTERVAL &lt;value&gt; &lt;unit&gt;"></a><code>INTERVAL &lt;value&gt; &lt;unit&gt;</code></h3><p>Interval is a special datatype, that can interact with <code>time</code> and <code>date</code>.</p><p>Interval unit includes<br><strong>microsecond</strong>, <strong>millisecond</strong>, <strong>second</strong>, <strong>minute</strong>, <strong>hour</strong>, <strong>day</strong>, <strong>week</strong>, <strong>month</strong>, <strong>year</strong>, <strong>decade</strong>, <strong>century</strong>, <strong>millennium</strong></p><p>For example, <code>&#39;2001-09-28&#39; + INTERVAL 1 DAY</code> → <code>2002-09-28</code></p><h3 id="DATEADD"><a href="#DATEADD" class="headerlink" title="DATEADD(&lt;interval&gt;, &lt;number&gt;, &lt;date&gt;)"></a><code>DATEADD(&lt;interval&gt;, &lt;number&gt;, &lt;date&gt;)</code></h3><p>Similarly, we can use DATEADD() to modify data with datatype <code>date</code>.</p><p><code>DATEADD(year, 1, &#39;2001-09-28&#39;)</code> → <code>2002-09-28</code></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT w1.id FROM Weather w1 JOIN Weather w2ON w1.recordDate = w2.recordDate + INTERVAL 1 DAYWHERE w1.temperature &gt; w2.temperature;  </code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1581. Customer Who Visited but Did Not Make Any Transactions</title>
      <link href="/sql50-1581/"/>
      <url>/sql50-1581/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Visits"><a href="#Table-name-Visits" class="headerlink" title="Table name: Visits"></a>Table name: <code>Visits</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">visit_id</td><td align="left">int</td></tr><tr><td align="left">customer_id</td><td align="left">int</td></tr></tbody></table><p>This table contains information about the <code>customers</code> who visited the mall.</p><h3 id="Table-name-Transactions"><a href="#Table-name-Transactions" class="headerlink" title="Table name: Transactions"></a>Table name: <code>Transactions</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">transaction_id</td><td align="left">int</td></tr><tr><td align="left">visit_id</td><td align="left">int</td></tr><tr><td align="left">amount</td><td align="left">int</td></tr></tbody></table><p>This table contains information about the <code>transactions</code> made during the visit_id.</p><blockquote><p>Write a solution to find the <code>IDs of the users</code> who visited <strong>without making any transactions</strong>, and<br>the <strong>number of times</strong> they made these types of visits.<br>Return the result table sorted in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>This is another typical <code>JOIN</code> query question.<br>The tricky part is the column we join on doesn’t necessarily be selected.</p><p>Moreover, we can control which rows to be joined using <code>WHERE</code>, as simple <code>SELECT</code>.</p><p>Lasting to remember is to use <code>GROUP BY</code> for your <code>COUNT()</code> function,<br>to make sure they counted separately based on <code>customer_id</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT customer_id, count(*) AS count_no_transFROM VisitsLEFT JOIN Transactions ON Visits.visit_id=Transactions.visit_idWHERE transaction_id IS NULLGROUP BY customer_id</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1068. Product Sales Analysis I</title>
      <link href="/sql50-1068/"/>
      <url>/sql50-1068/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Sales"><a href="#Table-name-Sales" class="headerlink" title="Table name: Sales"></a>Table name: <code>Sales</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">sale_id</td><td align="left">int</td></tr><tr><td align="left">product_id</td><td align="left">int</td></tr><tr><td align="left">year</td><td align="left">int</td></tr><tr><td align="left">quantity</td><td align="left">int</td></tr><tr><td align="left">price</td><td align="left">int</td></tr></tbody></table><p>Each row of this table shows a sale on the product <code>product_id</code> in a certain year.<br>Note that the <code>price</code> is per unit.</p><h3 id="Table-name-Product"><a href="#Table-name-Product" class="headerlink" title="Table name: Product"></a>Table name: <code>Product</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">product_id</td><td align="left">int</td></tr><tr><td align="left">product_name</td><td align="left">varchar</td></tr></tbody></table><p>Each row of this table indicates the <code>product name</code> of each product.</p><blockquote><p>Write a solution to report the <code>product_name</code>, <code>year</code>, and <code>price</code> for each <code>sale_id</code> in the <code>Sales</code> table.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>This question is a basic usage of <code>JOIN</code> query.</p><p>Just be careful on which table you are referring when you select the columns.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT Product.product_name, Sales.year, Sales.price FROM Sales INNER JOIN Product ON Sales.product_id = Product.product_id;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1517. Find Users With Valid E-Mails</title>
      <link href="/sql50-1517/"/>
      <url>/sql50-1517/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name"><a href="#Table-name" class="headerlink" title="Table name: &#96;&#96;"></a>Table name: &#96;&#96;</h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">user_id</td><td align="left">int</td></tr><tr><td align="left">name</td><td align="left">varchar</td></tr><tr><td align="left">mail</td><td align="left">varchar</td></tr></tbody></table><p>This table contains information of the <code>users</code> signed up in a website. Some <code>e-mails</code> are invalid.</p><p>A valid <code>e-mail</code> has a <strong>prefix name</strong> and a <strong>domain</strong>.</p><p><strong>domain</strong>: <code>@leetcode.com</code>.<br><strong>prefix name</strong> is a string that may contain:</p><ul><li>letters (upper or lower case)</li><li>digits</li><li>underscore <code>_</code></li><li>period <code>.</code></li><li>dash <code>-</code></li></ul><p>(The prefix name <strong>must start with a letter.</strong>)</p><blockquote><p>Write a solution to find the users who have <strong>valid emails</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>For string validation, there is a powerful tool for pattern matching called <a href="https://evermap.com/RegularExpressions.asp">RegEx</a>.</p><p>In SQL, it provides the keyword <code>REGEXP</code> to enter your pattern for validation.<br>Here, we simply explain the patterns we used to match the requirement.</p><table><thead><tr><th align="left">Pattern</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left"><code>^</code></td><td align="left">Match Beginning of string</td></tr><tr><td align="left"><code>$</code></td><td align="left">Match The End of string</td></tr><tr><td align="left"><code>[a-zA-Z]</code></td><td align="left">Match any upper and lower case letter</td></tr><tr><td align="left"><code>[a-zA-Z0-9_.-]</code></td><td align="left">Match any upper and lower case letter, digits, underscore, period, dash</td></tr><tr><td align="left"><code>*</code></td><td align="left">Zero or more instances of string preceding it</td></tr></tbody></table><p>Therefore, <code>^[a-zA-Z][a-zA-Z0-9_.-]*</code> means:</p><blockquote><p>Begins the string with any upper or lower case letter,<br>follows by zero or more upper and lower case letter, digits, underscore, period, and&#x2F;or dash.</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT * FROM UsersWHERE mail REGEXP &#39;^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode\\.com$&#39;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1327. List the Products Ordered in a Period</title>
      <link href="/sql50-1327/"/>
      <url>/sql50-1327/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Products"><a href="#Table-name-Products" class="headerlink" title="Table name: Products"></a>Table name: <code>Products</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">product_id</td><td align="left">int</td></tr><tr><td align="left">product_name</td><td align="left">varchar</td></tr><tr><td align="left">product_category</td><td align="left">varchar</td></tr></tbody></table><p>This table contains data about the company’s products.</p><h3 id="Table-name-Orders"><a href="#Table-name-Orders" class="headerlink" title="Table name: Orders"></a>Table name: <code>Orders</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">product_id</td><td align="left">int</td></tr><tr><td align="left">order_date</td><td align="left">date</td></tr><tr><td align="left">unit</td><td align="left">int</td></tr></tbody></table><p>unit is the number of products ordered in order_date.</p><blockquote><p>Write a solution to get the <code>names</code> of products,<br>that have <strong>at least 100 units</strong> ordered <strong>in February 2020</strong> and their <code>amount</code>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><h3 id="Retrieve-the-amount-of-products"><a href="#Retrieve-the-amount-of-products" class="headerlink" title="Retrieve the amount of products"></a>Retrieve the amount of products</h3><p>Here, we can use <code>SUM()</code> function. Similar to <code>COUNT()</code>,<br>we can use <code>GROUP BY</code> so that multiple rows that contain the same <code>product_name</code> will sum up into one row.</p><h3 id="SELECT-based-on-Time-Range"><a href="#SELECT-based-on-Time-Range" class="headerlink" title="SELECT based on Time Range"></a>SELECT based on Time Range</h3><p>To validate the date, we can use <code>EXTRACT()</code> function.</p><pre><code class="sql">EXTRACT(part FROM date)</code></pre><p><code>&lt;part&gt;</code> in this function refers to specific piece of information about the time.</p><p>Here, we can use <code>YEAR_MONTH</code> to check whether the date in within <strong>February 2020</strong>.</p><p>For all possible parts defined by SQL, you may check the list <a href="#list">below</a>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT p.product_name, SUM(o.unit) AS unitFROM Products p JOIN Orders o ON p.product_id = o.product_id     AND EXTRACT(YEAR_MONTH FROM order_date) = 202002GROUP BY product_nameHAVING unit &gt;= 100</code></pre><p><a name="list"></a></p><h2 id="List-of-part-in-EXTRACT-function"><a href="#List-of-part-in-EXTRACT-function" class="headerlink" title="List of part in EXTRACT() function"></a>List of <code>part</code> in <code>EXTRACT()</code> function</h2><p>Here’s the list of all possible component you can extract from date:</p><table><thead><tr><th align="left">Parts</th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">MICROSECOND</td><td align="left">WEEK</td><td align="left">MINUTE_MICROSECOND</td><td align="left">DAY_MICROSECOND</td></tr><tr><td align="left">SECOND</td><td align="left">MONTH</td><td align="left">MINUTE_SECOND</td><td align="left">DAY_SECOND</td></tr><tr><td align="left">MINUTE</td><td align="left">QUARTER</td><td align="left">HOUR_MICROSECOND</td><td align="left">DAY_MINUTE</td></tr><tr><td align="left">HOUR</td><td align="left">YEAR</td><td align="left">HOUR_SECOND</td><td align="left">DAY_HOUR</td></tr><tr><td align="left">DAY</td><td align="left">SECOND_MICROSECOND</td><td align="left">HOUR_MINUTE</td><td align="left">YEAR_MONTH</td></tr></tbody></table><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1484. Group Sold Products By The Date</title>
      <link href="/sql50-1484/"/>
      <url>/sql50-1484/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Activities"><a href="#Table-name-Activities" class="headerlink" title="Table name: Activities"></a>Table name: <code>Activities</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">sell_date</td><td align="left">date</td></tr><tr><td align="left">product</td><td align="left">varchar</td></tr></tbody></table><p>Each row of this table contains the product name and the date it was sold in a market.</p><blockquote><p>Write a solution to find for each <code>date</code> the number of different products sold and their <code>names</code>.<br>The sold products names for each date should be <strong>sorted lexicographically</strong>.<br>Return the result table <strong>ordered by sell_date</strong>.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>Again, there are two tasks we need to solve:</p><ol><li>Count how many types of products are sold in one day</li><li>List all types of items into a single column</li></ol><h3 id="Type-of-Items"><a href="#Type-of-Items" class="headerlink" title="Type of Items"></a>Type of Items</h3><p>We can simply count how many products are sold using <code>COUNT</code>, groupped by the date they belong to:</p><pre><code class="sql">SELECT COUNT(*) AS num_sold, FROM ActivitiesGROUP BY sell_date</code></pre><p>However, if a product is sold twice in one day, they will be counted twice as well.<br>Since the question asked for <strong>the number of different products sold</strong>,<br>we need to specify the column we are counting, and use the keyword <code>DINSTINCT</code> to remove duplicates:</p><pre><code class="sql">SELECT COUNT(DISTINCT product) AS num_sold, FROM ActivitiesGROUP BY sell_date</code></pre><h3 id="GROUP-CONCAT-Rolling-up-multiple-rows-in-single-row"><a href="#GROUP-CONCAT-Rolling-up-multiple-rows-in-single-row" class="headerlink" title="GROUP_CONCAT(): Rolling up multiple rows in single row"></a>GROUP_CONCAT(): Rolling up multiple rows in single row</h3><p>To roll data from multiple rows in single row, we may use the <code>GROUP_CONCAT()</code> function,<br>and below is the syntax:</p><pre><code class="sql">GROUP_CONCAT(expr   [ORDER BY &#123;unsigned_integer | col_name | expr&#125; ASC | DESC]    [SEPARATOR str_val])</code></pre><ul><li>It can be sorted with respect to other column by using <code>ORDER BY</code> inside the function</li><li>You may define custom string as the <code>separator</code> of the output (default is comma)</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT sell_date, COUNT(DISTINCT product) AS num_sold,     GROUP_CONCAT(DISTINCT product) AS productsFROM ActivitiesGROUP BY sell_date</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 176. Second Highest Salary</title>
      <link href="/sql50-176/"/>
      <url>/sql50-176/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name"><a href="#Table-name" class="headerlink" title="Table name: &#96;&#96;"></a>Table name: &#96;&#96;</h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">salary</td><td align="left">int</td></tr></tbody></table><p>Each row of this table contains information about the <code>salary</code> of an <code>employee</code>.</p><blockquote><p>Write a solution to find the <strong>second highest distinct</strong> <code>salary</code> from the Employee table.<br>If there is no second highest salary, return <code>null</code>.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>The key idea of this question is to get the <strong>second</strong> value. Here I have two ideas that come to my mind immediately</p><ol><li>First, order the list according to salary, then fetch the second row.</li><li>First, find the highest salary, then do another <code>SELECT</code> query based on the highest salary.</li></ol><h3 id="1-Using-LIMIT-and-OFFSET"><a href="#1-Using-LIMIT-and-OFFSET" class="headerlink" title="1. Using LIMIT and OFFSET"></a>1. Using LIMIT and OFFSET</h3><p>Using <code>LIMIT</code> and <code>OFFSET</code>, we can simply retrieve the second row of a database:</p><pre><code class="sql">SELECT DISTINCT Salary     FROM Employee     ORDER BY salary DESC     LIMIT 1 OFFSET 1</code></pre><p>Here, we used <code>ORDER BY salary DESC</code> and <code>DISTINCT</code> to make sure the second row contains the second highest salary.<br>Then <code>LIMIT 1</code> constraints there will be only one row returned, <code>OFFSET 1</code> means to skip 1 row before fetching.</p><p>However, this query won’t return <code>null</code> if there isn’t a second row.</p><p>To solve the problem, we can wrap this query by another <code>SELECT</code> query.</p><h3 id="2-Recursive-SELECT"><a href="#2-Recursive-SELECT" class="headerlink" title="2. Recursive SELECT"></a>2. Recursive SELECT</h3><p>There will be two <code>SELECT</code> function, the <code>SELECT</code> in <code>WHERE</code> clause returns the highest salary:</p><pre><code class="sql">WHERE salary &lt; (SELECT MAX(salary) FROM Employee)</code></pre><p>So that the <code>SELECT</code> query outside can directly compare with this and thus it returns the second highest salary.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Using-LIMIT-and-OFFSET"><a href="#Using-LIMIT-and-OFFSET" class="headerlink" title="Using LIMIT and OFFSET"></a>Using LIMIT and OFFSET</h3><pre><code class="sql">SELECT(    SELECT DISTINCT Salary     FROM Employee     ORDER BY salary DESC     LIMIT 1 OFFSET 1 )AS SecondHighestSalary;</code></pre><h3 id="Recursive-SELECT"><a href="#Recursive-SELECT" class="headerlink" title="Recursive SELECT"></a>Recursive SELECT</h3><pre><code class="sql">SELECT MAX(salary) AS SecondHighestSalary FROM EmployeeWHERE salary &lt; (SELECT MAX(salary) FROM Employee);</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 196. Delete Duplicate Emails</title>
      <link href="/sql50-196/"/>
      <url>/sql50-196/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Person"><a href="#Table-name-Person" class="headerlink" title="Table name: Person"></a>Table name: <code>Person</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">email</td><td align="left">varchar</td></tr></tbody></table><p>Each row of this table contains an <code>email</code>. The emails will <strong>not contain uppercase letters</strong>.</p><blockquote><p>Write a solution to <strong>delete all duplicate emails</strong>, keeping only one unique email with the <strong>smallest id</strong>.<br>For SQL users, please note that you are supposed to write a <code>DELETE</code> statement and not a <code>SELECT</code> one.<br>The final order of the table does not matter.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>Usually, people will simply replace the old table with the new table using <code>SELECT</code> to remove the duplicates.<br>The tricky part of this question is that you cannot create a new table, as the system only checks the original table <code>Person</code>.</p><p>Since we cannot use <code>SELECT</code>, the only way to filter out unwanted rows is to use <code>WHERE</code> or <code>HAVING</code>.</p><p>First of all, we can call the same table twice by giving them different name temporarily, so that we can compare between rows,</p><p>We need to keep the same email which has smaller id, so <code>p.Id &gt; q_Id</code>, then we also need to nake sure that there are acutally duplicate email, so <code>p.Email=q.Email</code></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">DELETE p from Person p, Person q where p.Id&gt;q.Id AND q.Email=p.Email</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1527. Patients With a Condition</title>
      <link href="/sql50-1527/"/>
      <url>/sql50-1527/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Patients"><a href="#Table-name-Patients" class="headerlink" title="Table name: Patients"></a>Table name: <code>Patients</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">patient_id</td><td align="left">int</td></tr><tr><td align="left">patient_name</td><td align="left">varchar</td></tr><tr><td align="left">conditions</td><td align="left">varchar</td></tr></tbody></table><p><code>conditions</code> contains <strong>zero or more</strong> code separated by spaces.<br>This table contains information of the <code>patients</code> in the hospital.</p><blockquote><p>Write a solution to find the <code>patient_id</code>, <code>patient_name</code>, and <code>conditions</code> of the patients who have <strong>Type I Diabetes</strong>.<br>Type I Diabetes always starts with <code>DIAB1</code> prefix. Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><h3 id="SQL-LIKE-Operator"><a href="#SQL-LIKE-Operator" class="headerlink" title="SQL LIKE Operator"></a>SQL LIKE Operator</h3><p>In SQL, to extract data that contain certain specified pattern, we can use <code>LIKE</code> in the <code>WHERE</code> clause.<br>For example, we can use </p><pre><code class="sql">SELECT * FROM Patients WHERE conditions LIKE &#39;DIAB1%&#39;</code></pre><p>In here, <code>%</code> is a wildcard, refers to any number of characters can exist after the string <code>DIAB1</code>.<br><code>DIAB1</code>, <code>DIAB1234</code>, <code>DIAB1eg</code> are valid outputs.</p><p>There is another wildcard <code>_</code>, refers to exactly one single character.<br><code>aDIAB12</code>, <code>2DIAB1</code> are valid outputs of <code>_DIAB1</code></p><h3 id="Valid-outputs"><a href="#Valid-outputs" class="headerlink" title="Valid outputs"></a>Valid outputs</h3><p>In this question, <code>conditions</code> which contain valid <code>DIAB1</code> are either:</p><ul><li><code>DIAB1</code> is after some conditions, for exmaple <code>ACNE DIAB100</code>, or</li><li>the list of conditions begins with <code>DIAB1</code>, for example <code>DIAB100 MYOP</code>.</li></ul><p>Therefore, we have to include both cases with two separate <code>LIKE</code> operator.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT * FROM PatientsWHERE conditions LIKE &#39;% DIAB1%&#39; OR conditions LIKE &#39;DIAB1%&#39;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1667. Fix Names in a Table</title>
      <link href="/sql50-1667/"/>
      <url>/sql50-1667/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Users"><a href="#Table-name-Users" class="headerlink" title="Table name: Users"></a>Table name: <code>Users</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">user_id</td><td align="left">int</td></tr><tr><td align="left">name</td><td align="left">varchar</td></tr></tbody></table><p>This table contains the <code>user_id</code> and the <code>name</code> of the user. The <code>name</code> consists of <strong>only lowercase and uppercase</strong> characters.</p><blockquote><p>Write a solution to fix the names so that <strong>only the first character is uppercase</strong> and the <strong>rest are lowercase</strong>.<br>Return the result table <strong>ordered</strong> by <code>user_id</code>.<br>The result format is in the following example.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>We can split the tasks into three part.</p><ol><li>Split the name into <strong>first character</strong> and the <strong>remaining characters</strong> → <code>SUBSTRING()</code></li><li>Modify them into <strong>upper case</strong> and <strong>lower case</strong> respectively → <code>UPPER()</code> and <code>LOWER()</code></li><li>Order the result by <code>user_id</code> → <code>ORDER BY</code></li></ol><h3 id="SQL-SUBSTRING-Function"><a href="#SQL-SUBSTRING-Function" class="headerlink" title="SQL SUBSTRING() Function"></a>SQL SUBSTRING() Function</h3><p>For extracting characters from a string, we can use the function <code>SUBSTRING(&lt;string&gt;, start, end)</code>.<br>For example,</p><pre><code class="sql">SUBSTRING(name, 1, 1)</code></pre><p>returns the first character from string <code>name</code>,<br>and <code>name</code> without the first letter.</p><pre><code class="sql">SUBSTRING(name, 2, LENGTH(name))</code></pre><h3 id="SQL-UPPER-LOWER-and-CONCAT"><a href="#SQL-UPPER-LOWER-and-CONCAT" class="headerlink" title="SQL UPPER(), LOWER(), and CONCAT()"></a>SQL UPPER(), LOWER(), and CONCAT()</h3><p>For text converting, we can simply use <code>UPPER(&lt;text&gt;)</code> and <code>LOWER(&lt;text&gt;)</code>.<br>Then we can combine two substring together by using</p><pre><code class="sql">CONCAT(&lt;string1&gt;, &lt;string2&gt;, ... , &lt;string_n&gt;)</code></pre><p>and finally, use <code>ORDER BY user_id</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT user_id,   CONCAT(    UPPER(SUBSTRING(name, 1, 1)),     LOWER(SUBSTRING(name, 2, LENGTH(name)))  ) AS nameFROM UsersORDER BY user_id</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1378. Replace Employee ID With The Unique Identifier</title>
      <link href="/sql50-1378/"/>
      <url>/sql50-1378/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Employees"><a href="#Table-name-Employees" class="headerlink" title="Table name: Employees"></a>Table name: <code>Employees</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">name</td><td align="left">varchar</td></tr></tbody></table><p>id is the primary key (column with unique values) for this table.<br>Each row of this table contains the id and the name of an employee in a company.</p><h3 id="Table-name-EmployeeUNI"><a href="#Table-name-EmployeeUNI" class="headerlink" title="Table name: EmployeeUNI"></a>Table name: <code>EmployeeUNI</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">unique_id</td><td align="left">int</td></tr></tbody></table><p>(<code>id</code>, <code>unique_id</code>) is the primary key (combination of columns with unique values) for this table.<br>Each row of this table contains the id and the corresponding unique id of an employee in the company.</p><blockquote><p>Write a solution to show the <code>unique ID</code> of each user,<br>If a user does not have a unique ID replace just show <strong>null</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>In this question, we need to use <code>JOIN</code>:</p><pre><code class="sql">FROM &lt;table1&gt;JOIN &lt;table2&gt; ON &lt;table1.column_n&gt; = &lt;table2.column_m&gt;</code></pre><p><code>JOIN</code> always comes with <code>ON</code>, which indicates the column used as a reference for joining.<br>Also, there are different types referring to different usage.</p><p><img src="/images/leetcode/sql50/sql_join.png"></p><p>We are trying to include <code>unique_id</code> to the table <code>Employees</code><br>Since we need to include every users even if they don’t have a unique ID, we need to use <code>LEFT JOIN</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT EmployeeUNI.unique_id, Employees.name FROM Employees LEFT JOIN EmployeeUNI ON EmployeeUNI.id = Employees.id;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1683. Invalid Tweets</title>
      <link href="/sql50-1683/"/>
      <url>/sql50-1683/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Tweets"><a href="#Table-name-Tweets" class="headerlink" title="Table name: Tweets"></a>Table name: <code>Tweets</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">tweet_id</td><td align="left">int</td></tr><tr><td align="left">content</td><td align="left">varchar</td></tr></tbody></table><p><code>tweet_id</code> is the primary key (column with unique values) for this table.<br>This table contains all the tweets in a social media app.</p><blockquote><p>Write a solution to find the <code>IDs</code> of the <strong>invalid tweets</strong>.<br>The tweet is invalid if the <strong>number of characters</strong> used in the <code>content</code> of the tweet is <strong>strictly greater than 15</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>To check the number of character, we can use the <code>LENGTH(&lt;string&gt;)</code> function.</p><p>If you use this function on numbers (e.g. int), it will turn it into string and return <strong>number of digits</strong>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT tweet_id FROM Tweets WHERE LENGTH(content)&gt;15;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1148. Article Views I</title>
      <link href="/sql50-1148/"/>
      <url>/sql50-1148/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Views"><a href="#Table-name-Views" class="headerlink" title="Table name: Views"></a>Table name: <code>Views</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">article_id</td><td align="left">int</td></tr><tr><td align="left">author_id</td><td align="left">int</td></tr><tr><td align="left">viewer_id</td><td align="left">int</td></tr><tr><td align="left">view_date</td><td align="left">date</td></tr></tbody></table><p>There is <strong>no primary key</strong> (column with unique values) for this table, the table may have duplicate rows.</p><p>Each row of this table indicates that some <code>viewer</code> viewed an article (written by some <code>author</code>) on some <code>date</code>.</p><p>Note that equal <code>author_id</code> and <code>viewer_id</code> indicate the same person.</p><blockquote><p>Write a solution to find all the <strong>authors</strong> that viewed <strong>at least one of their own articles</strong>.<br>Return the result table sorted by id in <strong>ascending order</strong>.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>We have two tasks:</p><ol><li>Authors viewed their own articles → <code>WHERE author_id = viewer_id</code></li><li>Sort table by id in ascending order → <code>ORDER BY author_id ASC</code></li></ol><h3 id="SQL-ORDER-BY"><a href="#SQL-ORDER-BY" class="headerlink" title="SQL ORDER BY"></a>SQL ORDER BY</h3><pre><code class="sql">ORDER BY &lt;column1&gt;, &lt;column2&gt;, ... ASC|DESC;</code></pre><p>By default, <code>ORDER BY</code> sort rows in <strong>ascending order</strong>.</p><p>And if there are multiple columns, sort the rows according to the first column, and then the second column when the rows contain same values in the first column and so on.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT distinct author_id AS id FROM Views WHERE author_id = viewer_id ORDER BY author_id ASC</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 595. Big Countries</title>
      <link href="/sql50-595/"/>
      <url>/sql50-595/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-World"><a href="#Table-name-World" class="headerlink" title="Table name: World"></a>Table name: <code>World</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">varchar</td></tr><tr><td align="left">continent</td><td align="left">varchar</td></tr><tr><td align="left">area</td><td align="left">int</td></tr><tr><td align="left">population</td><td align="left">int</td></tr><tr><td align="left">gdp</td><td align="left">bigint</td></tr></tbody></table><p><code>name</code> is the primary key (column with unique values) for this table.</p><p>Each row of this table gives information about the name of a country,<br>the <code>continent</code> to which it belongs, its <code>area</code>, the <code>population</code>, and its <code>GDP value</code>.</p><h3 id="Big-Country"><a href="#Big-Country" class="headerlink" title="Big Country"></a>Big Country</h3><p>A country is <strong>big</strong> if:</p><ul><li>it has an <code>area</code> of <strong>at least three million</strong> (i.e., 3000000 km2), <strong>or</strong></li><li>it has a <code>population</code> of <strong>at least twenty-five million</strong> (i.e., 25000000).</li></ul><blockquote><p>Write a solution to find the <code>name</code>, <code>population</code>, and <code>area</code> of the <strong>big countries</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>Again we use <code>SELECT &lt;column_name&gt; FROM &lt;table_name&gt; WHERE &lt;conditions&gt;</code> to get the solution.</p><p>As question mention we should use <code>OR</code> and <strong>at least</strong> refers to <code>&gt;=</code>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT name, population, area FROM World WHERE area &gt;= 3000000 OR population &gt;= 25000000;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 584. Find Customer Referee</title>
      <link href="/sql50-584/"/>
      <url>/sql50-584/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Customer"><a href="#Table-name-Customer" class="headerlink" title="Table name: Customer"></a>Table name: <code>Customer</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">int</td></tr><tr><td align="left">name</td><td align="left">varchar</td></tr><tr><td align="left">referee_id</td><td align="left">int</td></tr></tbody></table><p><code>id</code> is the <code>primary key column</code> for this table.<br>Each row of this table indicates the <code>id</code> of a customer, their <code>name</code>, and the <code>id of the customer who referred them</code>.</p><blockquote><p>Find the <strong>names</strong> of the customer that are <strong>not referred by the customer with id &#x3D; 2</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>Again we use <code>SELECT &lt;column_name&gt; FROM &lt;table_name&gt; WHERE &lt;conditions&gt;</code> to get the solution.</p><p>The tricky part is some of the <code>referee_id</code> may contain <code>NULL</code> value.</p><h3 id="NULL-handling"><a href="#NULL-handling" class="headerlink" title="NULL handling"></a>NULL handling</h3><p>We may simply think that the solution is</p><pre><code class="sql">WHERE referee_id !=2</code></pre><p>However, <code>NULL</code> <strong>always</strong> return <code>false</code> in any comparison. For example:</p><pre><code class="sql">SELECT *FROM CustomerWHERE referee_id != 2 OR referee_id = 2</code></pre><p>This query will return all rows that their <code>referee_id</code> is not <code>NULL</code>. Because <code>NULL</code> returns <code>false</code> in both cases.</p><p>In order to retrieve rows that contain <code>NULL</code>, we have to use the keyword <code>IS NULL</code>.</p><p>For further explaination of NULL Handling in SQL, you may check the <a href="https://www.sqlite.org/nulls.html">sqlite documentation</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT &quot;name&quot; FROM Customer WHERE referee_id != 2 OR referee_id IS NULL;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 -- 1757. Recyclable and Low Fat Products</title>
      <link href="/sql50-1757/"/>
      <url>/sql50-1757/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Table-name-Products"><a href="#Table-name-Products" class="headerlink" title="Table name: Products"></a>Table name: <code>Products</code></h3><table><thead><tr><th align="left">Column Name</th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">product_id</td><td align="left">int</td></tr><tr><td align="left">low_fats</td><td align="left">enum</td></tr><tr><td align="left">recyclable</td><td align="left">enum</td></tr></tbody></table><p><code>product_id</code> is the primary key (column with unique values) for this table.</p><p><code>low_fats</code> is an <code>ENUM</code> of type (<code>Y</code>, <code>N</code>) where <code>Y</code> means this product is low fat and <code>N</code> means it is not.</p><p><code>recyclable</code> is an <code>ENUM</code> of types (<code>Y</code>, <code>N</code>) where <code>Y</code> means this product is recyclable and <code>N</code> means it is not.</p><blockquote><p>Write a solution to <strong>find the ids</strong> of products that are <strong>both low fat and recyclable</strong>.<br>Return the result table in any order.</p></blockquote><h2 id="Explaination"><a href="#Explaination" class="headerlink" title="Explaination"></a>Explaination</h2><p>This is one the most basic SQL <code>SELECT</code> query scenario,<br>by using <code>SELECT &lt;column_name&gt; FROM &lt;table_name&gt; WHERE &lt;conditions&gt;</code> you may get the solution easily.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><pre><code class="sql">SELECT product_id FROM Products WHERE low_fats = &quot;Y&quot; AND recyclable = &quot;Y&quot;;</code></pre><hr><p>More SQL 50 questions: <a href="../sql50/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 (Portal 🚪)</title>
      <link href="/sql50/"/>
      <url>/sql50/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a portal for my walkthroughs of SQL 50 on Leetcode</p></blockquote><p><a href="https://leetcode.com/studyplan/top-sql-50/">Link of Leetcode SQL 50</a></p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><ul><li><a href="../sql50-1757/">1757. Recyclable and Low Fat Products</a></li><li><a href="../sql50-584/">584. Find Customer Referee</a></li><li><a href="../sql50-595/">595. Big Countries</a></li><li><a href="../sql50-1148/">1148. Article Views I</a></li><li><a href="../sql50-1683/">1683. Invalid Tweets</a></li></ul><h2 id="Basic-Joins"><a href="#Basic-Joins" class="headerlink" title="Basic Joins"></a>Basic Joins</h2><ul><li><a href="../sql50-1378/">1378. Replace Employee ID With The Unique Identifier</a></li><li><a href="../sql50-1068/">1068. Product Sales Analysis I</a></li><li><a href="../sql50-1581/">1581. Customer Who Visited but Did Not Make Any Transactions</a></li><li><a href="../sql50-197/">197. Rising Temperature</a></li><li><a href="../sql50-1683/"></a></li></ul><h2 id="Basic-Aggregate-Functions"><a href="#Basic-Aggregate-Functions" class="headerlink" title="Basic Aggregate Functions"></a>Basic Aggregate Functions</h2><ul><li><a href="../sql50-1683/"></a></li></ul><h2 id="Sorting-and-Grouping"><a href="#Sorting-and-Grouping" class="headerlink" title="Sorting and Grouping"></a>Sorting and Grouping</h2><ul><li><a href="../sql50-1683/"></a></li></ul><h2 id="Advanced-Select-and-Joins"><a href="#Advanced-Select-and-Joins" class="headerlink" title="Advanced Select and Joins"></a>Advanced Select and Joins</h2><ul><li><a href="../sql50-1683/"></a></li></ul><h2 id="Subqueries"><a href="#Subqueries" class="headerlink" title="Subqueries"></a>Subqueries</h2><ul><li><a href="../sql50-1683/"></a></li></ul><h2 id="Advanced-String-Functions-Regex-Clause"><a href="#Advanced-String-Functions-Regex-Clause" class="headerlink" title="Advanced String Functions &#x2F; Regex &#x2F; Clause"></a>Advanced String Functions &#x2F; Regex &#x2F; Clause</h2><ul><li><a href="../sql50-1667/">1667. Fix Names in a Table</a></li><li><a href="../sql50-1683/">1527. Patients With a Condition</a></li><li><a href="../sql50-196/">196. Delete Duplicate Emails</a></li><li><a href="../sql50-176/">176. Second Highest Salary</a></li><li><a href="../sql50-1484/">1484. Group Sold Products By The Date</a></li><li><a href="../sql50-1327/">1327. List the Products Ordered in a Period</a></li><li><a href="../sql50-1517/">1517. Find Users With Valid E-Mails</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> SQL_50 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-5 -- Rimes with u &amp; yu (Phonology)</title>
      <link href="/canto1-5/"/>
      <url>/canto1-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><p>Previous lesson: <a href="../canto1-3/">Rimes with e</a></p><hr><p>In this lesson, we talk about Rimes with <code>u</code>, <code>yu</code>. Here we use <code>u</code> similar to languages like German or Italian.</p><p>And <code>yu</code> is equivalent to “ü” in German. Let’s take a look.</p><h2 id="Rimes-with-u"><a href="#Rimes-with-u" class="headerlink" title="Rimes with u"></a>Rimes with <code>u</code></h2><p>For <code>u</code>, <code>ui</code>, <code>un</code>, <code>ut</code>, u sounds like “oo” in “foo”.</p><p>For <code>ung</code> and <code>uk</code>, u sound like “one” in “tone”.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">oo in foo</td><td align="left"><ruby>夫<rp>(</rp><rt>fu1</rt><rp>)</rp></ruby></td><td align="left">ut</td><td align="left">oot in boot</td><td align="left"><ruby>闊<rp>(</rp><rt>fut3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">ui</td><td align="left">ewy in chewy<sup>1</sup></td><td align="left"><ruby>灰<rp>(</rp><rt>fui1</rt><rp>)</rp></ruby></td><td align="left">ung</td><td align="left">one in tone</td><td align="left"><ruby>風<rp>(</rp><rt>fung1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">un</td><td align="left">oon in cartoon</td><td align="left"><ruby>歡<rp>(</rp><rt>fun1</rt><rp>)</rp></ruby></td><td align="left">uk</td><td align="left">ook in cook</td><td align="left"><ruby>福<rp>(</rp><rt>fuk1</rt><rp>)</rp></ruby></td></tr></tbody></table><p><sup>1</sup>“Chewy” is two syllables, but in Cantonese this is a diphthong. So try to blend it into one sound, treat the “ew” as the major sound and the “j” as a small tip at the end of the syllable.</p><h2 id="Rimes-with-yu"><a href="#Rimes-with-yu" class="headerlink" title="Rimes with yu"></a>Rimes with <code>yu</code></h2><p>Unfortunately, in English there is no word sound exactly as <code>yu</code>.</p><p>But you can imitate it by positioning your tongue more forward, closer to your front teeth (not touching them!), and try to say the word “foo”.</p><p>In some accents, when people say the word “o<strong>ccu</strong>py” or “e<strong>du</strong>cation”, they may use the <code>yu</code> sound as well.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">yu</td><td align="left">u in occupy</td><td align="left"><ruby>書<rp>(</rp><rt>syu1</rt><rp>)</rp></ruby></td><td align="left">yut</td><td align="left">uned in tuned</td><td align="left"><ruby>雪<rp>(</rp><rt>syut3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">yun</td><td align="left">une in tune</td><td align="left"><ruby>酸<rp>(</rp><rt>syun1</rt><rp>)</rp></ruby></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="Learn-a-new-word-before-you-move-on"><a href="#Learn-a-new-word-before-you-move-on" class="headerlink" title="Learn a new word before you move on"></a>Learn a new word before you move on</h2><p>You may already know that <ruby>多謝<rp>(</rp><rt>do1 ze6</rt><rp>)</rp></ruby> means <strong>Thank you</strong>, but you can take one step further!</p><p>Try to use <ruby>感激不準<rp>(</rp><rt>gam2 gik1 bat1 zeon2</rt><rp>)</rp></ruby> or simply <ruby>多謝曬<rp>(</rp><rt>do1 ze6 saai3</rt><rp>)</rp></ruby> to show your appreciation.</p><p>You can use it in many scenario, and politeness is always the key to success.</p><p>So again… <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby>!</p><p>Next lesson: <a href="../canto1-6/">Tones</a></p><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-4 -- Rimes with i &amp; o (Phonology)</title>
      <link href="/canto1-4/"/>
      <url>/canto1-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><p>Previous lesson: <a href="../canto1-3/">Rimes with e</a></p><hr><p>In this lesson, we talk about Rimes with <code>i</code> and <code>o</code>. Both are pretty intuitive for English speakers.</p><h2 id="Rimes-with-i"><a href="#Rimes-with-i" class="headerlink" title="Rimes with i"></a>Rimes with <code>i</code></h2><p>For <code>i</code>, <code>iu</code>, <code>im</code>, <code>in</code>, <code>ip</code>, <code>it</code>, i sounds like “yee”. For example, “ee” in “see” or “keen”.</p><p>For <code>ing</code> and <code>ik</code>, i sound like “egg”. For example, “i” in “ignore” or “sing”.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ee in see</td><td align="left"><ruby>思<rp>(</rp><rt>si1</rt><rp>)</rp></ruby></td><td align="left">ip</td><td align="left">eep in weep</td><td align="left"><ruby>攝<rp>(</rp><rt>sip3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">iu</td><td align="left">eal in seal</td><td align="left"><ruby>燒<rp>(</rp><rt>siu1</rt><rp>)</rp></ruby></td><td align="left">it</td><td align="left">eet in meet</td><td align="left"><ruby>舌<rp>(</rp><rt>sit3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">im</td><td align="left">eam in beam</td><td align="left"><ruby>閃<rp>(</rp><rt>sim2</rt><rp>)</rp></ruby></td><td align="left">ing</td><td align="left">ing in sing</td><td align="left"><ruby>升<rp>(</rp><rt>sing1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">in</td><td align="left">een in seen</td><td align="left"><ruby>先<rp>(</rp><rt>sin1</rt><rp>)</rp></ruby></td><td align="left">ik</td><td align="left">ic in acidic</td><td align="left"><ruby>識<rp>(</rp><rt>sik1</rt><rp>)</rp></ruby></td></tr></tbody></table><h2 id="Rimes-with-o"><a href="#Rimes-with-o" class="headerlink" title="Rimes with o"></a>Rimes with <code>o</code></h2><p>Every Rime with <code>o</code> sounds like “oy” in “joy” or “ahoy”.</p><p>Except for <code>ou</code>, it sounds more like “oh”. For example, “ou” in “soul”.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">o</td><td align="left">ee in see</td><td align="left"><ruby>可<rp>(</rp><rt>ho2</rt><rp>)</rp></ruby></td><td align="left">ot</td><td align="left">ought in thought</td><td align="left"><ruby>渴<rp>(</rp><rt>hot3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">oi</td><td align="left">oy in joy</td><td align="left"><ruby>開<rp>(</rp><rt>hoi1</rt><rp>)</rp></ruby></td><td align="left">ok</td><td align="left">orch in orchestra</td><td align="left"><ruby>學<rp>(</rp><rt>hok6</rt><rp>)</rp></ruby></td></tr><tr><td align="left">on</td><td align="left">on in gone</td><td align="left"><ruby>看<rp>(</rp><rt>hon3</rt><rp>)</rp></ruby></td><td align="left">ou</td><td align="left">ou in soul</td><td align="left"><ruby>好<rp>(</rp><rt>hou2</rt><rp>)</rp></ruby></td></tr><tr><td align="left">ong</td><td align="left">ong in long</td><td align="left"><ruby>康<rp>(</rp><rt>hong1</rt><rp>)</rp></ruby></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="Learn-a-new-word-before-you-move-on"><a href="#Learn-a-new-word-before-you-move-on" class="headerlink" title="Learn a new word before you move on"></a>Learn a new word before you move on</h2><p>Excuse me, it’s time for your daily dose of Cantonese vocab!</p><ruby>唔好意思<rp>(</rp><rt>m4 hou2 ji3 si1</rt><rp>)</rp></ruby>, which means **Excuse me**!<p>You can use it in many scenario, and politeness is always the key to success.</p><p>So again… <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby>!</p><p>Next lesson: <a href="../canto1-5/">Rimes with u</a></p><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-3 -- Rimes with e (Phonology)</title>
      <link href="/canto1-3/"/>
      <url>/canto1-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><p>Previous lesson: <a href="../canto1-2/">Rimes with a &amp; aa</a></p><h2 id="All-Rimes-with-e"><a href="#All-Rimes-with-e" class="headerlink" title="All Rimes with e"></a>All Rimes with <code>e</code></h2><p>In this lesson, we talk about Rimes with <code>e</code>. e is a very naughty sound because it has multiple sounds based on how you spell it.</p><p>Also, e can combine with o to create <code>oe</code> and <code>eo</code> sounds.</p><h3 id="Rimes-with-e"><a href="#Rimes-with-e" class="headerlink" title="Rimes with e"></a>Rimes with <code>e</code></h3><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">e</td><td align="left">ai in pair</td><td align="left"><ruby>些<rp>(</rp><rt>se1</rt><rp>)</rp></ruby></td><td align="left">eng</td><td align="left">eng in leng<sup>2</sup></td><td align="left"><ruby>鄭<rp>(</rp><rt>zeng6</rt><rp>)</rp></ruby></td></tr><tr><td align="left">ei</td><td align="left">ey in prey</td><td align="left"><ruby>四<rp>(</rp><rt>sei3</rt><rp>)</rp></ruby></td><td align="left">ep</td><td align="left">ep in bicep</td><td align="left"><ruby>夾<rp>(</rp><rt>gaap3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">eu</td><td align="left">eil in veil</td><td align="left"><ruby>掉<rp>(</rp><rt>diu6</rt><rp>)</rp></ruby></td><td align="left">et</td><td align="left">et in pet</td><td align="left"><ruby>坺<rp>(</rp><rt>paat6</rt><rp>)</rp></ruby></td></tr><tr><td align="left">em</td><td align="left">em in gem</td><td align="left"><ruby>舔<rp>(</rp><rt>tim2</rt><rp>)</rp></ruby></td><td align="left">ek</td><td align="left">ek in trek</td><td align="left"><ruby>石<rp>(</rp><rt>sek6</rt><rp>)</rp></ruby></td></tr></tbody></table><p>We can see most of them are the same as e pronounced in English.</p><h3 id="Rimes-with-oe-and-eo"><a href="#Rimes-with-oe-and-eo" class="headerlink" title="Rimes with oe and eo"></a>Rimes with <code>oe</code> and <code>eo</code></h3><p><code>oe</code> and <code>eo</code> sound very similar. They were considered the same sound before, but soon linguists found that this sound behaved differently and had different consonances.<br>Therefore, they are split for specific use cases. For example, if there’s an <code>eoi</code> sound, there won’t be a <code>oei</code> sound.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">oe</td><td align="left">ur in fur</td><td align="left"><ruby>鋸<rp>(</rp><rt>goe3</rt><rp>)</rp></ruby></td><td align="left">eoi</td><td align="left">an in France but ends with ng not n</td><td align="left"><ruby>衰<rp>(</rp><rt>seoi1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">oeng</td><td align="left">ern in cern<sup>2</sup></td><td align="left"><ruby>薑<rp>(</rp><rt>goeng1</rt><rp>)</rp></ruby></td><td align="left">eon</td><td align="left">alm in calm with p instead</td><td align="left"><ruby>詢<rp>(</rp><rt>seon1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">oek</td><td align="left">erk in berserk</td><td align="left"><ruby>腳<rp>(</rp><rt>goek3</rt><rp>)</rp></ruby></td><td align="left">eot</td><td align="left">alm in calm with t instead</td><td align="left"><ruby>摔<rp>(</rp><rt>seot1</rt><rp>)</rp></ruby></td></tr></tbody></table><p><sup>1</sup><a href="https://www.google.com/search?q=leng+meaning">meaning of “leng”</a></p><p><sup>2</sup> Obviously, the <code>oeng</code> sound should have a “g” sound, so precisely, it should sound like “caring.” Here, the “ng” is similar to the “ng” in “sing.”</p><h2 id="Learn-a-new-word-before-you-move-on"><a href="#Learn-a-new-word-before-you-move-on" class="headerlink" title="Learn a new word before you move on"></a>Learn a new word before you move on</h2><p>Let’s continue with greetings, how to impress your Hong Kong friend that you haven’t seen for so long, by showing your Cantonese skills?</p><p>You may say <ruby>好耐無見<rp>(</rp><rt>hou2 noi6 mou4 gin3</rt><rp>)</rp></ruby>, which means <strong>Long time no see</strong>!</p><p>Fun fact is, long time no see may acutally come from Cantonese users, who try to do direct translate from cantonese to english.</p><p>So again… <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby>!</p><p>Next lesson: <a href="../canto1-4/">Rimes with i &amp; o</a></p><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-2 -- Rimes with a &amp; aa (Phonology)</title>
      <link href="/canto1-2/"/>
      <url>/canto1-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><p>Previous lesson: <a href="../canto1-1/">Introduction</a></p><h2 id="Recap-of-Rimes"><a href="#Recap-of-Rimes" class="headerlink" title="Recap of Rimes"></a>Recap of Rimes</h2><p>Rimes is a syllable of vowels with consonants that you can <strong>rhyme</strong>!</p><p>For example, in English, the Rime of “Cow” is “ow”; in Cantonese, cow is <ruby>牛<rp>(</rp><rt>ngau4</rt><rp>)</rp></ruby>, and the Rime is “au”.</p><h2 id="Difference-of-a-and-aa"><a href="#Difference-of-a-and-aa" class="headerlink" title="Difference of a and aa"></a>Difference of <code>a</code> and <code>aa</code></h2><p>Two vowels in Cantonese start with a. <code>a</code> sounds like “uh” in English, and <code>aa</code> “ahhh” in English.</p><p>And all their combinations as well. For example, <ruby>分<rp>(</rp><rt>fan1</rt><rp>)</rp></ruby> sounds like “fun”, and <ruby>飯<rp>(</rp><rt>faan6</rt><rp>)</rp></ruby> sounds like “fran” in France without “r” sound.</p><p>Still, it may be difficult to distinguish their difference when they form rimes with other sounds.</p><p>A trick to pronounce any combinations of the <code>aa</code> sound is to try to add the “ahhh” sound before <code>a</code>.<br>For example, <code>ap</code> sounds like “up” in English, and <code>aap</code> sounds like “ahh-up” in one syllable.</p><p>Let’s see all the rimes combinations with <code>a</code> and <code>aa</code>!</p><h3 id="Rimes-with-a"><a href="#Rimes-with-a" class="headerlink" title="Rimes with a"></a>Rimes with <code>a</code></h3><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">uh in bruh</td><td align="left"><ruby>嘞<rp>(</rp><rt>laa3</rt><rp>)</rp></ruby></td><td align="left">ang</td><td align="left">ung in sung</td><td align="left"><ruby>增<rp>(</rp><rt>zang1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">ai</td><td align="left">i in night</td><td align="left"><ruby>擠<rp>(</rp><rt>zai1</rt><rp>)</rp></ruby></td><td align="left">ap</td><td align="left">up in cup</td><td align="left"><ruby>汁<rp>(</rp><rt>zap1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">au</td><td align="left">ull in dull</td><td align="left"><ruby>周<rp>(</rp><rt>zau1</rt><rp>)</rp></ruby></td><td align="left">at</td><td align="left">utt in butt</td><td align="left"><ruby>質<rp>(</rp><rt>zat1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">am</td><td align="left">um in sum</td><td align="left"><ruby>針<rp>(</rp><rt>zam1</rt><rp>)</rp></ruby></td><td align="left">ak</td><td align="left">uck in duck</td><td align="left"><ruby>則<rp>(</rp><rt>zak1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">an</td><td align="left">un in fun</td><td align="left"><ruby>珍<rp>(</rp><rt>zan1</rt><rp>)</rp></ruby></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="Rimes-with-aa"><a href="#Rimes-with-aa" class="headerlink" title="Rimes with aa"></a>Rimes with <code>aa</code></h3><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">aa</td><td align="left">a in far</td><td align="left"><ruby>渣<rp>(</rp><rt>zaa1</rt><rp>)</rp></ruby></td><td align="left">aang</td><td align="left">an in France but ends with ng not n</td><td align="left"><ruby>爭<rp>(</rp><rt>zang1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">aai</td><td align="left">i in high</td><td align="left"><ruby>齋<rp>(</rp><rt>zaai1</rt><rp>)</rp></ruby></td><td align="left">aap</td><td align="left">alm in calm with p instead</td><td align="left"><ruby>集<rp>(</rp><rt>zaap6</rt><rp>)</rp></ruby></td></tr><tr><td align="left">aau</td><td align="left">ow in wow</td><td align="left"><ruby>嘲<rp>(</rp><rt>zaau1</rt><rp>)</rp></ruby></td><td align="left">aat</td><td align="left">alm in calm with t instead</td><td align="left"><ruby>紮<rp>(</rp><rt>zaat3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">aam</td><td align="left">alm in calm</td><td align="left"><ruby>站<rp>(</rp><rt>zaam6</rt><rp>)</rp></ruby></td><td align="left">aak</td><td align="left">alm in calm with k instead</td><td align="left"><ruby>窄<rp>(</rp><rt>zaak3</rt><rp>)</rp></ruby></td></tr><tr><td align="left">aan</td><td align="left">an in France</td><td align="left"><ruby>讚<rp>(</rp><rt>zaan3</rt><rp>)</rp></ruby></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="Learn-a-new-word-before-you-move-on"><a href="#Learn-a-new-word-before-you-move-on" class="headerlink" title="Learn a new word before you move on"></a>Learn a new word before you move on</h2><p>In Cantonese, <ruby>早抖<rp>(</rp><rt>zou2 tau2</rt><rp>)</rp></ruby> will be another most common thrase you may hear, which means <strong>good night</strong>.</p><p>Its literally meaning is sleep early, it is a good wish because nowadays people sleep quite late right?</p><p>So again… <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby>!</p><p>Next lesson: <a href="../canto1-3/">Rimes with e</a></p><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-1 -- Onset (Phonology)</title>
      <link href="/canto1-1/"/>
      <url>/canto1-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><p>Previous lesson: <a href="../canto1-0/">Introduction</a></p><h2 id="Introduction-of-Onset"><a href="#Introduction-of-Onset" class="headerlink" title="Introduction of Onset"></a>Introduction of Onset</h2><p>In this lesson, We start with <code>Onset</code>. They are all <code>consonants</code> that are used before vowels.</p><p>For example, “good morning” in Cantonese is <ruby>早晨<rp>(</rp><rt>zou2 san4</rt><rp>)</rp></ruby>, where “z” and “s” are Onset here.</p><h2 id="Onset"><a href="#Onset" class="headerlink" title="Onset"></a>Onset</h2><p>Basically, these consonant looks identical, or you may find alternative spelling in English, except<br><code>kw</code>, <code>z</code>, and <code>c</code> might be a little unique.</p><table><thead><tr><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th><th align="left">Jyutping</th><th align="left">Sounds in English</th><th align="left">Cantonese Example</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">character that have no starting consonant (Null initial)</td><td align="left"><ruby>呀<rp>(</rp><rt>aa3</rt><rp>)</rp></ruby></td><td align="left">k</td><td align="left">k in king</td><td align="left"><ruby>卡<rp>(</rp><rt>kaa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">b</td><td align="left">b in bar</td><td align="left"><ruby>巴<rp>(</rp><rt>baa1</rt><rp>)</rp></ruby></td><td align="left">ng</td><td align="left">ng in sing</td><td align="left"><ruby>牙<rp>(</rp><rt>ngaa4</rt><rp>)</rp></ruby></td></tr><tr><td align="left">p</td><td align="left">p in palm</td><td align="left"><ruby>怕<rp>(</rp><rt>paa3</rt><rp>)</rp></ruby></td><td align="left">h</td><td align="left">h in harp</td><td align="left"><ruby>蝦<rp>(</rp><rt>haa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">m</td><td align="left">m in mat</td><td align="left"><ruby>媽<rp>(</rp><rt>maa1</rt><rp>)</rp></ruby></td><td align="left">gw</td><td align="left">gu in guava</td><td align="left"><ruby>瓜<rp>(</rp><rt>gwaa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">f</td><td align="left">f in foul</td><td align="left"><ruby>花<rp>(</rp><rt>faa1</rt><rp>)</rp></ruby></td><td align="left">kw</td><td align="left">qu in aqua</td><td align="left"><ruby>誇<rp>(</rp><rt>kwaa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">d</td><td align="left">d in dip<sup>1</sup></td><td align="left"><ruby>打<rp>(</rp><rt>daa2</rt><rp>)</rp></ruby></td><td align="left">w</td><td align="left">w in wow</td><td align="left"><ruby>蛙<rp>(</rp><rt>waa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">t</td><td align="left">t in tip<sup>1</sup></td><td align="left"><ruby>他<rp>(</rp><rt>taa1</rt><rp>)</rp></ruby></td><td align="left">z</td><td align="left"><strong>j</strong> in job but with a ‘t’ sound in front of it<sup>2</sup></td><td align="left"><ruby>揸<rp>(</rp><rt>zaa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">n</td><td align="left">n in nap</td><td align="left"><ruby>那<rp>(</rp><rt>naa5</rt><rp>)</rp></ruby></td><td align="left">c</td><td align="left">c in chat<sup>2</sup> without ‘h’ sound</td><td align="left"><ruby>叉<rp>(</rp><rt>caa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">l</td><td align="left">l in lap</td><td align="left"><ruby>啦<rp>(</rp><rt>laa1</rt><rp>)</rp></ruby></td><td align="left">s</td><td align="left">s in soup</td><td align="left"><ruby>沙<rp>(</rp><rt>saa1</rt><rp>)</rp></ruby></td></tr><tr><td align="left">g</td><td align="left">g in gum</td><td align="left"><ruby>家<rp>(</rp><rt>gaa1</rt><rp>)</rp></ruby></td><td align="left">j</td><td align="left"><strong>y</strong> in yes<sup>3</sup></td><td align="left"><ruby>也<rp>(</rp><rt>jaa5</rt><rp>)</rp></ruby></td></tr></tbody></table><p><sup>1</sup>If you are a native English speaker, you may notice that the Cantonese “d” sound is softer than in English, but the “t” sound is more challenging (the difference is negligible here). But if you have a problem pronouncing this pair, try to make your tongue touch the upper front teeth when creating the “d” and “t” sounds.</p><p><sup>2</sup>In Cantonese, “c” and “z” are clear sounds without aspirated. You can try to not stress your lip and open your mouth wider.</p><p><sup>3</sup>In most European languages, “j” sounds like “y” in English. For example, “ja” in German. Therefore, Jyutping chose “j” to represent this sound.</p><h2 id="Learn-a-new-word-before-you-move-on"><a href="#Learn-a-new-word-before-you-move-on" class="headerlink" title="Learn a new word before you move on"></a>Learn a new word before you move on</h2><p>In Cantonese, <strong>bye bye</strong> will be the most common way to say goodbye.</p><p>But you may also say <ruby>再見<rp>(</rp><rt>zoi3 gin3</rt><rp>)</rp></ruby>， which means <strong>see you</strong>.</p><p>or you may say <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby> which means <strong>see you next time</strong>!</p><p>So… <ruby>下次見<rp>(</rp><rt>haa6 ci3 gin3</rt><rp>)</rp></ruby>!</p><p>Next lesson: <a href="../canto1-2/">Rimes with a &amp; aa</a></p><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese Ch.1-0 -- Introduction to Phonology &amp; Tones</title>
      <link href="/canto1-0/"/>
      <url>/canto1-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Golden Rule of becoming a native Cantonese speaker: <strong>Tones</strong> &gt; Everything!</p></blockquote><p>In this blog, we use <a href="https://jyutping.org/en/docs/english/">Jyutping</a> to indicate the pronunciation of Cantonese characters.</p><h2 id="Overview-of-Cantonese-Phonology"><a href="#Overview-of-Cantonese-Phonology" class="headerlink" title="Overview of Cantonese Phonology"></a>Overview of Cantonese Phonology</h2><p>Maybe you already know that we use one syllable for each character in Cantonese,<br>just like all other Chinese languages. It contains 3 crucial parts in order to pronounce the word.<br>That is the <code>consonances</code>, <code>vowels</code>, and <code>tones</code>.</p><p>In Cantonese, there are <strong>19</strong> consonances, <strong>9</strong> vowels and <strong>6</strong> tones.<br>That creates <strong>1,760</strong> different sounds to cover over 10,000 Chinese Characters.</p><p>Every Cantonese consonance and vowel pair can always be described as an <code>Onset-Rime</code>.</p><h3 id="Phonology-Structure"><a href="#Phonology-Structure" class="headerlink" title="Phonology Structure"></a>Phonology Structure</h3><p>So what is actually an <code>Onset-Rimes</code>?<br>An <code>Onset-Rimes</code> is either a <code>consonant-vowel</code> or a <code>consonant-vowel-consonant</code> structure, For example:</p><ul><li><p><code>consonant-vowel</code>: the word “rich” &#x3D; <ruby>富<rp>(</rp><rt>fu3</rt><rp>)</rp></ruby> (sounds like “foo” in English).</p></li><li><p><code>consonant-vowel-consonant</code>: the word “bamboo” &#x3D; <ruby>竹<rp>(</rp><rt>zuk1</rt><rp>)</rp></ruby> (sounds like “joke” in English).</p></li></ul><h3 id="Tones"><a href="#Tones" class="headerlink" title="Tones"></a>Tones</h3><p>Tones are a unique feature of the Chinese language; in Cantonese, it is slightly more fancy than in Mandarin.<br>But don’t worry, in this Chapter, we will break it down and make it easy for you!</p><p><img src="/images/canto/canto-tone.png"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>So today, we’ve learned the structure of Cantonese, and know that it contains Onsets, Rimes, and Tones.<br>It’s time to learn your first Cantonese phrase!</p><p>In Cantonese, the most common greeting we use is <strong>Good Morning</strong>, that is <ruby>早晨<rp>(</rp><rt>zou2 san4</rt><rp>)</rp></ruby>!</p><p>zou2 san4… How do we pronounce the “z” sound? Now, let’s move on to the next lesson for <code>Onset</code>!</p><p>Portal:</p><ul><li><a href="../canto1-1/">Chapter 0-1: Onset</a></li><li><a href="../canto1-2/">Chapter 0-2: Rimes with a &amp; aa</a></li><li><a href="../canto1-3/">Chapter 0-3: Rimes with e</a></li><li><a href="../canto1-4/">Chapter 0-4: Rimes with i &amp; o</a></li><li><a href="../canto1-5/">Chapter 0-5: Rimes with u &amp; yu</a></li><li><a href="../canto1-6/">Chapter 0-6: Tones</a></li><li><a href="../canto1-7/">Chapter 0-7: Onset, Rimes and Tones (Summary)</a></li></ul><hr><p>Further reading: <a href="https://jyutping.org/en/">Jyutping</a>, <a href="https://lshk.org/">The linguistic Society of Hong Kong</a></p>]]></content>
      
      
      <categories>
          
          <category> Cantonese </category>
          
          <category> Full_Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language Learning </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Phonology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-zhruby -- Implementing HTML Ruby tag in Hexo</title>
      <link href="/hexo-zhruby/"/>
      <url>/hexo-zhruby/</url>
      
        <content type="html"><![CDATA[<p>Implement the HTML tag <code>&lt;ruby&gt;</code> for Hexo using <a href="https://hexo.io/docs/tag-plugins">Tag Plugin</a> feature. Provide auto pronounciation indication for Jyutping (Cantonese), Zhuyin (Taiwanese Mandarin), and Pinyin (Chinese Mandarin), and the default setting for general usage. Support Traditonal and Simplified Chinese characters. </p><p>Inspired by the <a href="https://github.com/jamespan/hexo-ruby-character">hexo-ruby-character</a> by <a href="https://github.com/jamespan">jamespan</a>.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><pre><code>npm install hexo-zhruby --save</code></pre><h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h2><p>Ruby (ルビ) is also known as <a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a> (振り仮名).  It contains two basic use cases:</p><ol><li>To clarify or indicate the pronunciation for readers</li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun</a>, in which the characters have different pronunciations than they seem due to convention or for a specific context. For example, the pronunciation of 煙草 in Japanese is <em>tabako (tobacco)</em>.</li></ol><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p><strong>TLDR</strong>: Usage: <code>&#123;% tag rb|rt %&#125;</code>; Tag options: <code>ruby_def</code>, <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>.</p><hr><h3 id="For-the-1st-use-case-pronunciation-indication"><a href="#For-the-1st-use-case-pronunciation-indication" class="headerlink" title="For the 1st use case (pronunciation indication):"></a>For the 1st use case (pronunciation indication):</h3><p><code>ruby_def</code> allows any language, and the spacing in <code>rp</code> will expand evenly with respect to the word length in <code>rt</code>.</p><ul><li><code>&#123;% ruby_def 基本|きほん %&#125;</code> → <ruby>基本<rp> (</rp><rt>きほん</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|기본 %&#125;</code> → <ruby>基本<rp> (</rp><rt>기본</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|fundamental %&#125;</code> → <ruby>基本<rp> (</rp><rt>fundamental</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|θεμελιώδες %&#125;</code> → <ruby>基本<rp> (</rp><rt>θεμελιώδες</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|базовый %&#125;</code> → <ruby>基本<rp> (</rp><rt>базовый</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|základní %&#125;</code> → <ruby>基本<rp> (</rp><rt>základní</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def fundamental|基本 %&#125;</code> → <ruby>fundamental<rp> (</rp><rt>基本</rt><rp>)</li></ul><p><code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code> refers to <strong>Jyutping</strong>, <strong>Pinyin</strong>, <strong>Zhuyin</strong> respectively. </p><p>No need to enter the pronunciation manually in <code>rt</code>; the value will automatically be returned.</p><ul><li><code>&#123;% ruby_zy 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>jī běn</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>gei1 bun2</rt><rp>) </rp></ruby></li></ul><hr><h3 id="For-the-2nd-use-case-Gikun"><a href="#For-the-2nd-use-case-Gikun" class="headerlink" title="For the 2nd use case (Gikun):"></a>For the 2nd use case (Gikun):</h3><p>Same usage for <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_def special|basic %&#125;</code> → <ruby>special<rp> (</rp><rt>basic</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>基本</rt><rp>)</li></ul><p>In <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>, you can also add <code>|rt</code> just like <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_zy 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_zy 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>jī běn</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>gei1 bun2</rt><rp>) </rp></ruby></li></ul><p>Notice that the <code>rt</code> output depends on the pronunciation in <code>rt,</code> but <strong>not</strong> <code>rp.</code> This feature is only available when <code>rt</code> is a <strong>Chinese Character</strong> in <a href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)">CJK Unified Ideographs</a> (\U4E00-\U9FFF).</p><p>If the input of <code>rt</code> is not in CJK Unified Ideographs, it is considered as <code>ruby_def</code>.</p><h2 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h2><p>The Chinese language contains a lot of <strong>Homophones</strong>, which can be resolved by context most of the time. However, for long sentences (&gt;&#x3D; 15 characters), or very specific names and terms, the auto-generation from 1st use case may not be very sensitive.</p><p>Please use <code>ruby_def</code> if it happens or contribute to this project by providing a more sensitive or advanced Chinese vocabulary library.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/CJK_characters">CJK Unified Ideographs (Unicode block)</a></li><li><a href="https://en.wikipedia.org/wiki/Homophone">Homophone</a></li><li><a href="https://en.wiktionary.org/wiki/%E7%BE%A9%E8%A8%93#Japanese">Gikun (japanese only)</a></li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun (English version under the article Kanji)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby">&lt;ruby&gt;: The Ruby Annotation element</a></li><li><a href="https://en.wikibooks.org/wiki/Unicode/Character_reference">Unicode&#x2F;Character reference</a></li><li><a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters">Universal Character Set characters (Unicode)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Cantonese </tag>
            
            <tag> Node.js </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Hexo Plugin functions to create a custom Tag Plugin</title>
      <link href="/hexo-tagplugin-2/"/>
      <url>/hexo-tagplugin-2/</url>
      
        <content type="html"><![CDATA[<p><strong>Disclaimer</strong>: For explaination on <code>Tag Plugin</code> and <code>Scripts</code> in Hexo, you may take a look of <a href="../hexo-tagplugin-1">this post</a>.</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><blockquote><p>Be Careful! Don’t mix <code>Plugin</code>, <code>Tag</code>, and <code>Tag Plugin</code> in Hexo, even though they look extremely similar.</p></blockquote><p>Usually, <code>Plugin</code> are for complicated functions. Yet if you want to publish your custom <code>Tag Plugin</code> to the NPM registry or even shown on the Hexo Community Page, <code>Plugin</code> would be a very good choice.</p><h3 id="From-Script-to-Plugin"><a href="#From-Script-to-Plugin" class="headerlink" title="From Script to Plugin"></a>From Script to Plugin</h3><p>Assume you already have a script call <code>index.js</code>, and you want to turn it into package, you may do the following:</p><ol><li><p>Navigate <code>node_modules</code> folder in your project folder. This is the folder where Hexo stored all the packages for your blog. Create a folder inside and the name must begin with <code>hexo-</code> or Hexo will ignore it.</p></li><li><p>Your folder must contain at least two files: the actual JavaScript code and <code>package.json</code> file that describes the purpose of the plugin and sets its dependencies.</p><pre><code class="directory">.├── index.js└── package.json</code></pre></li><li><p>In <code>package.json</code>, it should at least have the <code>name</code>, <code>version</code> and <code>main</code> entries set.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;hexo-my-plugin&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;main&quot;: &quot;index&quot;&#125;</code></pre></li><li><p>In the root <code>package.json</code> of your hexo project, you also need to list your <code>plugin</code> as a <code>dependency</code>, for Hexo to detect and load it.<br> Please remember that if your package contain other dependencies, also install and list them for testing and dubugging.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;hexo-site&quot;,    &quot;version&quot;: &quot;0.0.0&quot;,    &quot;private&quot;: true,    &quot;scripts&quot;: &#123;        &quot;build&quot;: &quot;hexo generate&quot;,        &quot;clean&quot;: &quot;hexo clean&quot;,        &quot;deploy&quot;: &quot;hexo deploy&quot;,        &quot;server&quot;: &quot;hexo server&quot;    &#125;,    &quot;hexo&quot;: &#123;        &quot;version&quot;: &quot;&quot;    &#125;,    &quot;dependencies&quot;: &#123;        &quot;hexo&quot;: &quot;^7.3.0&quot;,        ...        &quot;hexo-my-plugin&quot;: &quot;0.0.1&quot;,        &quot;my-plugin-dependency1&quot;: &quot;2.0.0&quot;,        &quot;my-plugin-dependency2&quot;: &quot;2.0.0&quot;    &#125;&#125;</code></pre></li></ol><blockquote><p>If you run command that check all the package after step 4, for exmaple <code>hexo clean</code>, it will check all the packages in <code>node_modules</code> and remove packages that are not publish on npm.</p></blockquote><h2 id="Publish-Plugin-to-npm"><a href="#Publish-Plugin-to-npm" class="headerlink" title="Publish Plugin to npm"></a>Publish Plugin to npm</h2><p>To publish your package on the NPM registry, don’t forget you have to setup your account on <a href="https://www.npmjs.com/">npm</a> first.</p><p>After creating the account, open your terminal and run <code>npm login</code> in the root of your package. </p><p>Enter your <code>username</code> and <code>password</code>, then you should see a message like this if login is successful,</p><pre><code class="cmd">Logged in as &lt;your-username&gt; on https://registry.npmjs.org/.</code></pre><p>Once you logged-in, you may simply publish your folder with <code>npm publish</code> command.</p><h2 id="Publish-Plugin-to-Hexo"><a href="#Publish-Plugin-to-Hexo" class="headerlink" title="Publish Plugin to Hexo"></a>Publish Plugin to Hexo</h2><p>After publish your plugin package in npm, you can also publish it to Hexo official.</p><h3 id="Fork-and-Clone"><a href="#Fork-and-Clone" class="headerlink" title="Fork and Clone"></a>Fork and Clone</h3><p>First of all, <code>Fork</code> <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a> from Github</p><p><img src="/images/coding/hexo_plugin/fork.png"></p><p>Then <code>Clone</code> the repository to your computer and install dependencies.</p><pre><code class="cmd">$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install</code></pre><h3 id="Add-your-Plugin-to-the-list"><a href="#Add-your-Plugin-to-the-list" class="headerlink" title="Add your Plugin to the list"></a>Add your Plugin to the list</h3><p>Create a new yaml file in <code>source/_data/plugins/</code>, use your plugin name as the file name</p><p>Edit <code>source/_data/plugins/&lt;your-plugin-name&gt;.yml</code> and add your plugin. For example:</p><p><img src="/images/coding/hexo_plugin/plugin_yml.png"></p><h3 id="Push-the-branch"><a href="#Push-the-branch" class="headerlink" title="Push the branch"></a>Push the branch</h3><p>Create a pull request and describe the change. Hexo official create a nice form to make sure you have included everything needed.</p><p><img src="/images/coding/hexo_plugin/pull_form.png"></p><p><img src="/images/coding/hexo_plugin/pull_req.png"></p><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>You may check the progress on the pull requests history.<br>Once it is closed you can see your plugin on the Hexo Plugins Community.</p><p><img src="/images/coding/hexo_plugin/pull_closed.png"></p><p><img src="/images/coding/hexo_plugin/hexo_list.png"></p><h2 id="Example-work"><a href="#Example-work" class="headerlink" title="Example work"></a>Example work</h2><p>As you may see, I also made my Plugin “Hexo-zhruby” for Hexo and you can now see it on the community.<br>For more details and see how it works, you may check <a href="../hexo-zhruby/">here</a>.</p><hr><p>Further Reading:</p><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li><li><a href="https://docs.npmjs.com/cli/v8/commands/npm-publish">npm-publish</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Hexo Scripts functions to create a custom Tag Plugin</title>
      <link href="/hexo-tagplugin-1/"/>
      <url>/hexo-tagplugin-1/</url>
      
        <content type="html"><![CDATA[<p>To color your personal Hexo Blog with more features, scripts and plugins are your powerful tools to use. Below we are trying to create our own <code>tag plugin</code> for the Hexo blog.</p><h2 id="Tag-Plugin"><a href="#Tag-Plugin" class="headerlink" title="Tag Plugin"></a>Tag Plugin</h2><blockquote><p>Be careful! Tag plugins are different from <a href="https://hexo.io/docs/front-matter">post tags</a>.</p></blockquote><p>Tag plugins are special type of syntax that you may use in your Markdown file. </p><p>Hexo has already provided some default Tag plugins like <code>Block Quote</code> and <code>iframe</code>.</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>For example, the syntax of <code>iframe</code> tag is:</p><pre><code class="Markdown">&#123;% iframe url [width] [height] %&#125;</code></pre><p>Let say I want to embed a video from me and my friends’ YouTube video:</p><pre><code class="Markdown">&#123;% iframe https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z 820 461%&#125;</code></pre><p>And that’s how it looks like:</p><iframe src="https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z" width="820" height="461" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><p>Let say we want to create our own tag plugin, we can use the Hexo <code>script</code> function. Here’re the steps.</p><ol><li><p>Create a JavaScript file with function <code>hexo.extend.tag.register(&quot;tag_name&quot;, args)</code>. You may also put your own function inside so that the second argument can also be <code>function (args)&#123;&#125;</code></p><p> Here is an example of a function that create a tag named <code>youtube</code>, with embedding video function:</p><pre><code class="JavaScript">hexo.extend.tag.register(&quot;youtube&quot;, function (args) &#123;    var id = args[0];    return (        &#39;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/&#39; +        id +        &#39;&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&#39;    );&#125;);</code></pre></li><li><p>Put your JavaScript files in the <code>scripts</code> folder. If your project folder is new, you may not be able to find it. This is because <code>scripts</code> folder is actually under the <code>Themes</code> folder.</p><p> You may check <a href="https://hexo.io/docs/themes">here</a> to see the structure of <code>themes</code> and create your own one. Or you may be simply find a template on the <a href="https://hexo.io/themes/">Hexo themes community</a> then put your <code>.js</code> file into the theme.</p></li><li><p>It is done! Hexo will load them during initialization and you may use them in your blog post designs.</p></li></ol><h3 id="Beyond-Scripts"><a href="#Beyond-Scripts" class="headerlink" title="Beyond Scripts"></a>Beyond Scripts</h3><p>If you are not satisfied with creating a local tag plugin, but a public one that will be seen by the community, you should consider using Hexo <code>plugin</code> function instead.</p><p>check <a href="../hexo-tagplugin-2">here</a> to continue the journey.</p><hr><p>Further Reading:</p><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/api/tag">Hexo Tag Api</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Railroad Diagram of version range operators</title>
      <link href="/json-dependencies-diagram/"/>
      <url>/json-dependencies-diagram/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a image version of the post <a href="../json-dependencies/">here</a></p></blockquote><p><a name="range-set"></a></p><p><strong>range-set:</strong><br><img src="/images/coding/json_dep_diagram/range-set.png" alt="range-set"></p><pre><code class="EBNF">range-set   ::= range ( logical-or range )*</code></pre><p><strong>logical-or:</strong></p><p><img src="/images/coding/json_dep_diagram/logical-or.png" alt="logical-or"></p><pre><code class="EBNF">logical-or  ::= &#39; &#39;* &#39;||&#39; &#39; &#39;*</code></pre><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="range"></a></p><p><strong>range:</strong></p><p><img src="/images/coding/json_dep_diagram/range.png" alt="range"></p><pre><code class="EBNF">range   ::= hyphen           | simple ( &#39; &#39; simple )*           | &#39;&#39;</code></pre><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="hyphen"></a></p><p><strong>hyphen:</strong></p><p><img src="/images/coding/json_dep_diagram/hyphen.png" alt="hyphen"></p><pre><code class="EBNF">hyphen   ::= partial &#39; - &#39; partial</code></pre><p>referenced by: <a href="#range">range</a></p><p><a name="simple"></a></p><p><strong>simple:</strong></p><p><img src="/images/coding/json_dep_diagram/simple.png" alt="simple"></p><pre><code class="EBNF">simple   ::= primitive           | partial           | tilde           | caret</code></pre><p>referenced by: <a href="#range">range</a></p><p><a name="primitive"></a></p><p><strong>primitive:</strong></p><p><img src="/images/coding/json_dep_diagram/primitive.png" alt="primitive"></p><pre><code class="EBNF">primitive   ::= ( &#39;&lt;&#39; | &#39;&gt;&#39; | &#39;&gt;=&#39; | &#39;&lt;=&#39; | &#39;=&#39; ) partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="partial"></a></p><p><strong>partial:</strong></p><p><img src="/images/coding/json_dep_diagram/partial.png" alt="partial"></p><pre><code class="EBNF">partial  ::= xr ( &#39;.&#39; xr ( &#39;.&#39; xr qualifier? )? )?</code></pre><p>referenced by:</p><ul><li><a href="#caret">caret</a></li><li><a href="#hyphen">hyphen</a></li><li><a href="#primitive">primitive</a></li><li><a href="#simple">simple</a></li><li><a href="#tilde">tilde</a></li></ul><p><a name="xr"></a></p><p><strong>xr:</strong></p><p><img src="/images/coding/json_dep_diagram/xr.png" alt="xr"></p><pre><code class="EBNF">xr    ::= &#39;x&#39;        | &#39;X&#39;        | &#39;*&#39;        | nr</code></pre><p>referenced by: <a href="#partial">partial</a></p><p><a name="nr"></a></p><p><strong>nr:</strong></p><p><img src="/images/coding/json_dep_diagram/nr.png" alt="nr"></p><pre><code class="EBNF">nr    ::= &#39;0&#39;        | [&#39;1&#39;-&#39;9] [&#39;0&#39;-&#39;9]*</code></pre><p>referenced by:</p><ul><li><a href="#part">part</a></li><li><a href="#xr">xr</a></li></ul><p><a name="tilde"></a></p><p><strong>tilde:</strong></p><p><img src="/images/coding/json_dep_diagram/tilde.png" alt="tilde"></p><pre><code class="EBNF">tilde    ::= &#39;~&#39; partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="caret"></a></p><p><strong>caret:</strong></p><p><img src="/images/coding/json_dep_diagram/caret.png" alt="caret"></p><pre><code class="EBNF">caret    ::= &#39;^&#39; partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="qualifier"></a></p><p><strong>qualifier:</strong></p><p><img src="/images/coding/json_dep_diagram/qualifier.png" alt="qualifier"></p><pre><code class="EBNF">qualifier   ::= ( &#39;-&#39; pre )? ( &#39;+&#39; build )?</code></pre><p>referenced by: <a href="#partial">partial</a></p><p><a name="pre"></a></p><p><strong>pre:</strong></p><p><img src="/images/coding/json_dep_diagram/pre.png" alt="pre"></p><pre><code class="EBNF">pre     ::= parts</code></pre><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="build"></a></p><p><strong>build:</strong></p><p><img src="/images/coding/json_dep_diagram/build.png" alt="build"></p><pre><code class="EBNF">build   ::= parts</code></pre><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="parts"></a></p><p><strong>parts:</strong></p><p><img src="/images/coding/json_dep_diagram/parts.png" alt="parts"></p><pre><code class="EBNF">parts   ::= part ( &#39;.&#39; part )*</code></pre><p>referenced by:</p><ul><li><a href="#build">build</a></li><li><a href="#pre">pre</a></li></ul><p><a name="part"></a></p><p><strong>part:</strong></p><pre><code class="EBNF">part    ::= nr | [-0-9A-Za-z]+</code></pre><p><img src="/images/coding/json_dep_diagram/part.png" alt="part"></p><p>generated by <a href="https://www.bottlecaps.de/rr/ui">RR - Railroad Diagram Generator</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Explaination of version range operators in package.json for package dependencies</title>
      <link href="/json-dependencies/"/>
      <url>/json-dependencies/</url>
      
        <content type="html"><![CDATA[<blockquote><p>To see the syntax and Railroad diagram version, goto <a href="../json-dependencies-diagram/">here</a></p></blockquote><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>Package dependecies are a tuple of <code>[major, minor, patch]</code> with numeric values.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;project name&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;description&quot;: &quot;description of the project&quot;,    &quot;keywords&quot;: [        &quot;keyword 1&quot;,        &quot;keyword 2&quot;    ],    &quot;author&quot;: &quot;John Doe&quot;,    &quot;dependencies&quot;: &#123;      &quot;package-1&quot;: &quot;~0.6.2&quot;,      &quot;package-2&quot;: &quot;&gt;=2.6.2&quot;    &#125;&#125;</code></pre><h2 id="Version-Range-operator"><a href="#Version-Range-operator" class="headerlink" title="Version Range operator"></a>Version Range operator</h2><h3 id="Basic-Range"><a href="#Basic-Range" class="headerlink" title="Basic Range"></a>Basic Range</h3><p>For <code>x</code> in exmaple, see <strong>Advanced Range</strong> below.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left">package version must be exactly matched</td><td align="left"><code>1.0.0</code> :&#x3D; <code>=1.0.0</code><br>(They are equivalent)</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">package version must be less than indicated</td><td align="left"><code>&lt;2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>1.x.x</code></td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">package version must be less than or euqal to indicated</td><td align="left"><code>&lt;=2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>2.0.0</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">package version must be greater than indicated</td><td align="left"><code>&gt;2.0.0</code>:&#x3D; <br>version from <code>2.0.1</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">package version must be greater than or euqal to indicated</td><td align="left"><code>&gt;=2.0.0</code> <br>:&#x3D;version from <code>2.0.0</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>||</code></td><td align="left">joined one or more operator</td><td align="left"><code>&gt;2.0.1 || &lt;1.7.3</code> <br>:&#x3D;version greater than <code>2.0.1</code> or less than <code>1.7.3</code></td></tr><tr><td align="left"><code>space</code></td><td align="left">Intersected one or more operator</td><td align="left"><code>&gt;=2.0.1  &lt;=1.7.3</code> <br>:&#x3D;version from <code>2.0.1</code> to <code>1.7.3</code> (inclusive)</td></tr></tbody></table><h3 id="Advanced-Range"><a href="#Advanced-Range" class="headerlink" title="Advanced Range"></a>Advanced Range</h3><p>Advanced ranges may be combined in the same way as primitive comparators using <code>space</code> or <code>||</code>.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>X</code>, <code>x</code>, <code>*</code></td><td align="left">A Wildcard may be used for any values in the <code>[major, minor, patch]</code> tuple (missing value are consider using Wildcard <code>x</code>)</td><td align="left"><code>*</code> :&#x3D; <code> </code><em>(empty string)</em> :&#x3D; <code>&gt;=0.0.0</code><br><code>1.x.x</code> :&#x3D; <code>1.x</code> :&#x3D; <code>1</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">Specifies an inclusive set of package version</td><td align="left"><code>1.2 - 2.3.4</code> :&#x3D; <code>&gt;=1.2.0 &lt;=2.3.4</code> <br>(missing pieces of first version are replaced with zeroes)<br><code>1.2.3 - 2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.4.x</code><br>(missing pieces of second version replace with <code>X-range</code>)</td></tr><tr><td align="left"><code>~</code></td><td align="left">Allows <code>patch</code> or <code>minor</code> level version changes, depends on specification</td><td align="left"><code>~1.2.3</code> :&#x3D; any version starts with <code>1.2</code> and greater than <code>1.2.3</code><br><code>~1.2</code> :&#x3D; any version starts with <code>1.2</code> (same as <code>1.2.x</code>)</td></tr><tr><td align="left"><code>^</code></td><td align="left">Allows version changes in the <code>[major, minor, patch]</code> tuple without modify the <strong>left-most non-zero</strong> element.</td><td align="left"><code>^1.2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.0.0</code><br>(minor update)<br><code>^0.2.3</code> :&#x3D; <code>&gt;=0.2.3 &lt;0.3.0</code> <br>(patch update)<br><code>^0.0.3</code> :&#x3D; <code>&gt;=0.0.3 &lt;0.0.4</code><br>(no updates)</td></tr></tbody></table><h2 id="Further-Explaination-on-Caret-Ranges"><a href="#Further-Explaination-on-Caret-Ranges" class="headerlink" title="Further Explaination on Caret Ranges ^"></a>Further Explaination on Caret Ranges <code>^</code></h2><h3 id="Special-interaction-with-Wildcard-operator-x"><a href="#Special-interaction-with-Wildcard-operator-x" class="headerlink" title="Special interaction with Wildcard operator x"></a>Special interaction with Wildcard operator <code>x</code></h3><p>When parsing caret ranges, minor and patch values with wildcard <code>x</code> desugars to the number <code>0</code> (missing values are consider as <code>x</code>):</p><p>Example:</p><ul><li><code>^1.2.x</code> :&#x3D; <code>&gt;=1.2.0 &lt;2.0.0-0</code> (equivalent to <code>^1.2.0</code>)</li><li><code>^1.x</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0-0</code> (equivalent to <code>^1.0.0</code>)</li></ul><p>However, when both <code>major</code> and <code>minor</code> versions are <code>0</code>, Caret range allow flexibility within wildcard <code>x</code>:</p><p>Example:</p><ul><li><code>^0.0.x</code> :&#x3D; <code>&gt;=0.0.0 &lt;0.1.0-0</code> (<strong>NOT</strong> equivalent to <code>^0.0.0</code>, but similar to <code>^0.1.0</code>)</li></ul><h3 id="Usage-and-Common-Practices"><a href="#Usage-and-Common-Practices" class="headerlink" title="Usage and Common Practices"></a>Usage and Common Practices</h3><p>Caret ranges usually ideally used when an author may make breaking changes. For example, between <code>0.2.4</code> and <code>0.3.0</code> releases, which is a common practice. </p><p>However, it presumes that there will not be breaking changes between <code>0.2.4</code> and <code>0.2.5</code>. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices.</p><hr><p>Further Reading: <a href="https://github.com/npm/node-semver#ranges">version range</a> in npm-semver, <a href="https://github.com/actions/setup-node#supported-version-syntax">setup-node</a> in GitHub Actions</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why you shouldn&#39;t deploy your Hexo webpage using GitHub Desktop?</title>
      <link href="/github-desktop/"/>
      <url>/github-desktop/</url>
      
        <content type="html"><![CDATA[<h2 id="Methods-to-Deploy-Hexo-to-GitHub-io"><a href="#Methods-to-Deploy-Hexo-to-GitHub-io" class="headerlink" title="Methods to Deploy Hexo to GitHub.io"></a>Methods to Deploy Hexo to GitHub.io</h2><p>Assume you’ve created a repository on GitHub called <code>&lt;username&gt;.github.io</code>. Here are two common method you can deploy you Hexo Blog:</p><h3 id="Hexo-Command"><a href="#Hexo-Command" class="headerlink" title="Hexo Command"></a>Hexo Command</h3><p>Hexo’s documentations and Tutorial has provided sufficient instructions on deploying your personal website on your GitHub repository.</p><p>According to the <a href="https://hexo.io/docs/github-pages">Hexo Tutorial</a>, we can deploy the repository by using <a href="https://docs.github.com/en/actions">GitHub Actions</a>.</p><ol><li><p>Create and Add the following contents to <code>.github/workflows/pages.yml</code>:</p><pre><code class="yml">name: Pageson:push:    branches:    - main # default branchjobs:build:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@v4        with:        token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;        submodules: recursive    - name: Use Node.js 20        uses: actions/setup-node@v4        with:        # Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node        # Ref: https://github.com/actions/setup-node#supported-version-syntax        node-version: &quot;&gt;=20&quot;     - name: Cache NPM dependencies        uses: actions/cache@v4        with:        path: node_modules        key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache        restore-keys: |            $&#123;&#123; runner.OS &#125;&#125;-npm-cache    - name: Install Dependencies        run: npm install    - name: Build        run: npm run build    - name: Upload Pages artifact        uses: actions/upload-pages-artifact@v3        with:        path: ./publicdeploy:    needs: build    permissions:    pages: write    id-token: write    environment:    name: github-pages    url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125;    runs-on: ubuntu-latest    steps:    - name: Deploy to GitHub Pages        id: deployment        uses: actions/deploy-pages@v4</code></pre></li><li><p>Install <code>hexo-deployer-git</code>.</p></li><li><p>Add&#x2F;Change the following configurations to <code>_config.yml</code>:</p><pre><code class="yml">deploy:type: gitrepo: https://github.com/&lt;username&gt;/&lt;project&gt;# for example, this blog is https://github.com/greenmeeple/greenmeeple.github.iobranch: gh-pages</code></pre></li><li><p>After finishing your bog posts, Run <code>hexo clean &amp;&amp; hexo deploy</code>.</p></li></ol><h3 id="GitHub-Desktop"><a href="#GitHub-Desktop" class="headerlink" title="GitHub Desktop"></a>GitHub Desktop</h3><p>Many Users installed <a href="https://desktop.github.com/download/">GitHub Desktop</a> for better visualization on changes, so do I. It provides more intuitive push and commit procedure and instruction compared to terminal. Most of the time I use it to make sure no unexpected line changes or modification.</p><p><img src="/images/site_notes/github_desktop.png"></p><p>But soon I noticed that, every time after running <code>hexo clean &amp;&amp; hexo deploy</code>, GitHub Desktop will warn me that there’s something need to be pulled. When I pull it for merging it return <code>Unable to merge unrelated histories in repository</code>. Even in the image above, it shows that I should pull something. However, how would I need to pull if I’ve just push it?</p><h2 id="Security-Problem"><a href="#Security-Problem" class="headerlink" title="Security Problem"></a>Security Problem</h2><p>So I inspect my repository, these two method actually deploy <strong>completely different</strong> content to the repository, even though they output the identical content on the webpage.</p><p>When you deploy you webpage with Hexo command, it actually creates a folder <code>.deploy_git</code>, which is static HTML content without showing any configurations like your <code>themes</code> folder or <code>_config.yml</code> folder. In contrast, GitHub Desktop solely commit all folder that is not in <code>.gitignore</code> file and the website just rendered dynamically in the repository when someone visit.</p><p>This create a huge security problem as much as it seems. All contents in your config is now visible to everyone. Since Hexo is a simple framework that depends heavily on <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <code>.yml</code> files, there’s on where to hide all your settings and <code>&lt;script&gt;</code> if they just directly commit to your repository before building it statically. This may include not only your SEO and functionality of your webiste, but even some secret variable.</p><h3 id="GitTalk-comment-section-and-GitHub-OAUTH"><a href="#GitTalk-comment-section-and-GitHub-OAUTH" class="headerlink" title="GitTalk comment section and GitHub OAUTH"></a>GitTalk comment section and GitHub OAUTH</h3><p>For example, the comment section below every posts in this blog are powered by <a href="https://github.com/gitalk/gitalk">GitTalk</a>. It requires users to login through GitHub to comment. In order to handle the authorization of login, blog owners need to create an <a href="https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app">OAUTH App</a>. Then they need to input their <code>clientID</code> and <code>clientSecret</code> initiate the plugin. For Hexo file structure, this will usually be stored in <code>_config.yml</code>.</p><p>Therefore, if Blog Owner simply commit the whole folder using GitHub Desktop, their OAUTH App credentials are leaked to everyone. And this is how I start noticing the two deploy methods above are so different.</p><h2 id="Saving-your-sensitive-information-from-Data-Leak"><a href="#Saving-your-sensitive-information-from-Data-Leak" class="headerlink" title="Saving your sensitive information from Data Leak?"></a>Saving your sensitive information from Data Leak?</h2><p>As you may know, once you commit your issue on GitHub, it will leave a trace. This is because the version control nature of GitHub. But that also means everyone can always inspect your repositories’ history, even your newest version already removed your leaked data. Other than deleting your repository and start all over again, you may also cover and rewrite your commit history, and even rewrite the content by following <a href="./">this</a>.</p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Environment_variable">Environment variable</a>, <a href="https://stackoverflow.com/questions/44342276/how-to-push-code-to-github-hiding-the-api-keys">How to push code to Github hiding the API keys?</a></p>]]></content>
      
      
      <categories>
          
          <category> Site_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathjax prime superscript problem in Hexo theme</title>
      <link href="/hexo-mathjax/"/>
      <url>/hexo-mathjax/</url>
      
        <content type="html"><![CDATA[<h2 id="Prime-superscript-problem-e-g-x’-i-in-Mathjax"><a href="#Prime-superscript-problem-e-g-x’-i-in-Mathjax" class="headerlink" title="Prime superscript problem (e.g. x’_i) in Mathjax"></a>Prime superscript problem (e.g. x’_i) in Mathjax</h2><p>When I was using <a href="https://www.mathjax.org/">Mathjax</a> to create math formula in my blog post, I typed<br><code>((q_1, q_2), a, (q&#39;_1, q&#39;_2)) \in S \times \Sigma_&#123;int&#125; \times S</code> and it rendered as</p><p><em><strong>$((q_1, q_2), a, (q’_1, q’<em>2)) \in S \times \Sigma</em>{int} \times S$</strong></em></p><p>However, when <code>((q_1, q_2), a, (q&#39;_1, q&#39;_2))</code> &amp; <code>\in S \times \Sigma_&#123;int&#125; \times S</code> are seperated, they rendered properly.</p><p>$$((q_1, q_2), a, (q’_1, q’_2))$$</p><p>$$\in S \times \Sigma_{int} \times S$$</p><blockquote><p>Maybe I should use <code>\left</code> and <code>\right</code> for (), just like <code>\lbrace</code> and <code>\rbrace</code> for {}?</p></blockquote><p>So I typed <code>\left( \left( q_1, q_2 \right), a, \left( q&#39;_1, q&#39;_2 \right) \right) \in S \times \Sigma_&#123;int&#125; \times S</code>, didn’t work out:</p><p><em><strong>$\left( \left( q_1, q_2 \right), a, \left( q’_1, q’<em>2 \right) \right) \in S \times \Sigma</em>{int} \times S$</strong></em></p><h2 id="Source-of-error"><a href="#Source-of-error" class="headerlink" title="Source of error"></a>Source of error</h2><blockquote><p>Problem definitely comes from the first half of the formula, since second half are all variables.</p></blockquote><p>Turns out there may be an issue with how the <strong>prime symbol</strong> are being handled.</p><p>For simple formula, <code>q&#39;_1</code> and <code>q_1&#39;</code> are considered the identical.<br>However, for more complicated formula, the only <code>q_1&#39;</code> can be rendered correctly:</p><p>$$((q_1, q_2), a, (q_1’, q_2’)) \in S \times \Sigma_{int} \times S$$</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>Afterwards, I found people reported <a href="https://physics.meta.stackexchange.com/questions/2614/a-prime-superscript-in-latex-mathjax-not-displayed-correctly">similar issue</a> before.</p><p>Two basic solutions:</p><ol><li><p>Stick to the format <code>x_&#123;Subscript&#125;^&#123;Superscript&#125;</code>, but for prime symbol <code>&#39;</code>, use it as <code>x_&#123;Subscript&#125;&#39;</code></p></li><li><p>Simply use <code>&#123;\prime&#125;</code> for every situation, e.g. <code>x_&#123;i&#125;^&#123;\prime&#125;</code>.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Site_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Latex </tag>
            
            <tag> Mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parameterized Verification 1.2 -- Synchronization Primitives of Processes</title>
      <link href="/pv1-2/"/>
      <url>/pv1-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Swen Jacobs</p></blockquote><p>Last post: <a href="../pv1-1/">Labeled Transition Systems</a></p><h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><p>A Process is an LTS $P &#x3D; (Q, Q_0, \Sigma, \delta, \lambda)$ with $\Sigma &#x3D; \Sigma_{int} \cup \lbrace out_a , in_a \mid a \in \Sigma_{sync} \rbrace $, where </p><ul><li>$\Sigma_{int}$ is a set of <code>internal</code> actions,</li><li>$\Sigma_{sync}$ a set of <code>synchronizing</code> actions,</li><li>$out_a$ is an <code>send</code> action (or <code>initiate</code> action),</li><li>$in_a$ is an <code>receive</code> action.</li></ul><h3 id="Composition-by-Synchronization"><a href="#Composition-by-Synchronization" class="headerlink" title="Composition by Synchronization"></a>Composition by Synchronization</h3><p>The composition $P^n$ of $n$ (uniform) processes wrt. $card$ is the LTS $(S, S_0, \Sigma_{int} \cup \Sigma_{sync}, \Delta, \Lambda)$ with:</p><ul><li><p>$S &#x3D; Q \times Q$</p></li><li><p>$S_0 &#x3D; Q_0 \times Q_0$</p></li><li><p>$\Delta \subseteq S \times (\Delta_{int} \cup \Delta_{sync} \times S)$ is the set of all transitions that satisfy one of the following:</p><p><strong>Internal Transition</strong>:</p><ul><li>For some $i \in\lbrace 1, … , n \rbrace$ , $(s, a, s’) \in S \times\Sigma_{int}\times S$ is an element such that:<br> $(s(i), a, s’(i)) \in\delta$ , and $s(j) &#x3D; s’(j)$ for $i \ne j \in\lbrace 1, …, n \rbrace$</li></ul><blockquote><p>Process $s(i)$ take the action, other processes $s(j)$ remain their current states.</p></blockquote><p><strong>Synchronous Transition</strong></p><ul><li><p>For some $i \in \lbrace 1, … , n \rbrace$ and some $I \subseteq \lbrace 1, …, n \rbrace \setminus \lbrace i \rbrace$ with $|I| \in card$ ,<br>$(s, a, s’) \in S \times \Sigma_{int} \times S$ is an element such that:</p><ul><li>$s(i) \buildrel out_a \over\longrightarrow s’(i)$ is (a local transition) in $P$<blockquote><p>One process $s(i)$ take the <code>send</code> action.</p></blockquote></li><li>for every $j \in I, s(j) \buildrel in_a \over\longrightarrow s’(j)$ is (a local transition) in $P$<blockquote><p>$I$ is the set of processes that can take the <code>receive</code> action. (size of $I$ must not be larger then $card$)</p></blockquote></li><li>for every $j \in\lbrace 1, …, n \rbrace \setminus (I \cup\lbrace i \rbrace), s’(j) &#x3D; s(j)$<blockquote><p>Other processes $s(j)$ that cannot take <code>receive</code> actions remain their current states.</p></blockquote></li><li>$I$ is <strong>maximal</strong>.<blockquote><p>There does not exist a larger set $I’ \supset I$ with $|I’| \in card$ that for all $j \in I’$ ,<br>there is a local transition from $s(j)$ that can take the <code>receive</code> action.</p></blockquote></li></ul></li></ul></li><li><p>$\Lambda(s) &#x3D; \lbrace p_{i} \mid p \in \text{AP and p} \in\lambda(s(i)), i \in \lbrace 1, …, n\rbrace \rbrace$</p></li></ul><blockquote><p>In this course, send action &#x3D; $out_a$ &#x3D; $a!!$ ; receive action &#x3D; $in_a$ &#x3D; $a??$.</p></blockquote><p>Example of Composition by <code>Broadcast</code> synchronization. $(card &#x3D; \lbrace 1 \rbrace)$</p><p><img src="/images/notes/uds/pv/1_2_composition.png"></p><h2 id="Synchronization-Primitives"><a href="#Synchronization-Primitives" class="headerlink" title="Synchronization Primitives"></a>Synchronization Primitives</h2><p>In this course, there are 4 types of synchronization:<br><code>Pairwise Rendezvous</code>, <code>Broadcast</code>, <code>Asynchronous Rendezvous</code>, and <code>Lossy Broadcast</code>.</p><h3 id="Pairwise-Rendezvous"><a href="#Pairwise-Rendezvous" class="headerlink" title="Pairwise Rendezvous"></a>Pairwise Rendezvous</h3><blockquote><p><strong>Exactly ONE</strong> process take $out_a$ action, <strong>ONE</strong> process take $in_a$ action. $(card &#x3D; \lbrace 1 \rbrace)$</p></blockquote><p><img src="/images/notes/uds/pv/1_2_pairwise.png"></p><h3 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ALL</strong> process take $in_a$ action if they are able to $(card &#x3D; \mathbb{N}_0)$.</p></blockquote><p><img src="/images/notes/uds/pv/1_2_broadcast.png"></p><h3 id="Asynchronous-Rendezvous"><a href="#Asynchronous-Rendezvous" class="headerlink" title="Asynchronous Rendezvous"></a>Asynchronous Rendezvous</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ZERO &#x2F; ONE</strong> process take $in_a$ action $(card &#x3D; {0, 1})$.</p></blockquote><p><img src="/images/notes/uds/pv/1_2_async.png"></p><h3 id="Lossy-Broadcast"><a href="#Lossy-Broadcast" class="headerlink" title="Lossy Broadcast"></a>Lossy Broadcast</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ONE</strong> process take $in_a$ action $(card &#x3D; \mathbb{N}_0, I\text{ not necessarily maximal})$.</p></blockquote><p><img src="/images/notes/uds/pv/1_2_lossy.png"></p><hr><p>Next post: <a href=""></a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)">Synchronization</a>, <a href="https://www7.in.tum.de/~esparza/Talks/ParamVerif.PDF">Parameterized Verification</a> by Javier Esparza.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PV </tag>
            
            <tag> LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parameterized Verification 1.1 -- Labeled Transition Systems</title>
      <link href="/pv1-1/"/>
      <url>/pv1-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Swen Jacobs</p></blockquote><h2 id="Labeled-Transition-Systems-LTS"><a href="#Labeled-Transition-Systems-LTS" class="headerlink" title="Labeled Transition Systems (LTS)"></a>Labeled Transition Systems (LTS)</h2><p>LTS is a concept in theoretical computer science used in the study of computation. It is used to describe the potential behavior of discrete systems, e.g. <a href="https://en.wikipedia.org/wiki/Model_checking">Model Checking</a>.</p><p>It consists of states and transitions between states, which may be labeled with labels chosen from a set; the same label may appear on more than one transition. Mathematically, it can be described as <a href="https://en.wikipedia.org/wiki/Directed_graph">directed graph</a>.</p><h3 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h3><p>Labels can be used to describe the behaviour or distinguish between states.<br>If the set of label is a <a href="https://en.wikipedia.org/wiki/Singleton_(mathematics)">singleton</a> (only contains one label), then it can be omitted in the system.</p><h3 id="LTS-v-s-Finite-state-Automata"><a href="#LTS-v-s-Finite-state-Automata" class="headerlink" title="LTS v.s. Finite-state Automata"></a>LTS v.s. Finite-state Automata</h3><p>In Transition systems:</p><ul><li>The set of states is not necessarily finite, or even countable.</li><li>The set of transitions is not necessarily finite, or even countable.</li><li>No “start” state or “final” states are given.</li></ul><h2 id="Formal-definition"><a href="#Formal-definition" class="headerlink" title="Formal definition"></a>Formal definition</h2><p>Let $AP$ be a set of atomic propositions (statement or assertion that must be true or false),<br>i.e., observable properties of the system.</p><p>A labeled transition system (LTS) over $AP$ is a tuple $Q, Q_0, \Sigma, \delta, \lambda$, where</p><ul><li>$Q$ is a set of states</li><li>$Q_0 \subseteq Q$ is the set of initial states</li><li>$\Sigma$ is the set of transition labels (or actions)</li><li>$\delta \subseteq Q \times \Sigma \times Q$ is the transition relation (also write as $ q\buildrel a \over\rightarrow q’ \in \delta$)</li><li>$\lambda : Q \rightarrow 2^{AP}$ is the state labeling.</li></ul><blockquote><p>In this course, we assume <strong>finite LTS</strong>, which means $AP$ and $Q$ are finite, unless explicitly stated.</p></blockquote><p><img src="/images/notes/uds/pv/1_1_LTS.png"></p><h2 id="Run-of-an-LTS"><a href="#Run-of-an-LTS" class="headerlink" title="Run of an LTS"></a>Run of an LTS</h2><p>Consider an LTS $M &#x3D; (Q, Q_0, \Sigma, \delta, \lambda)$.</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>A path of $M$ an is a finite sequence $q_0a_0q_1a_1…q_n \in (Q\Sigma)\ast Q$, such that $ q_i \buildrel a_i \over\rightarrow q_{i+1}$ for all $i &lt; n$<br>or an infinite sequence $q_0a_0q_1a_1…q_n \in (Q\Sigma)^\omega$, such that $ q_i \buildrel a_i \over\rightarrow q_{i+1}$ for all $i \in \mathbb{N}$.</p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><p>A run of $M$ is a <strong>path</strong> of $M$ with $q_0 \in Q_0$, and that is maximal, i.e., it cannot be extended.</p><p>A run is <strong>deadlocked</strong> if it is finite.</p><h3 id="State-labeled-paths"><a href="#State-labeled-paths" class="headerlink" title="State-labeled paths"></a>State-labeled paths</h3><p>$q_0q_1…$, the projection of a path onto states $Q$,</p><h3 id="Action-labeled-paths"><a href="#Action-labeled-paths" class="headerlink" title="Action-labeled paths"></a>Action-labeled paths</h3><p>$a_0a_1…$, the projection of a path onto actions $\Sigma$,</p><h3 id="Traces"><a href="#Traces" class="headerlink" title="Traces"></a>Traces</h3><p>$\lambda (q_0)\lambda q_1…$, the sequence of labels of a <strong>state-labeled path</strong>.</p><hr><p>Next post: <a href="../pv1-2/">Synchronization Primitives of Processes</a></p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Transition_system">Transition System</a>, <a href="https://en.wikipedia.org/wiki/Model_checking">Model Checking</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PV </tag>
            
            <tag> LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker -- A statistics for UdS Mensa using Selenium</title>
      <link href="/mensaar/"/>
      <url>/mensaar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>I Dedicate this project to my favourite <a href="https://www.stw-saarland.de/de/Verpflegung/Mensa-Saarbrucken/Unser-Angebot">Mensa</a> in Germany. I love you deeply with all my heart. Thank you for all the budget menu and frozen food recommendations. The food price is so low, just like my body weight.</p></blockquote><p>This post is to share the walkthrough of this project’s development. For project details, please visit the repository <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></p><h1 id="🍽-🥨-MensaarLecker-–-A-beloved-tool-to-find-out-Mensa-Ladies’-favourite-menu-🥨-🍽"><a href="#🍽-🥨-MensaarLecker-–-A-beloved-tool-to-find-out-Mensa-Ladies’-favourite-menu-🥨-🍽" class="headerlink" title="🍽 🥨 MensaarLecker – A beloved tool to find out Mensa Ladies’ favourite menu 🥨 🍽"></a>🍽 🥨 MensaarLecker – A beloved tool to find out Mensa Ladies’ favourite menu 🥨 🍽</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Me and my friends <del>hate</del><strong>love</strong> the UdS Mensa so much! The infinite frozen food and french fries menus give us so much energy and motivation for the 5-hour afternoon coding marathon. However, no one actually knows how many potatoes they have exterminated throughout the week. We have a genius webpage created by some <a href="https://gibtesheuteschnitzel.de/">Schnitzel lover</a>. Personally, I like its minimalistic layout and determination on Schnitzel searching. </p><blockquote><p>However, we want more.</p></blockquote><p>It’s not just Schnitzel; we want to know everything about their menu. We want to know what’s inside the mensa ladies’ brains when they design next week’s menu.</p><blockquote><p>The desire never ends. We need more data, more details, more, More, <strong>MORE!</strong></p></blockquote><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>MensaarLecker is a statistic that collects all the menus’ occurrences and provides daily menu information. It contains:</p><ul><li>A web scraper that collects the <a href="https://mensaar.de/#/menu/sb">daily menu</a> of the Mensa in Saarland University. </li><li>A statistic that calculates each item’s (main dish &amp; side dish) occurrence and percentage.</li></ul><h2 id="Developing-Process"><a href="#Developing-Process" class="headerlink" title="Developing Process"></a>Developing Process</h2><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></h3><p>I started my journey with Beautiful Soup, one of the most popular Python web scraper packages. However, as a Uni that is well-known for its computer science program, all the menus are rendered using JavaScript. And beautiful can only scrape HTML and XML tags. So the scraper can only see an empty skeleton page:</p><p><img src="/images/projects/mensaar_empty.png"></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="https://selenium-python.readthedocs.io/">Selenium</a></h3><p>Basically, Selenium is a <a href="https://www.selenium.dev/documentation/webdriver/">Webdriver</a> that opens a browser naturally, like a human user. Then from there we can scrape the rendered information. Things get simpler once we can see the website as we see it on the browser. We just need to find the tag that contains the information we need and save it for storage.</p><h3 id="Scraping"><a href="#Scraping" class="headerlink" title="Scraping"></a>Scraping</h3><table><thead><tr><th align="left">data we need</th><th align="left">tag</th></tr></thead><tbody><tr><td align="left">menus</td><td align="left"><code>&lt;div class=&quot;counter&quot;&gt;</code></td></tr><tr><td align="left">date</td><td align="left"><code>&lt;div class=&quot;cursor-pointer active list-group-item&quot;&gt;</code></td></tr><tr><td align="left">main dish</td><td align="left"><code>&lt;span class=&quot;meal-title&quot;&gt;</code></td></tr><tr><td align="left">side dish</td><td align="left"><code>&lt;div class=&quot;component&quot;&gt;</code></td></tr></tbody></table><p>The first part of the task is to get the daily menu. We also get the date on the website to make the following work easier.</p><p>By the <code>find_element</code> and <code>find_elements</code> functions in Selenium, we can create a simple scraper like this:</p><pre><code class="python">from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.common.by import Bydriver = webdriver.Firefox()driver.get(&quot;https://mensaar.de/#/menu/sb&quot;)counters = driver.find_elements(By.CLASS_NAME, &quot;counter&quot;)for counter in counters:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><p>However, on the webpage there is also a counter called <code>Wahlessen.</code> Which refers to a more pricy and unpredictable menu, and we want to exclude its data:</p><pre><code class="python">counter_title = counter.find_element(By.CLASS_NAME, &quot;counter-title&quot;).text.strip()# Filter for specified counter titlesif counter_title in [&quot;Menü 1&quot;, &quot;Menü 2&quot;, &quot;Mensacafé&quot;]:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>It is kinda pointless to make a full database for these small piece of data <em>(I may take my word back in the future)</em>, so we just store the collected data in Json files.<br>Therefore, everyday we will have a separate Json file. We create a separate Json file for statistics, it is calculated simply by adding current date’s data into the file, so it will accumlate each data entry.</p><pre><code class="python">with open(output_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(result, f, ensure_ascii=False, indent=2)print(f&quot;Results saved to &#123;output_file&#125;&quot;)# Save the updated occurrence counts to the JSON filecount_result = &#123;    &quot;meal_counts&quot;: dict(meal_count),    &quot;component_counts&quot;: dict(component_count)&#125;with open(count_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(count_result, f, ensure_ascii=False, indent=2)print(f&quot;Counts saved to &#123;count_file&#125;&quot;)</code></pre><pre><code class="json">&#123;  &quot;meal_counts&quot;: &#123;    &quot;KlimaTeller: Broccoli und Cheese Nuggets mit Chili-Kräuterdip&quot;: 1,    &quot;Hähnchenschnitzel „Wiener Art“ mit Paprikarahmsoße&quot;: 1,    &quot;Flammkuchen mit Tomaten und Rucola&quot;: 1,    &quot;Köttbullar und Rahmsoße mit Champignons&quot;: 1,    &quot;KlimaTeller: Türkische Pizza Lahmacun&quot;: 1,    &quot;KlimaTeller: Hausgemachte vegetarische Kartoffelsuppe&quot;: 1,    &quot;Pasta mit Argentinischer Hackfleischsoße&quot;: 1,  &#125;,  &quot;component_counts&quot;: &#123;    &quot;Pommes Frites&quot;: 1,    &quot;Karottensalat&quot;: 2,    &quot;Reis (aus biologischem Anbau)&quot;: 2,    &quot;Weiße Salatsoße Dressing&quot;: 6,    &quot;Obst (Apfel aus biologischem Anbau)&quot;: 6,    &quot;Brötchen&quot;: 4,    &quot;Wiener Würstchen&quot;: 1  &#125;&#125;</code></pre><h3 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h3><blockquote><p>The part that gives me headache…</p></blockquote><p>I tried to use <a href="https://docs.github.com/en/actions/writing-workflows">GitHub Workflow</a> to run the Python script daily, but it didn’t work out… So for my next step, I may create automation locally and connect the folder to the repository through GitHub Desktop.</p><p>Another solution maybe transfer the Json storage into standard database like <a href="https://www.mongodb.com/">MongoDB</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo Shortcut</title>
      <link href="/3_hexo_Shortcut/"/>
      <url>/3_hexo_Shortcut/</url>
      
        <content type="html"><![CDATA[<p>Below is the list of shortcuts by for readers from the 3-hexo theme.</p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><h3 id="Global-Shortcut"><a href="#Global-Shortcut" class="headerlink" title="Global Shortcut"></a>Global Shortcut</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">s</td><td align="left">show &#x2F; hide sidebar</td></tr><tr><td align="left">w</td><td align="left">show &#x2F; hide post’s table of content</td></tr><tr><td align="left">i</td><td align="left">focus on search boxes</td></tr><tr><td align="left">j</td><td align="left">scroll down</td></tr><tr><td align="left">k</td><td align="left">scroll up</td></tr><tr><td align="left">g</td><td align="left">page up</td></tr><tr><td align="left">shift+g</td><td align="left">page down</td></tr></tbody></table><h3 id="Search-Box"><a href="#Search-Box" class="headerlink" title="Search Box"></a>Search Box</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">esc</td><td align="left">1. If there is input in the search box, it will be cleared </br> 2. if not, remove its focus</td></tr><tr><td align="left">down</td><td align="left">scroll downward</td></tr><tr><td align="left">up</td><td align="left">scroll upward</td></tr><tr><td align="left">enter</td><td align="left">redirect to selected post (default: first search result)</td></tr></tbody></table><p>More info: <a href="https://yelog.org/2017/03/24/3-hexo-shortcuts/">3-hexo shortcut by yelog</a></p>]]></content>
      
      
      <categories>
          
          <category> Site_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 3-hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
