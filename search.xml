<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo Plugins and Personalization of this site</title>
      <link href="/site/personalize/"/>
      <url>/site/personalize/</url>
      
        <content type="html"><![CDATA[<p>Here are all the plugins and niche settings that personalize this blog and the <a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> theme.</p><h2 id="Remove-Uppercase-Details"><a href="#Remove-Uppercase-Details" class="headerlink" title="Remove Uppercase Details"></a>Remove Uppercase Details</h2><p>The Uppercase characters overflowed the page and affects the aesthetic.</p><p><img src="/images/site_notes/uppercase.png"></p><p>Find the css tag that contains the keyword <strong>Uppercase</strong> and remove it.</p><pre><code class="jsx">&#123;page.layout !== &#39;page&#39; ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt;</code></pre><h2 id="Better-Sans-Font"><a href="#Better-Sans-Font" class="headerlink" title="Better Sans Font"></a>Better Sans Font</h2><p>In <code>_config.icarus.yml</code>, find the following section <code>providers</code>:</p><pre><code class="yml">providers:    # Name or URL template of the JavaScript and/or stylesheet CDN provider    cdn: jsdelivr    # Name or URL template of the webfont CDN provider    fontcdn: https://fonts.googleapis.com/css2?family=Noto+Sans+HK:wght@100..900&amp;display=swap    # Name or URL of the fontawesome icon font CDN provider    iconcdn: fontawesome</code></pre><p>Choose your favorite font in <a href="https://fonts.google.com/">Google Fonts</a>, and paste the url of the font to <code>fontcdn</code></p><p><img src="/images/site_notes/notosansHK.png"></p><h2 id="Atom-or-RSS-feed-–-hexo-generator-feed"><a href="#Atom-or-RSS-feed-–-hexo-generator-feed" class="headerlink" title="Atom or RSS feed – hexo-generator-feed"></a>Atom or RSS feed – <a href="https://github.com/hexojs/hexo-generator-feed"><code>hexo-generator-feed</code></a></h2><p>It is used for generating Atom 1.0 feed. <a href="https://greenmeeple.github.io/atom.xml">Check Here</a></p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><pre><code class="bash">npm install hexo-excerpt --save</code></pre><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><pre><code class="yml">feed:  enable: true  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date  icon: /img/avatar.png  autodiscovery: true  template:</code></pre><h2 id="Automatic-excerpt-generator-–-hexo-excerpt"><a href="#Automatic-excerpt-generator-–-hexo-excerpt" class="headerlink" title="Automatic excerpt generator – hexo-excerpt"></a>Automatic excerpt generator – <a href="https://github.com/chekun/hexo-excerpt"><code>hexo-excerpt</code></a></h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><pre><code class="bash">npm install hexo-excerpt --save</code></pre><h3 id="Configuration-1"><a href="#Configuration-1" class="headerlink" title="Configuration"></a>Configuration</h3><pre><code class="yml">excerpt:  depth: 10  excerpt_excludes: []  more_excludes: []  hideWholePostExcerpts: true</code></pre>]]></content>
      
      
      <categories>
          
          <category> SiteNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker Development Log 2 -- Web Developing and GitHub Workflow</title>
      <link href="/projects/mensaarlog2/"/>
      <url>/projects/mensaarlog2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></p></blockquote><h2 id="Fetching-Data-from-Web-Development"><a href="#Fetching-Data-from-Web-Development" class="headerlink" title="Fetching Data from Web Development"></a>Fetching Data from Web Development</h2><p>Continuing from last post, we have already implemented a script that collect the Mensa menu and stored it on Google Sheets. It is time to build our web interface to connect the database.</p><h3 id="Fetch-Data-from-Google-Sheets-using-Publish"><a href="#Fetch-Data-from-Google-Sheets-using-Publish" class="headerlink" title="Fetch Data from Google Sheets using Publish"></a>Fetch Data from Google Sheets using Publish</h3><p>First, we need to publish our spreadsheet so that it is public to fetch the data.</p><ol><li><p>In the Spreadsheet, click <strong>Share</strong> → Change access to Anyone with the link.</p><p> <img src="/images/projects/sheetshare.png"></p></li><li><p>Click <strong>File</strong> → <strong>Share</strong> → <strong>Publish</strong> to the web.</p></li><li><p>Select <strong>Entire Document</strong> → <strong>Comma-separated values (.csv)</strong> and click Publish.</p></li><li><p>Copy the public CSV link.</p></li></ol><pre><code class="python">SCRIPT_URL = &#123;PUBLISH_LINK&#125;# Fetch JSON datadef fetch_menu():    try:        response = requests.get(SCRIPT_URL)        response.raise_for_status()  # Raise error if bad response        return response.json()    except requests.exceptions.RequestException as e:        print(f&quot;❌ Error fetching menu: &#123;e&#125;&quot;)        return []</code></pre><p>However, the script return no data, why?</p><pre><code class="error">Access to fetch at &#39;https://docs.google.com/spreadsheets/...&#39; from origin &#39;null&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. If an opaque response serves your needs, set the request&#39;s mode to &#39;no-cors&#39; to fetch the resource with CORS disabled.</code></pre><h3 id="CORS-Policy-and-XSS"><a href="#CORS-Policy-and-XSS" class="headerlink" title="CORS Policy and XSS"></a>CORS Policy and XSS</h3><blockquote><p>Cross-origin resource sharing (CORS) is an extension of the same-origin policy. You need it for authorized resource sharing with external third parties. – Amazon Web Services</p></blockquote><p>This is a cyber security scheme to avoid <strong>XSS (Cross-site scripting)</strong>, in a nutshell, when we run the script, the code cannot proceed because it doesn’t login to any Google account! You can imagine the request is block by a imaginary login page and our program doesn’t know how to react.</p><h2 id="Second-Attempt-–-Google-Apps-Script"><a href="#Second-Attempt-–-Google-Apps-Script" class="headerlink" title="Second Attempt – Google Apps Script"></a>Second Attempt – Google Apps Script</h2><p>Google doesn’t allow users to fetch their data casually, except this is executed under Google’s server. This means we need to run our fetching function using Google’s service. <a href="https://developers.google.com/apps-script">Apps Script</a> provide a JavaScript editor to save your code.</p><p><img src="/images/projects/appscript.png"></p><pre><code class="JavaScript">function doGet() &#123;  var sheet = SpreadsheetApp.openById(&quot;PUT_YOUR_SHEET_ID_HERE&quot;).getActiveSheet();  var data = sheet.getDataRange().getValues();  var headers = data[0];  var jsonData = [];  for (var i = 1; i &lt; data.length; i++) &#123;    var row = &#123;&#125;;    for (var j = 0; j &lt; headers.length; j++) &#123;      row[headers[j]] = data[i][j];    &#125;    jsonData.push(row);  &#125;  var output = ContentService.createTextOutput(JSON.stringify(jsonData));  output.setMimeType(ContentService.MimeType.JSON);  return output;&#125;</code></pre><p>To get the sheet ID, we can simply open the sheet and it is part of the URL:</p><p><img src="/images/projects/sheetid.png"></p><h3 id="Deploying-the-function-and-fetch-the-data"><a href="#Deploying-the-function-and-fetch-the-data" class="headerlink" title="Deploying the function and fetch the data"></a>Deploying the function and fetch the data</h3><p>Afterwards, we can deploy this function and it will generate a unique URL for the function output and we can fetch the data (here we export the data in json format) and use it in our code.</p><p><img src="/images/projects/deploy.png"></p><p>You can also double check the URL and make sure it does return the value correctly → <a href="https://script.google.com/macros/s/AKfycbzf5dQ0nWQBaxRV9B0AkFy5tdFIusaitiZdbTpEY1ZkvCGXG96cVXgbdZQf_LMeYsE/exec">link</a></p><pre><code class="python">SCRIPT_URL = &quot;URL_DEPLOYED_FROM_APP_SCRIPT&quot;;# Fetch JSON datadef fetch_menu():    try:        response = requests.get(SCRIPT_URL)        response.raise_for_status()  # Raise error if bad response        return response.json()    except requests.exceptions.RequestException as e:        print(f&quot;❌ Error fetching menu: &#123;e&#125;&quot;)        return []</code></pre><h2 id="Webpage-Implementation"><a href="#Webpage-Implementation" class="headerlink" title="Webpage Implementation"></a>Webpage Implementation</h2><p>To simplify our automation process on GitHub, we will continue implement our HTML code using Python. Our website should have two pages: <code>index.html</code> contains today’s menu, and <code>menu.html</code> contains the history of collected menus.</p><h3 id="Static-data-–-Tripe-Quotes"><a href="#Static-data-–-Tripe-Quotes" class="headerlink" title="Static data – Tripe Quotes"></a>Static data – Tripe Quotes</h3><p>We can put all the static code in strings. In Python we can store multi-line strings using <a href="https://www.geeksforgeeks.org/triple-quotes-in-python/">triple quotes</a>.</p><pre><code class="html">html = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Mensaar Today&lt;/title&gt;    &lt;style&gt;        body &#123;&#123; font-family: Arial, sans-serif; padding: 20px; text-align: center; background-image: url('src/uds_spirit.jpg'); &#125;&#125;        h1 &#123;&#123;            background: rgba(255, 255, 255, 0.8);             color: #003C71;            padding: 10px 20px;            display: inline-block;             border-radius: 10px;             box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);         &#125;&#125;        .container &#123;&#123; width: 80%; margin: auto; &#125;&#125;        .closed-message &#123;&#123; font-size: 26px; color: red; font-weight: bold; padding: 20px; background: #fff3f3; border-radius: 10px; &#125;&#125;        .menu-card &#123;&#123; background: white; padding: 15px; margin: 10px 0; border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); text-align: left; &#125;&#125;        .meal-title &#123;&#123; font-size: 20px; font-weight: bold; &#125;&#125;        .meal-components &#123;&#123; font-size: 16px; color: #666; &#125;&#125;        .meal-frequency &#123;&#123; font-size: 14px; color: #888; font-style: italic; &#125;&#125;        .button &#123;&#123; padding: 12px 20px; background: #007bff; color: white; border-radius: 5px; text-decoration: none; &#125;&#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Mensaar Menu for &#123;today&#125;&lt;/h1&gt;&lt;/br&gt;    &lt;a href=&quot;menu.html&quot; class=&quot;button&quot;&gt;📜 View Full Menu&lt;/a&gt;    &lt;div class=&quot;container&quot;&gt;    &quot;&quot;&quot;</code></pre><h3 id="Enhance-the-design-using-DataTable"><a href="#Enhance-the-design-using-DataTable" class="headerlink" title="Enhance the design using DataTable"></a>Enhance the design using <a href="https://datatables.net/">DataTable</a></h3><p>Since we will collect the menu everyday, the table in <code>menu.html</code> will become too long for loading and hard to check. We can use DataTable that provide basic table layout like filtering, searching, and sorting. Also, it is very easy to implement, simply include the JavaScript and CSS link in the HTML code and you can get the basic, but decent design.</p><h2 id="Automation-with-GitHub-Workflow"><a href="#Automation-with-GitHub-Workflow" class="headerlink" title="Automation with GitHub Workflow"></a>Automation with <a href="https://docs.github.com/en/actions/writing-workflows">GitHub Workflow</a></h2><p>Finally, after we deployed the code to GitHub, remember our original goal:</p><ol><li><p>Scrape the Mensa menu every weekday and store it to Google Sheets</p></li><li><p>Fetch the Data Collection from Google Sheets and update the website</p></li></ol><p>In fact, we can run the python script periodically using Github workflow, here are the steps:</p><ol><li><p>The workflow has to be implemented in <code>.yml</code> format, and stored in <code>.github/workflows/&#123;workflow_name&#125;.yml</code></p></li><li><p>Before running the python script, make sure python is set with all the dependencies installed:</p><pre><code class="yml">- name: 🛠 Set up Python    uses: actions/setup-python@v4    with:        python-version: &quot;3.x&quot;- name: 📦 Install dependencies    run: |        pip install requests selenium webdriver-manager gspread oauth2client- name: 🚀 Run Mensaar Scraper (update Google Sheets)    run: |        echo &quot;🧪 Starting Mensaar_scraper...&quot;        python Mensaar_scraper.py        echo &quot;✅ Scraper completed.&quot;- name: 🖼️ Run HTML Generator    run: |        echo &quot;🧪 Generating index.html &amp; menu.html&quot;        python generate_menu.py</code></pre></li><li><p>For the full workflow, you can find the skeleton code template on GitHub or you can check <a href="https://github.com/GreenMeeple/MensaarLecker/blob/main/.github/workflows/update_menu.yml">here</a>.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker Development Log 1 -- Web Crawling</title>
      <link href="/projects/mensaarlog1/"/>
      <url>/projects/mensaarlog1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></p></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Me and my friends <del>hate</del><strong>love</strong> the UdS Mensa so much! The infinite frozen food and french fries menus give us so much energy and motivation for the 5-hour afternoon coding marathon. However, no one actually knows how many potatoes they have exterminated throughout the week. We have a genius webpage created by some <a href="https://gibtesheuteschnitzel.de/">Schnitzel lover</a>. Personally, I like its minimalistic layout and determination on Schnitzel searching. </p><blockquote><p>However, we want more.</p></blockquote><p>It’s not just Schnitzel; we want to know everything about their menu. We want to know what’s inside the mensa ladies’ brains when they design next week’s menu.</p><blockquote><p>The desire never ends. We need more data, more details, more, More, <strong>MORE!</strong></p></blockquote><h2 id="Developing-Process"><a href="#Developing-Process" class="headerlink" title="Developing Process"></a>Developing Process</h2><p>Our Goal here is simple:</p><ol><li><p>Scrape the Mensa menu every weekday and store it to Google Sheets</p></li><li><p>Fetch the Data Collection from Google Sheets and update the website</p></li></ol><h2 id="Web-Scraping"><a href="#Web-Scraping" class="headerlink" title="Web Scraping"></a>Web Scraping</h2><p>To collect the data, we can use Python libraries to simplfied the process. But the basic idea it the same: we try to find the pattern of the HTML tag and locate the desired data.</p><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></h3><p>I started my journey with Beautiful Soup, one of the most popular Python web scraper packages. However, as a Uni that is well-known for its computer science program, all the menus are rendered using JavaScript. And beautiful can only scrape HTML and XML tags. So the scraper can only see an empty skeleton page:</p><p><img src="/images/projects/mensaar_empty.png"></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="https://selenium-python.readthedocs.io/">Selenium</a></h3><p>Basically, Selenium is a <a href="https://www.selenium.dev/documentation/webdriver/">Webdriver</a> that opens a browser naturally, like a human user. Then from there we can scrape the rendered information. Things get simpler once we can see the website as we see it on the browser. We just need to find the tag that contains the information we need and save it for storage.</p><h3 id="Desired-Data-and-Tags"><a href="#Desired-Data-and-Tags" class="headerlink" title="Desired Data and Tags"></a>Desired Data and Tags</h3><table><thead><tr><th align="left">Data</th><th align="left">Tag</th></tr></thead><tbody><tr><td align="left">menus</td><td align="left"><code>&lt;div class=&quot;counter&quot;&gt;</code></td></tr><tr><td align="left">date</td><td align="left"><code>&lt;div class=&quot;cursor-pointer active list-group-item&quot;&gt;</code></td></tr><tr><td align="left">main dish</td><td align="left"><code>&lt;span class=&quot;meal-title&quot;&gt;</code></td></tr><tr><td align="left">side dish</td><td align="left"><code>&lt;div class=&quot;component&quot;&gt;</code></td></tr></tbody></table><p>The first part of the task is to get the daily menu. We also get the date on the website to make the following work easier.</p><p>By the <code>find_element</code> and <code>find_elements</code> functions in Selenium, we can create a simple scraper like this:</p><pre><code class="python">from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.common.by import Bydriver = webdriver.Firefox()driver.get(&quot;https://mensaar.de/#/menu/sb&quot;)counters = driver.find_elements(By.CLASS_NAME, &quot;counter&quot;)for counter in counters:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><p>However, on the webpage there is also a counter called <code>Wahlessen.</code> Which refers to a more pricy and unpredictable menu, and we want to exclude its data:</p><pre><code class="python">counter_title = counter.find_element(By.CLASS_NAME, &quot;counter-title&quot;).text.strip()# Filter for specified counter titlesif counter_title in [&quot;Menü 1&quot;, &quot;Menü 2&quot;, &quot;Mensacafé&quot;]:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>In order to make the database easy to be accessed by other users&#x2F;students, we decided to deploy the data set to Google SpreadSheets.</p><pre><code class="python">with open(output_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(result, f, ensure_ascii=False, indent=2)print(f&quot;Results saved to &#123;output_file&#125;&quot;)# Save the updated occurrence counts to the JSON filecount_result = &#123;    &quot;meal_counts&quot;: dict(meal_count),    &quot;component_counts&quot;: dict(component_count)&#125;with open(count_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(count_result, f, ensure_ascii=False, indent=2)print(f&quot;Counts saved to &#123;count_file&#125;&quot;)</code></pre><h3 id="Change-the-time-format"><a href="#Change-the-time-format" class="headerlink" title="Change the time format"></a>Change the time format</h3><p>Once we fetch data, you may notice that the website display the date in german format e.g. “Freitag, 21. März 2025”, which is not recognized by Google Sheets directly. So we need to make a function to convert them before uploading:</p><pre><code class="python">GERMAN_MONTHS = &#123;    &quot;Januar&quot;: &quot;01&quot;, &quot;Februar&quot;: &quot;02&quot;, &quot;März&quot;: &quot;03&quot;, &quot;April&quot;: &quot;04&quot;,    &quot;Mai&quot;: &quot;05&quot;, &quot;Juni&quot;: &quot;06&quot;, &quot;Juli&quot;: &quot;07&quot;, &quot;August&quot;: &quot;08&quot;,    &quot;September&quot;: &quot;09&quot;, &quot;Oktober&quot;: &quot;10&quot;, &quot;November&quot;: &quot;11&quot;, &quot;Dezember&quot;: &quot;12&quot;&#125;def format_date(german_date):    match = re.search(r&quot;(\d&#123;1,2&#125;)\. (\w+) (\d&#123;4&#125;)&quot;, german_date)    if match:        day, month, year = match.groups()        month_number = GERMAN_MONTHS.get(month, &quot;00&quot;)        return f&quot;&#123;year&#125;-&#123;month_number&#125;-&#123;int(day):02d&#125;&quot;    return &quot;0000-00-00&quot;</code></pre><h2 id="Upload-the-data-to-Google-Sheets"><a href="#Upload-the-data-to-Google-Sheets" class="headerlink" title="Upload the data to Google Sheets"></a>Upload the data to Google Sheets</h2><p>In order to interact with the Google Sheets, we need to use Google API. First, go to <a href="https://console.cloud.google.com/">Google Cloud Console</a>.</p><p><img src="/images/projects/googleapi.png"></p><p>Create a new project. Next, go to <strong>API and Services</strong>, click <strong>Enable API and Services</strong></p><p><img src="/images/projects/apiservices.png"></p><p>Search <strong>Google Sheets API</strong>, select it and choose <strong>Enable</strong>。</p><p><img src="/images/projects/googlesheet.png"></p><p>Move <strong>Credentials</strong> from the sidebar, then choose <strong>Create credentials</strong> → <strong>Create service account</strong></p><p><img src="/images/projects/credentials.png"></p><p>In step 2, choose the role <strong>Editor</strong></p><p><img src="/images/projects/editor.png"></p><p>Now, when you come back to the <strong>Credentials</strong> page, you should see a newly generated email under <strong>Service Accounts</strong>, click it and select the tab <strong>Keys</strong></p><p><img src="/images/projects/key.png"></p><p>Select <strong>Create new key</strong>, choose <strong>JSON</strong> format, the file should start downloading automatically.</p><blockquote><p><strong><code>Important Notice</code></strong><br><code>This JSON file contains sensitive data, you should NEVER directly use it in your code, save it as an environment variable or save it as a secret on Github</code></p></blockquote><p><img src="/images/projects/secret.png"></p><p>With this key we can login the email we just created in <strong>Service Accounts</strong>, so that it is treated as a virtual users when running the script. Same as human users, in order to access the sheet we need to add this email as an editor in Google Sheets.</p><pre><code class="python">try:    # Read and validate credentials.json before using it    if not os.path.exists(&quot;credentials.json&quot;):        print(&quot;❌ credentials.json not found!&quot;)        return    with open(&quot;credentials.json&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:        raw_creds = f.read()        creds_data = json.loads(raw_creds)    # Save to a temp file just in case gspread needs it as a file    temp_path = &quot;parsed_credentials.json&quot;    with open(temp_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:        json.dump(creds_data, f)    creds = ServiceAccountCredentials.from_json_keyfile_name(temp_path, scope)    client = gspread.authorize(creds)    sheet = client.open(SHEET_NAME).sheet1    print(&quot;✅ Google Sheets Auth OK&quot;)</code></pre><h2 id="End-of-Scraping"><a href="#End-of-Scraping" class="headerlink" title="End of Scraping"></a>End of Scraping</h2><p>Now we all set! Next, we need to display our collected results on web interfaces.</p><p>Continue Reading: <a href="../mensaarlog2">MensaarLecker Development Log 2 – Web Developing and GitHub Workflow</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🍽 🥨 MensaarLecker -- A beloved tool to find out Mensa Ladies&#39; favourite menu using Selenium🥨 🍽</title>
      <link href="/projects/mensaar/"/>
      <url>/projects/mensaar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Repository: <a href="https://github.com/greenmeeple/MensaarLecker">MensaarLecker</a></p></blockquote><p>As an <a href="https://www.uni-saarland.de/start.html">UdS</a> Student,<br>Are you tired of seeing french fries🍟 3 times a week, or wondering when I can have the best pizza 🍕 in the Mensacafe?<br>MensaarLecker aims to collect all the data from Menu 1, 2, and Mensacafe to trace your favourite, or Mensa Ladies’, favourite menu!</p><hr><h2 id="🥗-Description"><a href="#🥗-Description" class="headerlink" title="🥗 Description"></a>🥗 Description</h2><p>A fully automated scraper and static website for the Saarbrücken Mensa, powered by Python, Selenium, Google Sheets, and GitHub Actions.</p><blockquote><p>Get a clean and daily-updated overview of meals from <a href="https://mensaar.de/">mensaar.de</a>, with searchable history, meal components, and frequency stats.</p></blockquote><hr><h2 id="🌐-Live-Demo"><a href="#🌐-Live-Demo" class="headerlink" title="🌐 Live Demo"></a>🌐 Live Demo</h2><p>👉 <a href="https://your-username.github.io/MensaarLecker">View Website</a><br>👉 <a href="https://docs.google.com/spreadsheets/d/your-sheet-id-here">View Data in Google Sheets</a></p><p><img src="/images/projects/menu.png"></p><hr><h2 id="📅-Features"><a href="#📅-Features" class="headerlink" title="📅 Features"></a>📅 Features</h2><ul><li>✅ Scrapes the Saarbrücken Mensa daily menu</li><li>✅ Publishes structured data to a connected Google Sheet</li><li>✅ Generates static HTML pages:<ul><li><strong><code>index.html</code></strong> – Today’s menu with meal frequency counts</li><li><strong><code>menu.html</code></strong> – Full searchable menu with DataTables</li></ul></li><li>✅ Automatically updates via GitHub Actions at <strong>10:00 AM UTC on weekdays</strong></li><li>✅ Beautiful card-style layout &amp; component display</li><li>✅ No server required — 100% static</li></ul><hr><h2 id="🧠-Meal-Frequency-Display-Example"><a href="#🧠-Meal-Frequency-Display-Example" class="headerlink" title="🧠 Meal Frequency Display Example"></a>🧠 Meal Frequency Display Example</h2><p>The homepage shows how often each meal has been served based on historical data since 2025.03.20:</p><p><strong>🍽️ Pasta mit Tomatensoße</strong><br><em>📊 Seen since 2025.03.20</em><br>✅ Geriebener Käse<br>✅ Rucola</p><p><img src="/images/projects/main.png"></p><hr><h2 id="📁-Project-Structure"><a href="#📁-Project-Structure" class="headerlink" title="📁 Project Structure"></a>📁 Project Structure</h2><pre><code class="bash">.├── Mensaar_scraper.py         # Scrapes from mensaar.de and writes to Google Sheet├── generate_menu.py           # Reads the sheet and generates index.html and menu.html├── credentials.json           # Google service account key (excluded from repo)├── index.html                 # Main website page with today&#39;s menu├── menu.html                  # Full searchable table of meals├── .github/workflows/│   └── update_menu.yml        # GitHub Actions automation├── src/│   └── uds_spirit.jpg         # Soul of this project└── README.md</code></pre><h2 id="📝-Development-Log"><a href="#📝-Development-Log" class="headerlink" title="📝 Development Log"></a>📝 Development Log</h2><p><a href="../mensaarlog1">MensaarLecker Development Log 1 – Web Crawling</a><br><a href="../mensaarlog2">MensaarLecker Development Log 2 – Web Developing and GitHub Workflow</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appium commands that are commonly used on Mac</title>
      <link href="/appium/"/>
      <url>/appium/</url>
      
        <content type="html"><![CDATA[<p>In this example, we will use <a href="https://github.com/appium/appium-inspector">Appium Inspector</a> to start a seesion on your emulator on <a href="https://developer.android.com/studio">Android Studio</a>.</p><h2 id="Start-appium"><a href="#Start-appium" class="headerlink" title="Start appium"></a>Start appium</h2><p><img src="/images/coding/appium/start.png"></p><p>First, start the connection with Appium by <code>cmd appium --allow-cors</code>. It also gives you the <code>remote url</code> and the <code>automationName</code> that can be used in the <a href="https://github.com/appium/appium-inspector">Appium Inspector</a></p><p><img src="/images/coding/appium/inspector.png"></p><h2 id="Start-Session"><a href="#Start-Session" class="headerlink" title="Start Session"></a>Start Session</h2><ul><li><strong>deviceName</strong>:  <code>adb devices</code></li><li><strong>platformName</strong> - <code>appium driver list</code></li><li><strong>platformVersion</strong> -  <code>adb shell getprop ro.build.version.release</code></li></ul><p><img src="/images/coding/appium/session.png"></p><p><img src="/images/coding/appium/inspector2.png"></p><p>Now you can start a session in your emulator, but it always begins from the home page. To directly start a session on certain App, you also need to provide the  <code>appPackage</code> and the <code>appActivity</code>.</p><h2 id="Session-with-Apps"><a href="#Session-with-Apps" class="headerlink" title="Session with Apps"></a>Session with Apps</h2><p>If your app is downloaded from the PlayStore. It is possible that the apk file name&#x2F;path is hidden. However, you can You can simply open the app and check its name by <code>adb shell dumpsys window | grep mCurrentFocus</code>.</p><p>It returns the <code>appPackage</code> and the current <code>appActivity</code> of the App, which are both necessary for our seesion to start. However, sometimes the current activity may not be directly opened. Then we need to check all the possible activities this App contans and try them out.</p><p>To check the activity list, we can use <code>adb shell dumpsys package YOUR_APP_appPackage | grep -i activity</code>.</p><p><img src="/images/coding/appium/activity.png"></p><p>Now, we can start our emulator, and run the command <code>adb shell am start -n YOUR_APP_appPackage/YOUR_APP_appActivity</code> to see whether it can start the App successfully. If it works we can use it in our inspector.</p><p><img src="/images/coding/appium/cici.png"></p>]]></content>
      
      
      <categories>
          
          <category> Appium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium </tag>
            
            <tag> App Testing </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automata, Games, and Verification (Portal)</title>
      <link href="/notes/agv/"/>
      <url>/notes/agv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Bernd Finkbeiner</p></blockquote><h2 id="Chapter-1-Introduction"><a href="#Chapter-1-Introduction" class="headerlink" title="Chapter 1. Introduction"></a>Chapter 1. Introduction</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-1/">1.1. Model Checking</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-2/">1.2. Synthesis</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv1-3/">1.3. The Logic-Automata Connection</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-2-Buchi-Automata"><a href="#Chapter-2-Buchi-Automata" class="headerlink" title="Chapter 2. Büchi Automata"></a>Chapter 2. Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-1/">2.1. Preliminaries</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-2/">2.2. Automata over Infinite Words</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv2-3/">2.3. The Büchi Acceptance Condition</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-3-Buchi’s-Characterization-Theorem"><a href="#Chapter-3-Buchi’s-Characterization-Theorem" class="headerlink" title="Chapter 3. Büchi’s Characterization Theorem"></a>Chapter 3. Büchi’s Characterization Theorem</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-1/">3.1. Kleene’s Theorem</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-2/">3.2. $\omega$-regular language</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-3/">3.3 Closure Properties of the Büchi-recognizable languages (Intersection and Union)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-4/">3.4 Closure Properties of the Büchi-recognizable languages (Concatenations)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv3-5/">3.5 Büchi’s Characterization Theorem</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-4-Deterministic-Buchi-Automata"><a href="#Chapter-4-Deterministic-Buchi-Automata" class="headerlink" title="Chapter 4. Deterministic Büchi Automata"></a>Chapter 4. Deterministic Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv4-1/">4.1. Deterministic vs. Nondeterministic Büchi Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv4-2/">4.2. Complementation of deterministic Büchi Automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-5-Complementation-of-Buchi-automata"><a href="#Chapter-5-Complementation-of-Buchi-automata" class="headerlink" title="Chapter 5. Complementation of Büchi automata"></a>Chapter 5. Complementation of Büchi automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-1/">5.1. Infinite Directed Acyclic Graph (DAG)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-2/">5.2. Ranking of DAG</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv5-3/">5.3. Complement Büchi Automaton with Odd Ranking</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-6-Logics-over-Infinite-Sequences"><a href="#Chapter-6-Logics-over-Infinite-Sequences" class="headerlink" title="Chapter 6. Logics over Infinite Sequences"></a>Chapter 6. Logics over Infinite Sequences</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-1/">6.1. Linear-Time Temporal Logic (LTL)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-2/">6.2. Expressing Program Properties using LTL</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-3/">6.3. LTL and Counting Languages</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-4/">6.4. Quantified Propositional Temporal Logic (QPTL)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-5/">6.5. Monadic Second-Order Logic of One Successor (S1S)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-6/">6.6. Express QPTL using S1S</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv6-7/">6.7. S1S$_0$ and Büchi-recognizable LanguageBüchi-recognizable</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-7-Alternating-Buchi-Automata"><a href="#Chapter-7-Alternating-Buchi-Automata" class="headerlink" title="Chapter 7. Alternating Büchi Automata"></a>Chapter 7. Alternating Büchi Automata</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-1/">7.1. Alternating Büchi Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-2/">7.2. From LTL to Alternating Büchi Automata</a></td><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-2/">$\varphi&#x3D;(\Diamond p)\ \mathcal{U}\ (\square q)$</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv7-3/">7.3. Translating Alternating to Nondeterministic automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-8-Linear-Arithmetic"><a href="#Chapter-8-Linear-Arithmetic" class="headerlink" title="Chapter 8. Linear Arithmetic"></a>Chapter 8. Linear Arithmetic</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-1/">8.1. Linear Arithmetic (Theory)</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-2/">8.2 Encoding real numbers</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-3/">8.3 Translation from Linear Arithmetic to Automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-4/">8.4 Homogenous Inequality Testing is Automatic</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv8-5/">8.5 From Linear Arithmetic to Automata</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-9-LTL-Model-Checking"><a href="#Chapter-9-LTL-Model-Checking" class="headerlink" title="Chapter 9. LTL Model Checking"></a>Chapter 9. LTL Model Checking</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-1/">9.1 Automata-based LTL Model Checking with Sequential Circuits</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-2/">9.2 Nested depth-first search</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv9-3/">9.3 The Emerson-Lei algorithm</a></td><td align="left"></td></tr></tbody></table><h2 id="Chapter-10-McNaughton’s-Theorem"><a href="#Chapter-10-McNaughton’s-Theorem" class="headerlink" title="Chapter 10. McNaughton’s Theorem"></a>Chapter 10. McNaughton’s Theorem</h2><table><thead><tr><th align="left">Sections</th><th align="left">Exercise</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-1/">10.1 The Muller Acceptance Condition</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-2/">10.2 From Büchi automata to Muller automata</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/AGV/agv10-3/">10.3 Closure Properties of Muller Automata under Boolean Operations</a></td><td align="left"></td></tr></tbody></table><hr><p>Further Reading: <a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UdS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode SQL 50 (Portal 🚪)</title>
      <link href="/notes/sql50/"/>
      <url>/notes/sql50/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a portal for my walkthroughs of SQL 50 on Leetcode</p></blockquote><p><a href="https://leetcode.com/studyplan/top-sql-50/">Link of Leetcode SQL 50</a></p><table><thead><tr><th align="left">Select</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1757/">1757. Recyclable and Low Fat Products</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-584/">584. Find Customer Referee</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-595/">595. Big Countries</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1148/">1148. Article Views I</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1683/">1683. Invalid Tweets</a></td></tr></tbody></table><table><thead><tr><th align="left">Basic Joins</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1378/">1378. Replace Employee ID With The Unique Identifier</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1068/">1068. Product Sales Analysis I</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1581/">1581. Customer Who Visited but Did Not Make Any Transactions</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-197/">197. Rising Temperature</a></td></tr></tbody></table><table><thead><tr><th align="left">Advanced String Functions &#x2F; Regex &#x2F; Clause</th></tr></thead><tbody><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1667/">1667. Fix Names in a Table</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1683/">1527. Patients With a Condition</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-196/">196. Delete Duplicate Emails</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-176/">176. Second Highest Salary</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1484/">1484. Group Sold Products By The Date</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1327/">1327. List the Products Ordered in a Period</a></td></tr><tr><td align="left"><a href="https://greenmeeple.github.io/notes/LeetCode/sql50-1517/">1517. Find Users With Valid E-Mails</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-zhruby -- Implementing HTML Ruby tag in Hexo</title>
      <link href="/projects/hexo-zhruby/"/>
      <url>/projects/hexo-zhruby/</url>
      
        <content type="html"><![CDATA[<p>Implement the HTML tag <code>&lt;ruby&gt;</code> for Hexo using <a href="https://hexo.io/docs/tag-plugins">Tag Plugin</a> feature. Provide auto pronounciation indication for Jyutping (Cantonese), Zhuyin (Taiwanese Mandarin), and Pinyin (Chinese Mandarin), and the default setting for general usage. Support Traditonal and Simplified Chinese characters. </p><p>Inspired by the <a href="https://github.com/jamespan/hexo-ruby-character">hexo-ruby-character</a> by <a href="https://github.com/jamespan">jamespan</a>.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><pre><code>npm install hexo-zhruby --save</code></pre><h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h2><p>Ruby (ルビ) is also known as <a href="https://en.wikipedia.org/wiki/Furigana">Furigana</a> (振り仮名).  It contains two basic use cases:</p><ol><li>To clarify or indicate the pronunciation for readers</li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun</a>, in which the characters have different pronunciations than they seem due to convention or for a specific context. For example, the pronunciation of 煙草 in Japanese is <em>tabako (tobacco)</em>.</li></ol><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p><strong>TLDR</strong>: Usage: <code>&#123;% tag rb|rt %&#125;</code>; Tag options: <code>ruby_def</code>, <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>.</p><hr><h3 id="For-the-1st-use-case-pronunciation-indication"><a href="#For-the-1st-use-case-pronunciation-indication" class="headerlink" title="For the 1st use case (pronunciation indication):"></a>For the 1st use case (pronunciation indication):</h3><p><code>ruby_def</code> allows any language, and the spacing in <code>rp</code> will expand evenly with respect to the word length in <code>rt</code>.</p><ul><li><code>&#123;% ruby_def 基本|きほん %&#125;</code> → <ruby>基本<rp> (</rp><rt>きほん</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|기본 %&#125;</code> → <ruby>基本<rp> (</rp><rt>기본</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|fundamental %&#125;</code> → <ruby>基本<rp> (</rp><rt>fundamental</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|θεμελιώδες %&#125;</code> → <ruby>基本<rp> (</rp><rt>θεμελιώδες</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|базовый %&#125;</code> → <ruby>基本<rp> (</rp><rt>базовый</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 基本|základní %&#125;</code> → <ruby>基本<rp> (</rp><rt>základní</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def fundamental|基本 %&#125;</code> → <ruby>fundamental<rp> (</rp><rt>基本</rt><rp>)</li></ul><p><code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code> refers to <strong>Jyutping</strong>, <strong>Pinyin</strong>, <strong>Zhuyin</strong> respectively. </p><p>No need to enter the pronunciation manually in <code>rt</code>; the value will automatically be returned.</p><ul><li><code>&#123;% ruby_zy 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>jī běn</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 基本 %&#125;</code> → <ruby>基本<rp> (</rp><rt>gei1 bun2</rt><rp>) </rp></ruby></li></ul><hr><h3 id="For-the-2nd-use-case-Gikun"><a href="#For-the-2nd-use-case-Gikun" class="headerlink" title="For the 2nd use case (Gikun):"></a>For the 2nd use case (Gikun):</h3><p>Same usage for <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_def special|basic %&#125;</code> → <ruby>special<rp> (</rp><rt>basic</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_def 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>基本</rt><rp>)</li></ul><p>In <code>ruby_jy</code>, <code>ruby_py</code>, <code>ruby_zy</code>, you can also add <code>|rt</code> just like <code>ruby_def</code>.</p><ul><li><code>&#123;% ruby_zy 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 特別|special %&#125;</code> → <ruby>特別<rp> (</rp><rt>special</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_zy 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>ㄐㄧ ㄅㄣˇ</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_py 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>jī běn</rt><rp>) </rp></ruby></li><li><code>&#123;% ruby_jy 特別|基本 %&#125;</code> → <ruby>特別<rp> (</rp><rt>gei1 bun2</rt><rp>) </rp></ruby></li></ul><p>Notice that the <code>rt</code> output depends on the pronunciation in <code>rt,</code> but <strong>not</strong> <code>rp.</code> This feature is only available when <code>rt</code> is a <strong>Chinese Character</strong> in <a href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)">CJK Unified Ideographs</a> (\U4E00-\U9FFF).</p><p>If the input of <code>rt</code> is not in CJK Unified Ideographs, it is considered as <code>ruby_def</code>.</p><h2 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h2><p>The Chinese language contains a lot of <strong>Homophones</strong>, which can be resolved by context most of the time. However, for long sentences (&gt;&#x3D; 15 characters), or very specific names and terms, the auto-generation from 1st use case may not be very sensitive.</p><p>Please use <code>ruby_def</code> if it happens or contribute to this project by providing a more sensitive or advanced Chinese vocabulary library.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://en.wikipedia.org/wiki/CJK_characters">CJK Unified Ideographs (Unicode block)</a></li><li><a href="https://en.wikipedia.org/wiki/Homophone">Homophone</a></li><li><a href="https://en.wiktionary.org/wiki/%E7%BE%A9%E8%A8%93#Japanese">Gikun (japanese only)</a></li><li><a href="https://en.wikipedia.org/wiki/Kanji#Special_readings">Gikun (English version under the article Kanji)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby">&lt;ruby&gt;: The Ruby Annotation element</a></li><li><a href="https://en.wikibooks.org/wiki/Unicode/Character_reference">Unicode&#x2F;Character reference</a></li><li><a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters">Universal Character Set characters (Unicode)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
            <tag> HTML </tag>
            
            <tag> Cantonese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Hexo Plugin functions to create a custom Tag Plugin</title>
      <link href="/js/hexo-tagplugin-2/"/>
      <url>/js/hexo-tagplugin-2/</url>
      
        <content type="html"><![CDATA[<p><strong>Disclaimer</strong>: For explaination on <code>Tag Plugin</code> and <code>Scripts</code> in Hexo, you may take a look of <a href="../hexo-tagplugin-1">this post</a>.</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><blockquote><p>Be Careful! Don’t mix <code>Plugin</code>, <code>Tag</code>, and <code>Tag Plugin</code> in Hexo, even though they look extremely similar.</p></blockquote><p>Usually, <code>Plugin</code> are for complicated functions. Yet if you want to publish your custom <code>Tag Plugin</code> to the NPM registry or even shown on the Hexo Community Page, <code>Plugin</code> would be a very good choice.</p><h3 id="From-Script-to-Plugin"><a href="#From-Script-to-Plugin" class="headerlink" title="From Script to Plugin"></a>From Script to Plugin</h3><p>Assume you already have a script call <code>index.js</code>, and you want to turn it into package, you may do the following:</p><ol><li><p>Navigate <code>node_modules</code> folder in your project folder. This is the folder where Hexo stored all the packages for your blog. Create a folder inside and the name must begin with <code>hexo-</code> or Hexo will ignore it.</p></li><li><p>Your folder must contain at least two files: the actual JavaScript code and <code>package.json</code> file that describes the purpose of the plugin and sets its dependencies.</p><pre><code class="directory">.├── index.js└── package.json</code></pre></li><li><p>In <code>package.json</code>, it should at least have the <code>name</code>, <code>version</code> and <code>main</code> entries set.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;hexo-my-plugin&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;main&quot;: &quot;index&quot;&#125;</code></pre></li><li><p>In the root <code>package.json</code> of your hexo project, you also need to list your <code>plugin</code> as a <code>dependency</code>, for Hexo to detect and load it.<br> Please remember that if your package contain other dependencies, also install and list them for testing and dubugging.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;hexo-site&quot;,    &quot;version&quot;: &quot;0.0.0&quot;,    &quot;private&quot;: true,    &quot;scripts&quot;: &#123;        &quot;build&quot;: &quot;hexo generate&quot;,        &quot;clean&quot;: &quot;hexo clean&quot;,        &quot;deploy&quot;: &quot;hexo deploy&quot;,        &quot;server&quot;: &quot;hexo server&quot;    &#125;,    &quot;hexo&quot;: &#123;        &quot;version&quot;: &quot;&quot;    &#125;,    &quot;dependencies&quot;: &#123;        &quot;hexo&quot;: &quot;^7.3.0&quot;,        ...        &quot;hexo-my-plugin&quot;: &quot;0.0.1&quot;,        &quot;my-plugin-dependency1&quot;: &quot;2.0.0&quot;,        &quot;my-plugin-dependency2&quot;: &quot;2.0.0&quot;    &#125;&#125;</code></pre></li></ol><blockquote><p>If you run command that check all the package after step 4, for exmaple <code>hexo clean</code>, it will check all the packages in <code>node_modules</code> and remove packages that are not publish on npm.</p></blockquote><h2 id="Publish-Plugin-to-npm"><a href="#Publish-Plugin-to-npm" class="headerlink" title="Publish Plugin to npm"></a>Publish Plugin to npm</h2><p>To publish your package on the NPM registry, don’t forget you have to setup your account on <a href="https://www.npmjs.com/">npm</a> first.</p><p>After creating the account, open your terminal and run <code>npm login</code> in the root of your package. </p><p>Enter your <code>username</code> and <code>password</code>, then you should see a message like this if login is successful,</p><pre><code class="cmd">Logged in as &lt;your-username&gt; on https://registry.npmjs.org/.</code></pre><p>Once you logged-in, you may simply publish your folder with <code>npm publish</code> command.</p><h2 id="Publish-Plugin-to-Hexo"><a href="#Publish-Plugin-to-Hexo" class="headerlink" title="Publish Plugin to Hexo"></a>Publish Plugin to Hexo</h2><p>After publish your plugin package in npm, you can also publish it to Hexo official.</p><h3 id="Fork-and-Clone"><a href="#Fork-and-Clone" class="headerlink" title="Fork and Clone"></a>Fork and Clone</h3><p>First of all, <code>Fork</code> <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a> from Github</p><p><img src="/images/coding/hexo_plugin/fork.png"></p><p>Then <code>Clone</code> the repository to your computer and install dependencies.</p><pre><code class="cmd">$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install</code></pre><h3 id="Add-your-Plugin-to-the-list"><a href="#Add-your-Plugin-to-the-list" class="headerlink" title="Add your Plugin to the list"></a>Add your Plugin to the list</h3><p>Create a new yaml file in <code>source/_data/plugins/</code>, use your plugin name as the file name</p><p>Edit <code>source/_data/plugins/&lt;your-plugin-name&gt;.yml</code> and add your plugin. For example:</p><p><img src="/images/coding/hexo_plugin/plugin_yml.png"></p><h3 id="Push-the-branch"><a href="#Push-the-branch" class="headerlink" title="Push the branch"></a>Push the branch</h3><p>Create a pull request and describe the change. Hexo official create a nice form to make sure you have included everything needed.</p><p><img src="/images/coding/hexo_plugin/pull_form.png"></p><p><img src="/images/coding/hexo_plugin/pull_req.png"></p><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>You may check the progress on the pull requests history.<br>Once it is closed you can see your plugin on the Hexo Plugins Community.</p><p><img src="/images/coding/hexo_plugin/pull_closed.png"></p><p><img src="/images/coding/hexo_plugin/hexo_list.png"></p><h2 id="Example-work"><a href="#Example-work" class="headerlink" title="Example work"></a>Example work</h2><p>As you may see, I also made my Plugin “Hexo-zhruby” for Hexo and you can now see it on the community.<br>For more details and see how it works, you may check <a href="../hexo-zhruby/">here</a>.</p><hr><p>Further Reading:</p><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li><li><a href="https://docs.npmjs.com/cli/v8/commands/npm-publish">npm-publish</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Hexo Scripts functions to create a custom Tag Plugin</title>
      <link href="/js/hexo-tagplugin-1/"/>
      <url>/js/hexo-tagplugin-1/</url>
      
        <content type="html"><![CDATA[<p>To color your personal Hexo Blog with more features, scripts and plugins are your powerful tools to use. Below we are trying to create our own <code>tag plugin</code> for the Hexo blog.</p><h2 id="Tag-Plugin"><a href="#Tag-Plugin" class="headerlink" title="Tag Plugin"></a>Tag Plugin</h2><blockquote><p>Be careful! Tag plugins are different from <a href="https://hexo.io/docs/front-matter">post tags</a>.</p></blockquote><p>Tag plugins are special type of syntax that you may use in your Markdown file.</p><p>Hexo has already provided some default Tag plugins like <code>Block Quote</code> and <code>iframe</code>.</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>For example, the syntax of <code>iframe</code> tag is:</p><pre><code class="Markdown">&#123;% iframe url [width] [height] %&#125;</code></pre><p>Let say I want to embed a video from me and my friends’ YouTube video:</p><pre><code class="Markdown">&#123;% iframe https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z 820 461%&#125;</code></pre><p>And that’s how it looks like:</p><iframe src="https://www.youtube.com/embed/XIOl6BU7s9I?si=yTYsHIXNM6o-Zl9Z" width="820" height="461" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><p>Let say we want to create our own tag plugin, we can use the Hexo <code>script</code> function. Here’re the steps.</p><ol><li><p>Create a JavaScript file with function <code>hexo.extend.tag.register(&quot;tag_name&quot;, args)</code>. You may also put your own function inside so that the second argument can also be <code>function (args)&#123;&#125;</code></p><p> Here is an example of a function that create a tag named <code>youtube</code>, with embedding video function:</p><pre><code class="JavaScript">hexo.extend.tag.register(&quot;youtube&quot;, function (args) &#123;    var id = args[0];    return (        &#39;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/&#39; +        id +        &#39;&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&#39;    );&#125;);</code></pre></li><li><p>Put your JavaScript files in the <code>scripts</code> folder. If your project folder is new, you may not be able to find it. This is because <code>scripts</code> folder is actually under the <code>Themes</code> folder.</p><p> You may check <a href="https://hexo.io/docs/themes">here</a> to see the structure of <code>themes</code> and create your own one. Or you may be simply find a template on the <a href="https://hexo.io/themes/">Hexo themes community</a> then put your <code>.js</code> file into the theme.</p></li><li><p>It is done! Hexo will load them during initialization and you may use them in your blog post designs.</p></li></ol><h3 id="Beyond-Scripts"><a href="#Beyond-Scripts" class="headerlink" title="Beyond Scripts"></a>Beyond Scripts</h3><p>If you are not satisfied with creating a local tag plugin, but a public one that will be seen by the community, you should consider using Hexo <code>plugin</code> function instead.</p><p>check <a href="../hexo-tagplugin-2">here</a> to continue the journey.</p><hr><p>Further Reading:</p><ul><li><a href="https://hexo.io/docs/plugins">Hexo Plugins and Scripts</a></li><li><a href="https://hexo.io/docs/tag-plugins">Hexo Tag Plugins</a></li><li><a href="https://hexo.io/api/tag">Hexo Tag Api</a></li><li><a href="https://hexo.io/plugins/">Hexo Plugins Community</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Railroad Diagram of version range operators</title>
      <link href="/js/json-dependencies-diagram/"/>
      <url>/js/json-dependencies-diagram/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a image version of the post <a href="../json-dependencies/">here</a></p></blockquote><p><a name="range-set"></a></p><p><strong>range-set:</strong><br><img src="/images/coding/json_dep_diagram/range-set.png" alt="range-set"></p><pre><code class="EBNF">range-set   ::= range ( logical-or range )*</code></pre><p><strong>logical-or:</strong></p><p><img src="/images/coding/json_dep_diagram/logical-or.png" alt="logical-or"></p><pre><code class="EBNF">logical-or  ::= &#39; &#39;* &#39;||&#39; &#39; &#39;*</code></pre><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="range"></a></p><p><strong>range:</strong></p><p><img src="/images/coding/json_dep_diagram/range.png" alt="range"></p><pre><code class="EBNF">range   ::= hyphen           | simple ( &#39; &#39; simple )*           | &#39;&#39;</code></pre><p>referenced by: <a href="#range-set">range-set</a></p><p><a name="hyphen"></a></p><p><strong>hyphen:</strong></p><p><img src="/images/coding/json_dep_diagram/hyphen.png" alt="hyphen"></p><pre><code class="EBNF">hyphen   ::= partial &#39; - &#39; partial</code></pre><p>referenced by: <a href="#range">range</a></p><p><a name="simple"></a></p><p><strong>simple:</strong></p><p><img src="/images/coding/json_dep_diagram/simple.png" alt="simple"></p><pre><code class="EBNF">simple   ::= primitive           | partial           | tilde           | caret</code></pre><p>referenced by: <a href="#range">range</a></p><p><a name="primitive"></a></p><p><strong>primitive:</strong></p><p><img src="/images/coding/json_dep_diagram/primitive.png" alt="primitive"></p><pre><code class="EBNF">primitive   ::= ( &#39;&lt;&#39; | &#39;&gt;&#39; | &#39;&gt;=&#39; | &#39;&lt;=&#39; | &#39;=&#39; ) partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="partial"></a></p><p><strong>partial:</strong></p><p><img src="/images/coding/json_dep_diagram/partial.png" alt="partial"></p><pre><code class="EBNF">partial  ::= xr ( &#39;.&#39; xr ( &#39;.&#39; xr qualifier? )? )?</code></pre><p>referenced by:</p><ul><li><a href="#caret">caret</a></li><li><a href="#hyphen">hyphen</a></li><li><a href="#primitive">primitive</a></li><li><a href="#simple">simple</a></li><li><a href="#tilde">tilde</a></li></ul><p><a name="xr"></a></p><p><strong>xr:</strong></p><p><img src="/images/coding/json_dep_diagram/xr.png" alt="xr"></p><pre><code class="EBNF">xr    ::= &#39;x&#39;        | &#39;X&#39;        | &#39;*&#39;        | nr</code></pre><p>referenced by: <a href="#partial">partial</a></p><p><a name="nr"></a></p><p><strong>nr:</strong></p><p><img src="/images/coding/json_dep_diagram/nr.png" alt="nr"></p><pre><code class="EBNF">nr    ::= &#39;0&#39;        | [&#39;1&#39;-&#39;9] [&#39;0&#39;-&#39;9]*</code></pre><p>referenced by:</p><ul><li><a href="#part">part</a></li><li><a href="#xr">xr</a></li></ul><p><a name="tilde"></a></p><p><strong>tilde:</strong></p><p><img src="/images/coding/json_dep_diagram/tilde.png" alt="tilde"></p><pre><code class="EBNF">tilde    ::= &#39;~&#39; partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="caret"></a></p><p><strong>caret:</strong></p><p><img src="/images/coding/json_dep_diagram/caret.png" alt="caret"></p><pre><code class="EBNF">caret    ::= &#39;^&#39; partial</code></pre><p>referenced by: <a href="#simple">simple</a></p><p><a name="qualifier"></a></p><p><strong>qualifier:</strong></p><p><img src="/images/coding/json_dep_diagram/qualifier.png" alt="qualifier"></p><pre><code class="EBNF">qualifier   ::= ( &#39;-&#39; pre )? ( &#39;+&#39; build )?</code></pre><p>referenced by: <a href="#partial">partial</a></p><p><a name="pre"></a></p><p><strong>pre:</strong></p><p><img src="/images/coding/json_dep_diagram/pre.png" alt="pre"></p><pre><code class="EBNF">pre     ::= parts</code></pre><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="build"></a></p><p><strong>build:</strong></p><p><img src="/images/coding/json_dep_diagram/build.png" alt="build"></p><pre><code class="EBNF">build   ::= parts</code></pre><p>referenced by: <a href="#qualifier">qualifier</a></p><p><a name="parts"></a></p><p><strong>parts:</strong></p><p><img src="/images/coding/json_dep_diagram/parts.png" alt="parts"></p><pre><code class="EBNF">parts   ::= part ( &#39;.&#39; part )*</code></pre><p>referenced by:</p><ul><li><a href="#build">build</a></li><li><a href="#pre">pre</a></li></ul><p><a name="part"></a></p><p><strong>part:</strong></p><pre><code class="EBNF">part    ::= nr | [-0-9A-Za-z]+</code></pre><p><img src="/images/coding/json_dep_diagram/part.png" alt="part"></p><hr><p>generated by <a href="https://www.bottlecaps.de/rr/ui">RR - Railroad Diagram Generator</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Explaination of version range operators in package.json for package dependencies</title>
      <link href="/js/json-dependencies/"/>
      <url>/js/json-dependencies/</url>
      
        <content type="html"><![CDATA[<blockquote><p>To see the syntax and Railroad diagram version, goto <a href="../json-dependencies-diagram/">here</a></p></blockquote><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>Package dependecies are a tuple of <code>[major, minor, patch]</code> with numeric values.</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;project name&quot;,    &quot;version&quot;: &quot;0.0.1&quot;,    &quot;description&quot;: &quot;description of the project&quot;,    &quot;keywords&quot;: [        &quot;keyword 1&quot;,        &quot;keyword 2&quot;    ],    &quot;author&quot;: &quot;John Doe&quot;,    &quot;dependencies&quot;: &#123;      &quot;package-1&quot;: &quot;~0.6.2&quot;,      &quot;package-2&quot;: &quot;&gt;=2.6.2&quot;    &#125;&#125;</code></pre><h2 id="Version-Range-operator"><a href="#Version-Range-operator" class="headerlink" title="Version Range operator"></a>Version Range operator</h2><h3 id="Basic-Range"><a href="#Basic-Range" class="headerlink" title="Basic Range"></a>Basic Range</h3><p>For <code>x</code> in exmaple, see <strong>Advanced Range</strong> below.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left">package version must be exactly matched</td><td align="left"><code>1.0.0</code> :&#x3D; <code>=1.0.0</code><br>(They are equivalent)</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">package version must be less than indicated</td><td align="left"><code>&lt;2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>1.x.x</code></td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">package version must be less than or euqal to indicated</td><td align="left"><code>&lt;=2.0.0</code> <br>:&#x3D;version from <code>0.0.1</code> to <code>2.0.0</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">package version must be greater than indicated</td><td align="left"><code>&gt;2.0.0</code>:&#x3D; <br>version from <code>2.0.1</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">package version must be greater than or euqal to indicated</td><td align="left"><code>&gt;=2.0.0</code> <br>:&#x3D;version from <code>2.0.0</code> to <code>x</code> (x &gt;&#x3D; 2)</td></tr><tr><td align="left"><code>||</code></td><td align="left">joined one or more operator</td><td align="left"><code>&gt;2.0.1 || &lt;1.7.3</code> <br>:&#x3D;version greater than <code>2.0.1</code> or less than <code>1.7.3</code></td></tr><tr><td align="left"><code>space</code></td><td align="left">Intersected one or more operator</td><td align="left"><code>&gt;=2.0.1  &lt;=1.7.3</code> <br>:&#x3D;version from <code>2.0.1</code> to <code>1.7.3</code> (inclusive)</td></tr></tbody></table><h3 id="Advanced-Range"><a href="#Advanced-Range" class="headerlink" title="Advanced Range"></a>Advanced Range</h3><p>Advanced ranges may be combined in the same way as primitive comparators using <code>space</code> or <code>||</code>.</p><table><thead><tr><th align="left">Operator</th><th align="left">Explaination</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left"><code>X</code>, <code>x</code>, <code>*</code></td><td align="left">A Wildcard may be used for any values in the <code>[major, minor, patch]</code> tuple (missing value are consider using Wildcard <code>x</code>)</td><td align="left"><code>*</code> :&#x3D; <code> </code><em>(empty string)</em> :&#x3D; <code>&gt;=0.0.0</code><br><code>1.x.x</code> :&#x3D; <code>1.x</code> :&#x3D; <code>1</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">Specifies an inclusive set of package version</td><td align="left"><code>1.2 - 2.3.4</code> :&#x3D; <code>&gt;=1.2.0 &lt;=2.3.4</code> <br>(missing pieces of first version are replaced with zeroes)<br><code>1.2.3 - 2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.4.x</code><br>(missing pieces of second version replace with <code>X-range</code>)</td></tr><tr><td align="left"><code>~</code></td><td align="left">Allows <code>patch</code> or <code>minor</code> level version changes, depends on specification</td><td align="left"><code>~1.2.3</code> :&#x3D; any version starts with <code>1.2</code> and greater than <code>1.2.3</code><br><code>~1.2</code> :&#x3D; any version starts with <code>1.2</code> (same as <code>1.2.x</code>)</td></tr><tr><td align="left"><code>^</code></td><td align="left">Allows version changes in the <code>[major, minor, patch]</code> tuple without modify the <strong>left-most non-zero</strong> element.</td><td align="left"><code>^1.2.3</code> :&#x3D; <code>&gt;=1.2.3 &lt;2.0.0</code><br>(minor update)<br><code>^0.2.3</code> :&#x3D; <code>&gt;=0.2.3 &lt;0.3.0</code> <br>(patch update)<br><code>^0.0.3</code> :&#x3D; <code>&gt;=0.0.3 &lt;0.0.4</code><br>(no updates)</td></tr></tbody></table><h2 id="Further-Explaination-on-Caret-Ranges"><a href="#Further-Explaination-on-Caret-Ranges" class="headerlink" title="Further Explaination on Caret Ranges ^"></a>Further Explaination on Caret Ranges <code>^</code></h2><h3 id="Special-interaction-with-Wildcard-operator-x"><a href="#Special-interaction-with-Wildcard-operator-x" class="headerlink" title="Special interaction with Wildcard operator x"></a>Special interaction with Wildcard operator <code>x</code></h3><p>When parsing caret ranges, minor and patch values with wildcard <code>x</code> desugars to the number <code>0</code> (missing values are consider as <code>x</code>):</p><p>Example:</p><ul><li><code>^1.2.x</code> :&#x3D; <code>&gt;=1.2.0 &lt;2.0.0-0</code> (equivalent to <code>^1.2.0</code>)</li><li><code>^1.x</code> :&#x3D; <code>&gt;=1.0.0 &lt;2.0.0-0</code> (equivalent to <code>^1.0.0</code>)</li></ul><p>However, when both <code>major</code> and <code>minor</code> versions are <code>0</code>, Caret range allow flexibility within wildcard <code>x</code>:</p><p>Example:</p><ul><li><code>^0.0.x</code> :&#x3D; <code>&gt;=0.0.0 &lt;0.1.0-0</code> (<strong>NOT</strong> equivalent to <code>^0.0.0</code>, but similar to <code>^0.1.0</code>)</li></ul><h3 id="Usage-and-Common-Practices"><a href="#Usage-and-Common-Practices" class="headerlink" title="Usage and Common Practices"></a>Usage and Common Practices</h3><p>Caret ranges usually ideally used when an author may make breaking changes. For example, between <code>0.2.4</code> and <code>0.3.0</code> releases, which is a common practice. </p><p>However, it presumes that there will not be breaking changes between <code>0.2.4</code> and <code>0.2.5</code>. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices.</p><hr><p>Further Reading: <a href="https://github.com/npm/node-semver#ranges">version range</a> in npm-semver, <a href="https://github.com/actions/setup-node#supported-version-syntax">setup-node</a> in GitHub Actions</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why you shouldn&#39;t deploy your Hexo webpage using GitHub Desktop?</title>
      <link href="/github-desktop/"/>
      <url>/github-desktop/</url>
      
        <content type="html"><![CDATA[<h2 id="Methods-to-Deploy-Hexo-to-GitHub-io"><a href="#Methods-to-Deploy-Hexo-to-GitHub-io" class="headerlink" title="Methods to Deploy Hexo to GitHub.io"></a>Methods to Deploy Hexo to GitHub.io</h2><p>Assume you’ve created a repository on GitHub called <code>&lt;username&gt;.github.io</code>. Here are two common method you can deploy you Hexo Blog:</p><h3 id="Hexo-Command"><a href="#Hexo-Command" class="headerlink" title="Hexo Command"></a>Hexo Command</h3><p>Hexo’s documentations and Tutorial has provided sufficient instructions on deploying your personal website on your GitHub repository.</p><p>According to the <a href="https://hexo.io/docs/github-pages">Hexo Tutorial</a>, we can deploy the repository by using <a href="https://docs.github.com/en/actions">GitHub Actions</a>.</p><ol><li><p>Create and Add the following contents to <code>.github/workflows/pages.yml</code>:</p><pre><code class="yml">name: Pageson:push:    branches:    - main # default branchjobs:build:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@v4        with:        token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;        submodules: recursive    - name: Use Node.js 20        uses: actions/setup-node@v4        with:        # Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node        # Ref: https://github.com/actions/setup-node#supported-version-syntax        node-version: &quot;&gt;=20&quot;     - name: Cache NPM dependencies        uses: actions/cache@v4        with:        path: node_modules        key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache        restore-keys: |            $&#123;&#123; runner.OS &#125;&#125;-npm-cache    - name: Install Dependencies        run: npm install    - name: Build        run: npm run build    - name: Upload Pages artifact        uses: actions/upload-pages-artifact@v3        with:        path: ./publicdeploy:    needs: build    permissions:    pages: write    id-token: write    environment:    name: github-pages    url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125;    runs-on: ubuntu-latest    steps:    - name: Deploy to GitHub Pages        id: deployment        uses: actions/deploy-pages@v4</code></pre></li><li><p>Install <code>hexo-deployer-git</code>.</p></li><li><p>Add&#x2F;Change the following configurations to <code>_config.yml</code>:</p><pre><code class="yml">deploy:type: gitrepo: https://github.com/&lt;username&gt;/&lt;project&gt;# for example, this blog is https://github.com/greenmeeple/greenmeeple.github.iobranch: gh-pages</code></pre></li><li><p>After finishing your bog posts, Run <code>hexo clean &amp;&amp; hexo deploy</code>.</p></li></ol><h3 id="GitHub-Desktop"><a href="#GitHub-Desktop" class="headerlink" title="GitHub Desktop"></a>GitHub Desktop</h3><p>Many Users installed <a href="https://desktop.github.com/download/">GitHub Desktop</a> for better visualization on changes, so do I. It provides more intuitive push and commit procedure and instruction compared to terminal. Most of the time I use it to make sure no unexpected line changes or modification.</p><p><img src="/images/site_notes/github_desktop.png"></p><p>But soon I noticed that, every time after running <code>hexo clean &amp;&amp; hexo deploy</code>, GitHub Desktop will warn me that there’s something need to be pulled. When I pull it for merging it return <code>Unable to merge unrelated histories in repository</code>. Even in the image above, it shows that I should pull something. However, how would I need to pull if I’ve just push it?</p><h2 id="Security-Problem"><a href="#Security-Problem" class="headerlink" title="Security Problem"></a>Security Problem</h2><p>So I inspect my repository, these two method actually deploy <strong>completely different</strong> content to the repository, even though they output the identical content on the webpage.</p><p>When you deploy you webpage with Hexo command, it actually creates a folder <code>.deploy_git</code>, which is static HTML content without showing any configurations like your <code>themes</code> folder or <code>_config.yml</code> folder. In contrast, GitHub Desktop solely commit all folder that is not in <code>.gitignore</code> file and the website just rendered dynamically in the repository when someone visit.</p><p>This create a huge security problem as much as it seems. All contents in your config is now visible to everyone. Since Hexo is a simple framework that depends heavily on <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <code>.yml</code> files, there’s on where to hide all your settings and <code>&lt;script&gt;</code> if they just directly commit to your repository before building it statically. This may include not only your SEO and functionality of your webiste, but even some secret variable.</p><h3 id="GitTalk-comment-section-and-GitHub-OAUTH"><a href="#GitTalk-comment-section-and-GitHub-OAUTH" class="headerlink" title="GitTalk comment section and GitHub OAUTH"></a>GitTalk comment section and GitHub OAUTH</h3><p>For example, the comment section below every posts in this blog are powered by <a href="https://github.com/gitalk/gitalk">GitTalk</a>. It requires users to login through GitHub to comment. In order to handle the authorization of login, blog owners need to create an <a href="https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app">OAUTH App</a>. Then they need to input their <code>clientID</code> and <code>clientSecret</code> initiate the plugin. For Hexo file structure, this will usually be stored in <code>_config.yml</code>.</p><p>Therefore, if Blog Owner simply commit the whole folder using GitHub Desktop, their OAUTH App credentials are leaked to everyone. And this is how I start noticing the two deploy methods above are so different.</p><h2 id="Saving-your-sensitive-information-from-Data-Leak"><a href="#Saving-your-sensitive-information-from-Data-Leak" class="headerlink" title="Saving your sensitive information from Data Leak?"></a>Saving your sensitive information from Data Leak?</h2><p>As you may know, once you commit your issue on GitHub, it will leave a trace. This is because the version control nature of GitHub. But that also means everyone can always inspect your repositories’ history, even your newest version already removed your leaked data. Other than deleting your repository and start all over again, you may also cover and rewrite your commit history, and even rewrite the content by following <a href="./">this</a>.</p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Environment_variable">Environment variable</a>, <a href="https://stackoverflow.com/questions/44342276/how-to-push-code-to-github-hiding-the-api-keys">How to push code to Github hiding the API keys?</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathjax prime superscript problem in Hexo theme</title>
      <link href="/site/hexo-mathjax/"/>
      <url>/site/hexo-mathjax/</url>
      
        <content type="html"><![CDATA[<h2 id="Prime-superscript-problem-e-g-x’-i-in-Mathjax"><a href="#Prime-superscript-problem-e-g-x’-i-in-Mathjax" class="headerlink" title="Prime superscript problem (e.g. x’_i) in Mathjax"></a>Prime superscript problem (e.g. x’_i) in Mathjax</h2><p>When I was using <a href="https://www.mathjax.org/">Mathjax</a> to create math formula in my blog post, I typed<br><code>((q_1, q_2), a, (q&#39;_1, q&#39;_2)) \in S \times \Sigma_&#123;int&#125; \times S</code> and it rendered as</p><p><em><strong>$((q_1, q_2), a, (q’_1, q’<em>2)) \in S \times \Sigma</em>{int} \times S$</strong></em></p><p>However, when <code>((q_1, q_2), a, (q&#39;_1, q&#39;_2))</code> &amp; <code>\in S \times \Sigma_&#123;int&#125; \times S</code> are seperated, they rendered properly.</p><p>$$((q_1, q_2), a, (q’_1, q’_2))$$</p><p>$$\in S \times \Sigma_{int} \times S$$</p><blockquote><p>Maybe I should use <code>\left</code> and <code>\right</code> for (), just like <code>\lbrace</code> and <code>\rbrace</code> for {}?</p></blockquote><p>So I typed <code>\left( \left( q_1, q_2 \right), a, \left( q&#39;_1, q&#39;_2 \right) \right) \in S \times \Sigma_&#123;int&#125; \times S</code>, didn’t work out:</p><p><em><strong>$\left( \left( q_1, q_2 \right), a, \left( q’_1, q’<em>2 \right) \right) \in S \times \Sigma</em>{int} \times S$</strong></em></p><h2 id="Source-of-error"><a href="#Source-of-error" class="headerlink" title="Source of error"></a>Source of error</h2><blockquote><p>Problem definitely comes from the first half of the formula, since second half are all variables.</p></blockquote><p>Turns out there may be an issue with how the <strong>prime symbol</strong> are being handled.</p><p>For simple formula, <code>q&#39;_1</code> and <code>q_1&#39;</code> are considered the identical.<br>However, for more complicated formula, the only <code>q_1&#39;</code> can be rendered correctly:</p><p>$$((q_1, q_2), a, (q_1’, q_2’)) \in S \times \Sigma_{int} \times S$$</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>Afterwards, I found people reported <a href="https://physics.meta.stackexchange.com/questions/2614/a-prime-superscript-in-latex-mathjax-not-displayed-correctly">similar issue</a> before.</p><p>Two basic solutions:</p><ol><li><p>Stick to the format <code>x_&#123;Subscript&#125;^&#123;Superscript&#125;</code>, but for prime symbol <code>&#39;</code>, use it as <code>x_&#123;Subscript&#125;&#39;</code></p></li><li><p>Simply use <code>&#123;\prime&#125;</code> for every situation, e.g. <code>x_&#123;i&#125;^&#123;\prime&#125;</code>.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SiteNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Latex </tag>
            
            <tag> Mathjax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
